<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AbstractNode.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/internal/</path>
    <filename>a00068</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00074" name="Inputs.h" local="no" imported="no">tvm/graph/internal/Inputs.h</includes>
    <class kind="class">tvm::graph::abstract::Node</class>
    <class kind="class">tvm::graph::internal::AbstractNode</class>
    <class kind="struct">tvm::graph::internal::AbstractNode::Update</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::abstract</namespace>
    <namespace>tvm::graph::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SET_UPDATES</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abd38cd98a6567962387d6ebe5a27ce45</anchor>
      <arglist>(SelfT,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISABLE_UPDATES</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab98a42d80dd95363599af2d95e71879b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLEAR_DISABLED_UPDATES</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2af6eb7ce3d5fb8c61bb1b072d449820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_update</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a447a144be9f3728a7edd8decf10430d0</anchor>
      <arglist>(EnumT v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_update</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a36eb922b44beb7381a9b159042a7e94b</anchor>
      <arglist>(EnumT v, Args ... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AffineExpr.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/</path>
    <filename>a00287</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00323" name="Variable.h" local="no" imported="no">tvm/Variable.h</includes>
    <includes id="a00122" name="meta.h" local="no" imported="no">tvm/internal/meta.h</includes>
    <includes id="a00296" name="AffineExprDetail.h" local="no" imported="no">tvm/utils/internal/AffineExprDetail.h</includes>
    <includes id="a00299" name="AffineExprOperators.h" local="no" imported="no">tvm/utils/internal/AffineExprOperators.h</includes>
    <class kind="class">tvm::utils::LinearExpr</class>
    <class kind="class">tvm::utils::AffineExpr</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="function">
      <type>AffineExpr&lt; CstDerived, Derived... &gt;</type>
      <name>make_AffineExpr</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5aaf37f87c2b6c95abbfec5abd1c5607</anchor>
      <arglist>(const CstDerived &amp;constant, const std::tuple&lt; LinearExpr&lt; Derived &gt;... &gt; &amp;linear)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AffineExprDetail.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/internal/</path>
    <filename>a00296</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <class kind="class">tvm::utils::internal::NoConstant</class>
    <class kind="struct">tvm::utils::internal::RefSelector</class>
    <class kind="struct">tvm::utils::internal::RefSelector&lt; NoConstant &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; tvm::utils::internal::NoConstant &gt;</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <namespace>tvm::utils::internal</namespace>
    <namespace>Eigen</namespace>
    <namespace>Eigen::internal</namespace>
    <member kind="typedef">
      <type>decltype(Eigen::MatrixXd::Identity())</type>
      <name>IdentityType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a0365b200643e704353a458f177382135</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(2. *Eigen::MatrixXd::Identity())</type>
      <name>MultIdentityType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a972d81ac8de59a505156ca04e184f2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(-Eigen::MatrixXd::Identity())</type>
      <name>MinusIdentityType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a3285e6576eeb8aea8ef9aad32633b961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename RefSelector&lt; Derived &gt;::type</type>
      <name>RefSelector_t</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>aa05965cff82275d2b7213670c1b63ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; std::remove_reference_t&lt; decltype(std::declval&lt; LhsType &gt;()+std::declval&lt; RhsType &gt;())&gt; &gt;</type>
      <name>AddConstantsRetType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a9405c2755b4621868748e6ef57646a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const RhsType &amp;</type>
      <name>operator+</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a600bbbc181df0dc981d0addedb9dabfe</anchor>
      <arglist>(const NoConstant &amp;, const Eigen::MatrixBase&lt; RhsType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const LhsType &amp;</type>
      <name>operator+</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ab58b32650e0a7559e25ab8fea80d19f8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; LhsType &gt; &amp;lhs, const NoConstant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a2cd6fa0b151fe4e24739df15014437da</anchor>
      <arglist>(const NoConstant &amp;, const NoConstant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NoConstant</type>
      <name>operator*</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a5dc2d1c292597817e4239ec5a7fefc97</anchor>
      <arglist>(const MultType &amp;, const NoConstant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>tupleUnaryMinus</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a953b63ac3bf3b93a21e8fb0fe5ff0f11</anchor>
      <arglist>(const Tuple &amp;tuple, std::index_sequence&lt; Indices... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>tuplePremult</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a7a3de7863251546ec818c97434bc6007</anchor>
      <arglist>(const MultType &amp;m, const Tuple &amp;tuple, std::index_sequence&lt; Indices... &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AffineExprOperators.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/internal/</path>
    <filename>a00299</filename>
    <includes id="a00287" name="AffineExpr.h" local="no" imported="no">tvm/utils/AffineExpr.h</includes>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3cdde69915328393a888c9062f24d7cd</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa7dbf421bc45d00359a50b250ff0e9d5</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af7793f96378dc79eab2695c67494b143</anchor>
      <arglist>(const MultDerived &amp;m, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, Derived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac264bd8dc4ebddfb87acafbe7e8f4bf3</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const Eigen::MatrixBase&lt; CstDerived &gt; &amp;cst)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, Derived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a9d8c5e4d1ad1590d9b306a58ae47ec2b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; CstDerived &gt; &amp;cst, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::NoConstant, LhsDerived, RhsDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a13c4782f9ba59e1f075de1618a925053</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; LhsDerived &gt; &amp;lhs, const tvm::utils::LinearExpr&lt; RhsDerived &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, LhsDerived..., RhsDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a083caf4687183af1d9a906e7466956f2</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, LhsDerived... &gt; &amp;lhs, const tvm::utils::LinearExpr&lt; RhsDerived &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, LhsDerived, RhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af5e7802dfd7f099b812212d4ef6e3962</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; LhsDerived &gt; &amp;lhs, const tvm::utils::AffineExpr&lt; CstDerived, RhsDerived... &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::AddConstantsRetType&lt; CstDerived, RhsDerived &gt;, LhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>afc5fd31d42639a483c599c87db2cea46</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, LhsDerived... &gt; &amp;lhs, const Eigen::MatrixBase&lt; RhsDerived &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::AddConstantsRetType&lt; LhsDerived, CstDerived &gt;, RhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a83c605bf346d7252ee8de2d284685a15</anchor>
      <arglist>(const Eigen::MatrixBase&lt; LhsDerived &gt; &amp;lhs, const tvm::utils::AffineExpr&lt; CstDerived, RhsDerived... &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::AddConstantsRetType&lt; LCstDerived, RCstDerived &gt;, LhsDerived..., RhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8e565c70b785d19ad676d319b1ae50b8</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; LCstDerived, LhsDerived... &gt; &amp;lhs, const tvm::utils::AffineExpr&lt; RCstDerived, RhsDerived... &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a41553ea968b600c4399caa109bca5fd9</anchor>
      <arglist>(const MultType &amp;m, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2a3a0beff3febe8fdf989cbbc1dbd603</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const SubType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac0af960f7e734e957a808404a4755a8a</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const SubType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearExpr&lt; Derived &gt;</type>
      <name>operator*</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ad7cc76834903afa6ef272c4935ee2837</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearExpr&lt; tvm::utils::internal::MinusIdentityType &gt;</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>acd7ff9789bcf46ce107800db44a92281</anchor>
      <arglist>(const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearExpr&lt; tvm::utils::internal::MultIdentityType &gt;</type>
      <name>operator*</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a8f87789a1545f7072d62b29577bcd884</anchor>
      <arglist>(double s, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af1e2b4572cd9f6ec303e172db9f16499</anchor>
      <arglist>(const tvm::VariablePtr &amp;u, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ae4559794ded869fd19fcedccbf6a16a5</anchor>
      <arglist>(const AddType &amp;a, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a0e377f89ef6354c21a59dcd711178409</anchor>
      <arglist>(const tvm::VariablePtr &amp;v, const AddType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a6cb244525d8de41c8c92a4dbe755c7a0</anchor>
      <arglist>(const tvm::VariablePtr &amp;u, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ac07d466392acf028d8ac758a87250192</anchor>
      <arglist>(const SubType &amp;a, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ad4cd68900b5ad86ffc5d47983bf1ed1f</anchor>
      <arglist>(const tvm::VariablePtr &amp;v, const SubType &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AnisotropicWeight.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/requirements/</path>
    <filename>a00140</filename>
    <includes id="a00137" name="SingleSolvingRequirement.h" local="no" imported="no">tvm/requirements/abstract/SingleSolvingRequirement.h</includes>
    <class kind="class">tvm::requirements::AnisotropicWeightBase</class>
    <namespace>tvm</namespace>
    <namespace>tvm::requirements</namespace>
    <member kind="typedef">
      <type>AnisotropicWeightBase&lt; true &gt;</type>
      <name>AnisotropicWeight</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a0bbe98ef109d5802048b074fc010ed55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>api.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00002</filename>
    <member kind="define">
      <type>#define</type>
      <name>TVM_DLLIMPORT</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a004bb72be9247dd283108434c0f4c73a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_DLLEXPORT</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8d05d7bd4b355f479a68d05b9159a638</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_DLLLOCAL</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aaaf7dfe76f14455950fdb1ec6311d50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_DLLAPI</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab3999ac9b308cc961c731e6f9c1e96c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_LOCAL</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>af82e6f32ddf1967b2d154a840d269498</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Assignment.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00203</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00323" name="Variable.h" local="no" imported="no">tvm/Variable.h</includes>
    <includes id="a00011" name="LinearConstraint.h" local="no" imported="no">tvm/constraint/abstract/LinearConstraint.h</includes>
    <includes id="a00098" name="Substitutions.h" local="no" imported="no">tvm/hint/internal/Substitutions.h</includes>
    <includes id="a00146" name="SolvingRequirements.h" local="no" imported="no">tvm/requirements/SolvingRequirements.h</includes>
    <includes id="a00206" name="AssignmentTarget.h" local="no" imported="no">tvm/scheme/internal/AssignmentTarget.h</includes>
    <includes id="a00212" name="CompiledAssignmentWrapper.h" local="no" imported="no">tvm/scheme/internal/CompiledAssignmentWrapper.h</includes>
    <class kind="class">tvm::scheme::internal::Assignment</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
    <member kind="function">
      <type>VectorConstRef</type>
      <name>retrieveSource</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a1e90aa78e3bdfb11980873071c6fe3c0</anchor>
      <arglist>(LinearConstraintPtr, const VectorConstRef &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>VectorConstRef</type>
      <name>retrieveSource</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a88f72a72c8272404526948380e2c17af</anchor>
      <arglist>(LinearConstraintPtr s, const Assignment::RHSFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>retrieveTarget</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>aba64b04d0e1aef8bb0bfdb124190f42c</anchor>
      <arglist>(AssignmentTarget &amp;, VectorRef v)</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>retrieveTarget</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a60108629f94e12f0436eca0f14c388f0</anchor>
      <arglist>(AssignmentTarget &amp;t, Assignment::VectorFunction v)</arglist>
    </member>
    <member kind="function">
      <type>std::nullptr_t</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abd05314126989eab9b242bf92488a2bf</anchor>
      <arglist>(const VectorConstRef &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::nullptr_t</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a28a207530e99642d57ddca436cb8bb35</anchor>
      <arglist>(VectorRef)</arglist>
    </member>
    <member kind="function">
      <type>Assignment::RHSFunction</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ab00799dc5148058efb3be6fecbff5529</anchor>
      <arglist>(Assignment::RHSFunction f)</arglist>
    </member>
    <member kind="function">
      <type>Assignment::VectorFunction</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a5b3e9508d3b922edd410f209caa63fbd</anchor>
      <arglist>(Assignment::VectorFunction v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AssignmentTarget.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00206</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <class kind="class">tvm::scheme::internal::AssignmentTarget</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
    <member kind="enumeration">
      <type></type>
      <name>TargetType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abe11da65d6ccf4412671e16317eb1f3b</anchor>
      <arglist></arglist>
      <enumvalue file="a00398.html" anchor="abe11da65d6ccf4412671e16317eb1f3ba32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
      <enumvalue file="a00398.html" anchor="abe11da65d6ccf4412671e16317eb1f3ba8b2972385ed28d0e199ae2985d6fea4c">Quadratic</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>AutoCalculator.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/internal/</path>
    <filename>a00089</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00083" name="SubstitutionCalculator.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculator.h</includes>
    <class kind="class">tvm::hint::internal::AutoCalculator</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>BasicLinearConstraint.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/constraint/</path>
    <filename>a00014</filename>
    <includes id="a00011" name="LinearConstraint.h" local="no" imported="no">tvm/constraint/abstract/LinearConstraint.h</includes>
    <includes id="a00116" name="MatrixProperties.h" local="no" imported="no">tvm/internal/MatrixProperties.h</includes>
    <class kind="class">tvm::constraint::BasicLinearConstraint</class>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
  </compound>
  <compound kind="file">
    <name>BasicLinearFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/function/</path>
    <filename>a00047</filename>
    <includes id="a00044" name="LinearFunction.h" local="no" imported="no">tvm/function/abstract/LinearFunction.h</includes>
    <includes id="a00116" name="MatrixProperties.h" local="no" imported="no">tvm/internal/MatrixProperties.h</includes>
    <includes id="a00287" name="AffineExpr.h" local="no" imported="no">tvm/utils/AffineExpr.h</includes>
    <class kind="class">tvm::function::BasicLinearFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::function</namespace>
  </compound>
  <compound kind="file">
    <name>BufferedMatrix.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/internal/</path>
    <filename>a00302</filename>
    <class kind="class">tvm::utils::internal::BufferedMatrix</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <namespace>tvm::utils::internal</namespace>
  </compound>
  <compound kind="file">
    <name>CallbackManager.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00107</filename>
    <includes id="a00128" name="PairElementToken.h" local="no" imported="no">tvm/internal/PairElementToken.h</includes>
    <class kind="class">tvm::internal::CallbackManager</class>
    <namespace>tvm::internal</namespace>
  </compound>
  <compound kind="file">
    <name>CallGraph.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/</path>
    <filename>a00065</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00068" name="AbstractNode.h" local="no" imported="no">tvm/graph/internal/AbstractNode.h</includes>
    <includes id="a00071" name="DependencyGraph.h" local="no" imported="no">tvm/graph/internal/DependencyGraph.h</includes>
    <class kind="class">tvm::graph::CallGraph</class>
    <class kind="struct">tvm::graph::CallGraph::Call</class>
    <class kind="struct">tvm::graph::CallGraph::CompareCall</class>
    <class kind="struct">tvm::graph::CallGraph::Plan</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
  </compound>
  <compound kind="file">
    <name>checkFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/</path>
    <filename>a00290</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <class kind="class">tvm::utils::CheckOptions</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>checkJacobian</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga8bb02aa8295218894c58053afefb1098</anchor>
      <arglist>(FunctionPtr f, CheckOptions opt=CheckOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Clamped.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00263</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::Clamped</class>
    <class kind="class">tvm::task_dynamics::Clamped::Impl</class>
    <namespace>tvm::task_dynamics</namespace>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00005</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00059" name="Outputs.h" local="no" imported="no">tvm/graph/abstract/Outputs.h</includes>
    <class kind="class">tvm::Clock</class>
    <namespace>tvm</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00155</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <includes id="a00167" name="ConvexHull.h" local="no" imported="no">tvm/robot/ConvexHull.h</includes>
    <class kind="class">tvm::robot::CollisionFunction</class>
    <class kind="struct">tvm::robot::CollisionFunction::CollisionData</class>
    <class kind="struct">tvm::robot::CollisionFunction::CollisionData::ObjectData</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>CoMFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00158</filename>
    <includes id="a00197" name="Robot.h" local="no" imported="no">tvm/Robot.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::CoMFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>CoMInConvexFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00161</filename>
    <includes id="a00197" name="Robot.h" local="no" imported="no">tvm/Robot.h</includes>
    <includes id="a00053" name="Plane.h" local="no" imported="no">tvm/geometry/Plane.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::CoMInConvexFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>CompiledAssignment.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00209</filename>
    <class kind="class">tvm::scheme::internal::NoArg</class>
    <class kind="class">tvm::scheme::internal::ParseArg_</class>
    <class kind="class">tvm::scheme::internal::ParseNoArg_</class>
    <class kind="class">tvm::scheme::internal::ParseArg</class>
    <class kind="class">tvm::scheme::internal::hasNoArgCtor</class>
    <class kind="class">tvm::scheme::internal::ArgCount</class>
    <class kind="class">tvm::scheme::internal::ArgCount&lt; T &gt;</class>
    <class kind="class">tvm::scheme::internal::CachedResult</class>
    <class kind="class">tvm::scheme::internal::CachedResult&lt; MatrixType, true &gt;</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache&lt; MatrixType, MIN, W, GENERAL, EXTERNAL &gt;</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache&lt; MatrixType, MAX, W, GENERAL, EXTERNAL &gt;</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache&lt; MatrixType, A, W, GENERAL, CONSTANT &gt;</class>
    <class kind="class">tvm::scheme::internal::use_product_cache</class>
    <class kind="class">tvm::scheme::internal::use_product_cache&lt; MatrixType, A, DIAGONAL, GENERAL, EXTERNAL &gt;</class>
    <class kind="class">tvm::scheme::internal::use_product_cache&lt; MatrixType, A, DIAGONAL, GENERAL, CONSTANT &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; COPY &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; ADD &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; SUB &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; MIN &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; MAX &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; NONE &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; MINUS &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; SCALAR &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; DIAGONAL &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, IDENTITY &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, GENERAL &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, INVERSE_DIAGONAL &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, CUSTOM &gt;</class>
    <class kind="class">tvm::scheme::internal::SourceBase</class>
    <class kind="class">tvm::scheme::internal::SourceBase&lt; MatrixType, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, A, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, COPY, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, MIN, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, MAX, W, M, ZERO &gt;</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EIGEN_RUNTIME_NO_MALLOC</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a90bf84d3e5deeec00de77460ca485842</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; MatrixType::ColsAtCompileTime==1, std::true_type, std::false_type &gt;::type</type>
      <name>isVector</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a004afcb1d38a4be484e715ebb9936fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; MatrixType::ColsAtCompileTime !=1, std::true_type, std::false_type &gt;::type</type>
      <name>isMatrix</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abb0a7c8fa6017cb9e8f2682c0d0dcd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AssignType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578af0c73515adef86a0d1f825bfb86a4784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578a010df03f1145be89b73897c0d8b8f7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUB</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578acf1a14be3f8890df2e2701343b3af30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578abf1eccb4f3bd4c3867e067d7b3d62b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578a190a2f70edc18fc77838e54c617ce79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WeightMult</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a3ce4d03476f4b5a9339093a5e1413d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a8837683631cde0a3713dedea1ee833e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALAR</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a3f600fcc9178227d4221692248a607cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIAGONAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a54b75b1f94c035631788609cea47acf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MatrixMult</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDENTITY</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fda821c15bebc2a454f1197ef3677f7e437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fda8816dee447b86ccf9bec4d5111b38a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVERSE_DIAGONAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fdae656c7c4b3f1e7026cafcd5a8508f870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUSTOM</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fda406a9749aea3c711f544bc3bb79ea0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Source</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTERNAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3ad36302b9be93153939876dd13aeff767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZERO</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3a59651a5fd37a9eaf58a55149baf8c490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3ab46dfc1bff46ccf28be89dbab0426e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::true_type</type>
      <name>hasNoArgCtorDummy</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>adbf2331335c97968e5c91d1f6627fe83</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(hasNoArgCtorDummy(T(NoArg())))</type>
      <name>hasNoArgCtor_</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>aac61c3166e4f708d65abab8457912950</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>hasNoArgCtor_</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ab64a27afc0b6a63467f786d3fb9147a0</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompiledAssignmentWrapper.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00212</filename>
    <includes id="a00209" name="CompiledAssignment.h" local="no" imported="no">tvm/scheme/internal/CompiledAssignment.h</includes>
    <class kind="class">tvm::scheme::internal::CompiledAssignmentWrapper</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
  </compound>
  <compound kind="file">
    <name>concepts.dox</name>
    <path>/home/runner/work/tvm/tvm/doc/</path>
    <filename>a00362</filename>
  </compound>
  <compound kind="file">
    <name>Constant.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00266</filename>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::Constant</class>
    <class kind="class">tvm::task_dynamics::Constant::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/constraint/abstract/</path>
    <filename>a00008</filename>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <includes id="a00023" name="RHSVectors.h" local="no" imported="no">tvm/constraint/internal/RHSVectors.h</includes>
    <includes id="a00110" name="FirstOrderProvider.h" local="no" imported="no">tvm/internal/FirstOrderProvider.h</includes>
    <includes id="a00062" name="OutputSelector.h" local="no" imported="no">tvm/graph/abstract/OutputSelector.h</includes>
    <class kind="class">tvm::constraint::abstract::Constraint</class>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
    <namespace>tvm::constraint::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>Contact.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00164</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00170" name="Frame.h" local="no" imported="no">tvm/robot/Frame.h</includes>
    <class kind="class">tvm::robot::Contact</class>
    <class kind="struct">tvm::robot::Contact::Id</class>
    <class kind="struct">tvm::robot::Contact::View</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Contact &gt;</type>
      <name>ContactPtr</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a434d8b9dbb95341a554c0fc413dd00a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a5a134fc526b458839d80668ef5cf8c19</anchor>
      <arglist>(std::ostream &amp;os, const tvm::robot::Contact::Id &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ControlProblem.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00026</filename>
    <includes id="a00254" name="Task.h" local="no" imported="no">tvm/Task.h</includes>
    <includes id="a00065" name="CallGraph.h" local="no" imported="no">tvm/graph/CallGraph.h</includes>
    <includes id="a00146" name="SolvingRequirements.h" local="no" imported="no">tvm/requirements/SolvingRequirements.h</includes>
    <includes id="a00215" name="helpers.h" local="no" imported="no">tvm/scheme/internal/helpers.h</includes>
    <includes id="a00218" name="ProblemComputationData.h" local="no" imported="no">tvm/scheme/internal/ProblemComputationData.h</includes>
    <includes id="a00224" name="ResolutionSchemeBase.h" local="no" imported="no">tvm/scheme/internal/ResolutionSchemeBase.h</includes>
    <includes id="a00221" name="ProblemDefinitionEvent.h" local="no" imported="no">tvm/scheme/internal/ProblemDefinitionEvent.h</includes>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <includes id="a00272" name="None.h" local="no" imported="no">tvm/task_dynamics/None.h</includes>
    <includes id="a00314" name="ProtoTask.h" local="no" imported="no">tvm/utils/ProtoTask.h</includes>
    <class kind="class">tvm::TaskWithRequirements</class>
    <class kind="class">tvm::ControlProblem</class>
    <class kind="class">tvm::ControlProblem::Updater</class>
    <namespace>tvm</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TaskWithRequirements &gt;</type>
      <name>TaskWithRequirementsPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a46e0b62fd9477cadab32a4e39d360a9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConvexHull.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00167</filename>
    <includes id="a00170" name="Frame.h" local="no" imported="no">tvm/robot/Frame.h</includes>
    <class kind="class">tvm::robot::ConvexHull</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConvexHull &gt;</type>
      <name>ConvexHullPtr</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>acf05591ffe61db52448b19482efa9a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defaultLeastSquareSolver.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/solver/</path>
    <filename>a00236</filename>
    <class kind="class">tvm::solver::DefaultLSSolverOptions</class>
    <class kind="class">tvm::solver::DefaultLSSolverFactory</class>
    <namespace>tvm::solver</namespace>
  </compound>
  <compound kind="file">
    <name>defs.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00029</filename>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
    <namespace>tvm::constraint::abstract</namespace>
    <namespace>tvm::function</namespace>
    <namespace>tvm::function::abstract</namespace>
    <namespace>tvm::requirements</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <namespace>tvm::task_dynamics::abstract</namespace>
    <namespace>tvm::constant</namespace>
    <namespace>tvm::constant::internal</namespace>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
      <name>MatrixConstRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af4fdc88306faf6e863cff28f44459ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>adcb821eec4218eb93e3faf0d8a751171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
      <name>VectorConstRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a7afafb1e1034729b83e6d3676108f7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
      <name>VectorRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a5ba6fca76794c352cd250591dab8309e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ad6c7343a28855adb26af330abcba056a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Eigen::VectorXd &gt;</type>
      <name>VectorPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a9345c092d8ef7449a5149510415d978e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; constraint::abstract::Constraint &gt;</type>
      <name>ConstraintPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a6b21f7495f7ef45e0ef41efdbb08d150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; function::abstract::Function &gt;</type>
      <name>FunctionPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a42313833bbb66bf5318f67e0dca5936a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; function::abstract::LinearFunction &gt;</type>
      <name>LinearFunctionPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a043e85123594d7cb4514d783f25a6dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; constraint::abstract::LinearConstraint &gt;</type>
      <name>LinearConstraintPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a9684bcd58c05ed2e7f81eae1633c7082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Clock &gt;</type>
      <name>ClockPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a0476308bca1ade43f6571f7d36d65f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Range &gt;</type>
      <name>RangePtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a9d1e2ac6e0fb302696dd5ac857aea214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a003ca276319664eb1bd64c0b25b99509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; requirements::SolvingRequirementsWithCallbacks &gt;</type>
      <name>SolvingRequirementsPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>afbe973f3a51c3fe6b5557b8e4e51fc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; task_dynamics::abstract::TaskDynamicsImpl &gt;</type>
      <name>TaskDynamicsPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a05be029537364f847283eb3bbf4fee7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Variable &gt;</type>
      <name>VariablePtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a024f10de786d6592dbd271d3df847835</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>pow</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4ac438333fb60e8bc76a956e33a3a9d1</anchor>
      <arglist>(T base, unsigned int exp, T result=1)</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrtNewtonRaphson</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aca8ba5d3eeccb1b947ea987123a875f0</anchor>
      <arglist>(double x, double curr, double prev=0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>sqrtGuess</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad36eb4bd10a887069a044cce4c4d2228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>sqrtOfMax</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1f5330f92255478145c2333d3571b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>big_number</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>aeb21de4788bbb96c1453de69db21a668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>pi</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a5739e815f004bc19ad2b84be26a78824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>fullRank</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a0e46dc26c7ee9d3faf743cacf02265d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a659f8ccf36072d74756182e42b1707d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DependencyGraph.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/internal/</path>
    <filename>a00071</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <class kind="class">tvm::graph::internal::DependencyGraph</class>
    <namespace>tvm::graph::internal</namespace>
  </compound>
  <compound kind="file">
    <name>DiagonalCalculator.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/internal/</path>
    <filename>a00092</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00083" name="SubstitutionCalculator.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculator.h</includes>
    <includes id="a00086" name="SubstitutionCalculatorImpl.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculatorImpl.h</includes>
    <class kind="class">tvm::hint::internal::DiagonalCalculator</class>
    <class kind="class">tvm::hint::internal::DiagonalCalculator::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/internal/</path>
    <filename>a00173</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00197" name="Robot.h" local="no" imported="no">tvm/Robot.h</includes>
    <includes id="a00044" name="LinearFunction.h" local="no" imported="no">tvm/function/abstract/LinearFunction.h</includes>
    <includes id="a02359" name="robot/enums.h" local="no" imported="no">tvm/robot/enums.h</includes>
    <includes id="a00179" name="GeometricContactFunction.h" local="no" imported="no">tvm/robot/internal/GeometricContactFunction.h</includes>
    <includes id="a00176" name="FrictionCone.h" local="no" imported="no">tvm/robot/internal/FrictionCone.h</includes>
    <class kind="class">tvm::robot::internal::DynamicFunction</class>
    <class kind="struct">tvm::robot::internal::DynamicFunction::ForceContact</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <namespace>tvm::robot::internal</namespace>
  </compound>
  <compound kind="file">
    <name>constraint/enums.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/constraint/</path>
    <filename>a02350</filename>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>ab6243a7da877a867f54ff7207959eb7c</anchor>
      <arglist></arglist>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca1625ef4fe09f68fa20d3ff6e02cd5c8e">GREATER_THAN</enumvalue>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca8d8dbd4894bf4197b12b8dc764133146">LOWER_THAN</enumvalue>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca5985013177a5f88f804ff2af491c65a5">DOUBLE_SIDED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RHS</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>adf340c6d4875e2e7502c8a6243ae0551</anchor>
      <arglist></arglist>
      <enumvalue file="a00372.html" anchor="adf340c6d4875e2e7502c8a6243ae0551a529e9e0beb5f85d1f132917c1a09860c">ZERO</enumvalue>
      <enumvalue file="a00372.html" anchor="adf340c6d4875e2e7502c8a6243ae0551a23381f2ccff0bd927c14dd312c5d4ce6">AS_GIVEN</enumvalue>
      <enumvalue file="a00372.html" anchor="adf340c6d4875e2e7502c8a6243ae0551ab4e725f1a00e995987cc42b9f076da65">OPPOSITE</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>event/enums.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/event/</path>
    <filename>a02353</filename>
    <namespace>tvm</namespace>
    <namespace>tvm::event</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>acdfefdd31f6d8d11f9e4813ac51638ab</anchor>
      <arglist></arglist>
      <enumvalue file="a00382.html" anchor="acdfefdd31f6d8d11f9e4813ac51638aba33eab728ee77b73e187b72e1ab05500c">CONTACT_NUMBER_CHANGED</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>internal/enums.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a02356</filename>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="define">
      <type>#define</type>
      <name>COUNT_VA_ARGS</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a42e55ac921dbfa966333e9039ae7f4ec</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_NARG</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a31b9bcd0e7f30adb8ed947d86d4ae11b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_NARG_</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a1b4b6dfcca38ee665c4c88c07d58c4f0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_ARG_N</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a6b6f9a215042022e6f39530292a44588</anchor>
      <arglist>(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, N,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_RSEQ_N</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a15967218850ac6ac5ffd777368fec7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a95dae71c903bc1cb49f30dad28ddfed4</anchor>
      <arglist>(macro, data,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_CHOOSE_MAP_START</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a7e9a41ea0c9dc23f2ddfb3740c266b7a</anchor>
      <arglist>(count)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_APPLY</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a832c2b017c0034975b09dd73ccc03535</anchor>
      <arglist>(macro,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP1</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>af2a46509ef282a6fac75bf0362bce1fb</anchor>
      <arglist>(m, d, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP2</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a31cc39eb409cc9eea04646ccc2022039</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP3</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a6a10288bf134adb5ed662906449a1703</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP4</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ad7503bd8f0f947e19bded06890777955</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP5</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>af4cc74c52b369954a1d188f22d0f1a32</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP6</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a3e2501862ffbc4734f7e1d07ed71c4a5</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP7</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a435ac259c3585ae56b33776f482b01a7</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP8</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a89e485ecfd874861bf55c5aa777c7257</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP9</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a1298bce1d551ec148fb20c1d56d8b84b</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP10</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a0bf7fe7e4ea393fa8c64cc4f49c815b2</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP11</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>af9ae38c0c652191b7fdd11641a14908a</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP12</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ad440c2db0ee0f32ded184916f757d976</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP13</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a585ef093245801d0b17ab243ece5f922</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP14</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ab9c3884ccadbbb37d42a621f97fd41c5</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP15</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ae78c36388492996d3c9407e6448fc805</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP16</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a772f3b1ee192ec7ec802dd5138f7b200</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP17</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a29f0d8b481cafb990e3885fe43e29367</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP18</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>abae0b9a7d8a9b43587e036dcb7fac007</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP19</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a35712e62e13d0ca43e0619b379b789d0</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP20</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ab1bdb9247e99306a15d5290d5f93ae13</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP21</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ad171c65e2418addc5ccb243c086a45c0</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP22</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ac289d146e5af03ea19447a866f662628</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP23</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a0fcb65ce8469945337a73177546564b8</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP24</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a053d1d6977845347e59df6663c51c022</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP25</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a0a5e69538e6fe4a8d678027d270ac8ac</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP26</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a52c2e560d5cab58c5868af0a4b882733</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP27</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>aea55fec7896a2114962e1f577e419698</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP28</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a14d912b3c588a1a4c21c9300d99872a2</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP29</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a6de2fbec2f6663d46258cc82170e576c</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP30</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a6cac0378dcacef10a76af224a3bece79</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP31</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a6ae08f7f86dddd3ff623fe02c726a0de</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP32</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a64a04f3ad82a8f39072bea670423eaa4</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP33</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>aee3fe54af5f8014486420ff92b04cfac</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP34</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>af8ebac4a53ebdb19755155c6e3579bd7</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP35</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ad404eb06787cc4629e5038660d1d80c7</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP36</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a825c18b801dd12414f49c5241483c976</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP37</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ab3a46ec70ccb0ed401ba4d218c21b15c</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP38</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ada4e88262432f2914b11786103f3f9da</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP39</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a1da46d9f259deb7416061f4efaa6a092</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP40</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a7c37466d6aa0e7c42047d9f3324f9379</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP41</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a9636bf1c6be429ee9b324a3cbb52b452</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP42</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a67e6ff4572583b133c5f0ccf64ecf909</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP43</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>aa8b7d39333f8edb7296ef916749048af</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP44</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>adad5df3b90b1acd110b71a92a49ce8ad</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP45</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a88aca5a7e0920bc55d968966505597a7</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP46</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a62d7e0c6bead2de7a095d0f712e698ef</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP47</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a6c6ea832351e0252b3cfb6ece19d5947</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP48</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a2db17f4e6826c1fd8b22d2824fffc64b</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP49</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a09dfc8f3e7701b15ad493272e4146135</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP50</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>aa301af16aad1574b3002941ed8051d28</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP51</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ae6e5e042efb0efbaf2fc113b927a6461</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP52</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a795514584f82bf1cffcec806fb6b8021</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP53</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ab2efaa0d467e4ec98f155c76ea59e48f</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP54</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>abbae36743d620e49307251ba108bdbd2</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP55</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a0ca39e3cd3754f75e0a8f46bdcf7411e</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP56</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a41ab40c74e1d20e78de6dff0854fd08f</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP57</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a7ee86a3aee45534375598feec407c392</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP58</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a697442be689cd077b015d9274ce5c3ca</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP59</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a674296ef79536f4cad058348e702f585</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP60</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a66c85f4373c68c5c47752d1de0bdd4ac</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP61</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>af5cac4f7228d2529543a5439f7fe6a9d</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP62</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>ac00d2cdd23628f425b5c2898aacf241d</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP63</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a2e7ebb6a71e43710a94b2a327d77d2d9</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_MAP64</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>af066f04727c0c4bace1196bcd3c6a980</anchor>
      <arglist>(m, d, x,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PP_ID</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a97b400c69266f278085ba434add0f311</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ENUM_NAME</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a2caeefa544c00de073a68f8d5c1f9518</anchor>
      <arglist>(EnumT, name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_ENUM</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a184c7a633f4f4773d807f79cedd2ff70</anchor>
      <arglist>(EnumName, Enum0,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DECLARE_STRUCT</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a83597c635f5e312c8880f9f21b0c3684</anchor>
      <arglist>(EnumT, name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EXTEND_ENUM</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a8e618badaabfada105c5793e503de60a</anchor>
      <arglist>(EnumName, SelfT,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISABLE_SIGNALS</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a2fd1ffb3b0815406c40239704fe50030</anchor>
      <arglist>(EnumName,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISABLE_SIGNALS_BODY</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a207c0a2eb1af39acd963fad06c4f538e</anchor>
      <arglist>(EnumT, name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLEAR_DISABLED_SIGNALS</name>
      <anchorfile>a02356.html</anchorfile>
      <anchor>a708b683b217e060036f76a97022789ef</anchor>
      <arglist>(EnumName)</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned int</type>
      <name>count_va_args</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7204755fdee75112fb07ca90a8e219d6</anchor>
      <arglist>(const char(&amp;s)[N], unsigned int i=0, unsigned int ret=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>robot/enums.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a02359</filename>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ContactConstraintType</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>ae695c229a7d819c057992d913a3ad10f</anchor>
      <arglist></arglist>
      <enumvalue file="a00394.html" anchor="ae695c229a7d819c057992d913a3ad10fa3b926d163371fd620b09b63219b12f52">Acceleration</enumvalue>
      <enumvalue file="a00394.html" anchor="ae695c229a7d819c057992d913a3ad10fa88156d46910a2d733443c339a9231d12">Velocity</enumvalue>
      <enumvalue file="a00394.html" anchor="ae695c229a7d819c057992d913a3ad10fa52f5e0bc3859bc5f5e25130b6c7e8881">Position</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ContactType</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>aac706730af38b72ec80e95eb336cd043</anchor>
      <arglist></arglist>
      <enumvalue file="a00394.html" anchor="aac706730af38b72ec80e95eb336cd043ad2203cb1237cb6460cbad94564e39345">Regular</enumvalue>
      <enumvalue file="a00394.html" anchor="aac706730af38b72ec80e95eb336cd043a9eb6b78a99cdb6ffd3d40d18621d9f80">Force</enumvalue>
      <enumvalue file="a00394.html" anchor="aac706730af38b72ec80e95eb336cd043aadf9f772a73f364e4ce6c52b9fae740d">Geometric</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>task_dynamics/enums.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a02362</filename>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <member kind="enumeration">
      <type></type>
      <name>Order</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a2104706f158c0b024e10716d3c176cad</anchor>
      <arglist></arglist>
      <enumvalue file="a00378.html" anchor="a2104706f158c0b024e10716d3c176cadad7ed4ee1df437474d005188535f74875">Zero</enumvalue>
      <enumvalue file="a00378.html" anchor="a2104706f158c0b024e10716d3c176cada06c2cea18679d64399783748fa367bdd">One</enumvalue>
      <enumvalue file="a00378.html" anchor="a2104706f158c0b024e10716d3c176cadaaada29daee1d64ed0fe907043855cb7e">Two</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/exception/</path>
    <filename>a00038</filename>
    <class kind="class">tvm::exception::Exception</class>
    <class kind="class">tvm::exception::DataException</class>
    <class kind="class">tvm::exception::UnusedOutput</class>
    <class kind="class">tvm::exception::FunctionException</class>
    <class kind="class">tvm::exception::UnimplementedOutput</class>
    <class kind="class">tvm::exception::DuplicateVariable</class>
    <class kind="class">tvm::exception::NonExistingVariable</class>
    <class kind="class">tvm::exception::NotImplemented</class>
    <namespace>tvm</namespace>
    <namespace>tvm::exception</namespace>
  </compound>
  <compound kind="file">
    <name>FeedForward.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00269</filename>
    <includes id="a00275" name="Proportional.h" local="no" imported="no">tvm/task_dynamics/Proportional.h</includes>
    <includes id="a00278" name="ProportionalDerivative.h" local="no" imported="no">tvm/task_dynamics/ProportionalDerivative.h</includes>
    <class kind="class">tvm::task_dynamics::FeedForward</class>
    <class kind="class">tvm::task_dynamics::FeedForward::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <member kind="typedef">
      <type>FeedForward&lt; ProportionalDerivative &gt;</type>
      <name>FeedForwardPD</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>aef391d4ea376d9ddb35b3bcace52d51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeedForward&lt; Proportional &gt;</type>
      <name>FeedForwardP</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>abefacce58ac7386489ddd237a5fb0ecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FirstOrderProvider.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00110</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00323" name="Variable.h" local="no" imported="no">tvm/Variable.h</includes>
    <includes id="a00326" name="VariableVector.h" local="no" imported="no">tvm/VariableVector.h</includes>
    <includes id="a00056" name="Node.h" local="no" imported="no">tvm/graph/abstract/Node.h</includes>
    <includes id="a00119" name="MatrixWithProperties.h" local="no" imported="no">tvm/internal/MatrixWithProperties.h</includes>
    <includes id="a00308" name="map.h" local="no" imported="no">tvm/utils/internal/map.h</includes>
    <class kind="class">tvm::internal::FirstOrderProvider</class>
    <namespace>tvm</namespace>
    <namespace>tvm::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Frame.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00170</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::Frame</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Frame &gt;</type>
      <name>FramePtr</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a281a5946e79d354cb9a72ac5fbd693a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrictionCone.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/internal/</path>
    <filename>a00176</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <class kind="class">tvm::robot::internal::FrictionCone</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <namespace>tvm::robot::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Function.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/function/abstract/</path>
    <filename>a00041</filename>
    <includes id="a00110" name="FirstOrderProvider.h" local="no" imported="no">tvm/internal/FirstOrderProvider.h</includes>
    <includes id="a00308" name="map.h" local="no" imported="no">tvm/utils/internal/map.h</includes>
    <class kind="class">tvm::function::abstract::Function</class>
    <namespace>tvm</namespace>
    <namespace>tvm::function</namespace>
    <namespace>tvm::function::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>FunctionWritingExample.dox</name>
    <path>/home/runner/work/tvm/tvm/examples/</path>
    <filename>a00335</filename>
  </compound>
  <compound kind="file">
    <name>GenericCalculator.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/internal/</path>
    <filename>a00095</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00083" name="SubstitutionCalculator.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculator.h</includes>
    <includes id="a00086" name="SubstitutionCalculatorImpl.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculatorImpl.h</includes>
    <includes id="a00302" name="BufferedMatrix.h" local="no" imported="no">tvm/utils/internal/BufferedMatrix.h</includes>
    <class kind="class">tvm::hint::internal::GenericCalculator</class>
    <class kind="class">tvm::hint::internal::GenericCalculator::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>GeometricContactFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/internal/</path>
    <filename>a00179</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <includes id="a00164" name="Contact.h" local="no" imported="no">tvm/robot/Contact.h</includes>
    <class kind="class">tvm::robot::internal::GeometricContactFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <namespace>tvm::robot::internal</namespace>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/</path>
    <filename>a00293</filename>
    <includes id="a00065" name="CallGraph.h" local="no" imported="no">tvm/graph/CallGraph.h</includes>
    <includes id="a00305" name="graphDetails.h" local="no" imported="no">tvm/utils/internal/graphDetails.h</includes>
    <includes id="a00074" name="Inputs.h" local="no" imported="no">tvm/graph/internal/Inputs.h</includes>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; graph::CallGraph &gt;</type>
      <name>generateUpdateGraph</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac77af07c5e6ceaf37a0274d54eff0f26</anchor>
      <arglist>(std::shared_ptr&lt; Object &gt; obj, Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graphDetails.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/internal/</path>
    <filename>a00305</filename>
    <includes id="a00065" name="CallGraph.h" local="no" imported="no">tvm/graph/CallGraph.h</includes>
    <includes id="a00074" name="Inputs.h" local="no" imported="no">tvm/graph/internal/Inputs.h</includes>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <namespace>tvm::utils::internal</namespace>
    <member kind="function">
      <type>void</type>
      <name>parseSourcesAndOutputs</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a7c60a66c02c99b2d38d05c90e31c3b74</anchor>
      <arglist>(graph::CallGraph *g, std::shared_ptr&lt; graph::internal::Inputs &gt; user, std::shared_ptr&lt; Object &gt; obj, Output output, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseSourcesAndOutputs</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ab011b26e01ceb7daae3301e972b317e5</anchor>
      <arglist>(graph::CallGraph *g, std::shared_ptr&lt; graph::internal::Inputs &gt; user, std::shared_ptr&lt; Object1 &gt; obj1, std::shared_ptr&lt; Object2 &gt; obj2, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseSourcesAndOutputs</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a1f7de31deb6c74c399f6492e5ca7d595</anchor>
      <arglist>(graph::CallGraph *g, std::shared_ptr&lt; graph::internal::Inputs &gt; user, std::shared_ptr&lt; Object &gt; obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>helpers.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00215</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::internal</namespace>
    <namespace>tvm::function</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
    <member kind="function">
      <type>ProblemComputationData *</type>
      <name>getComputationData</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a76cdca50f833f679b0c9c38f9d5aaf9f</anchor>
      <arglist>(Problem &amp;problem, const Scheme &amp;resolutionScheme)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>isBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a553d86328eb4c4d9e39d73b777004fa0</anchor>
      <arglist>(const ConstraintPtr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>isBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a0074f66a98a9b56746d3692c15c38076</anchor>
      <arglist>(const ConstraintPtr &amp;c, const hint::internal::Substitutions &amp;subs)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>isBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a5f5ff77617e1734ebeab2f9624e60494</anchor>
      <arglist>(const ConstraintPtr &amp;c, const std::vector&lt; VariablePtr &gt; &amp;x, const std::vector&lt; std::shared_ptr&lt; function::BasicLinearFunction &gt;&gt; &amp;xsub)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>canBeUsedAsBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a16bd7d36099635cbe690239eb478f444</anchor>
      <arglist>(const ConstraintPtr &amp;c, const hint::internal::Substitutions &amp;subs, constraint::Type targetConvention)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>canBeUsedAsBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ab88f192fa87a659f163f477ab3d3709f</anchor>
      <arglist>(const ConstraintPtr &amp;c, const std::vector&lt; VariablePtr &gt; &amp;x, const std::vector&lt; std::shared_ptr&lt; function::BasicLinearFunction &gt;&gt; &amp;xsub, constraint::Type targetConvention)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IdentityFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/function/</path>
    <filename>a00050</filename>
    <includes id="a00047" name="BasicLinearFunction.h" local="no" imported="no">tvm/function/BasicLinearFunction.h</includes>
    <class kind="class">tvm::function::IdentityFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::function</namespace>
  </compound>
  <compound kind="file">
    <name>IdProvider.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00113</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <class kind="class">tvm::internal::IdProvider</class>
    <namespace>tvm</namespace>
    <namespace>tvm::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Inputs.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/internal/</path>
    <filename>a00074</filename>
    <includes id="a00059" name="Outputs.h" local="no" imported="no">tvm/graph/abstract/Outputs.h</includes>
    <class kind="class">tvm::graph::internal::Inputs</class>
    <class kind="struct">tvm::graph::internal::Inputs::Iterator</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::internal</namespace>
  </compound>
  <compound kind="file">
    <name>JointsSelector.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00182</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00197" name="Robot.h" local="no" imported="no">tvm/Robot.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::JointsSelector</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>LeastSquaresExample.dox</name>
    <path>/home/runner/work/tvm/tvm/examples/</path>
    <filename>a00341</filename>
  </compound>
  <compound kind="file">
    <name>LeastSquareSolver.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/solver/abstract/</path>
    <filename>a00233</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00098" name="Substitutions.h" local="no" imported="no">tvm/hint/internal/Substitutions.h</includes>
    <includes id="a00203" name="Assignment.h" local="no" imported="no">tvm/scheme/internal/Assignment.h</includes>
    <includes id="a00239" name="Option.h" local="no" imported="no">tvm/solver/internal/Option.h</includes>
    <includes id="a00308" name="map.h" local="no" imported="no">tvm/utils/internal/map.h</includes>
    <class kind="class">tvm::solver::abstract::LeastSquareSolver</class>
    <class kind="class">tvm::solver::abstract::LSSolverFactory</class>
    <namespace>tvm</namespace>
    <namespace>tvm::solver</namespace>
    <namespace>tvm::solver::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>LinearConstraint.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/constraint/abstract/</path>
    <filename>a00011</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00008" name="Constraint.h" local="no" imported="no">tvm/constraint/abstract/Constraint.h</includes>
    <class kind="class">tvm::constraint::abstract::LinearConstraint</class>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
    <namespace>tvm::constraint::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>LinearFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/function/abstract/</path>
    <filename>a00044</filename>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::function::abstract::LinearFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::function</namespace>
    <namespace>tvm::function::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>LinearizedControlProblem.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00131</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00026" name="ControlProblem.h" local="no" imported="no">tvm/ControlProblem.h</includes>
    <includes id="a00104" name="Substitution.h" local="no" imported="no">tvm/hint/Substitution.h</includes>
    <includes id="a00098" name="Substitutions.h" local="no" imported="no">tvm/hint/internal/Substitutions.h</includes>
    <class kind="class">tvm::LinearConstraintWithRequirements</class>
    <class kind="class">tvm::LinearizedControlProblem</class>
    <namespace>tvm</namespace>
  </compound>
  <compound kind="file">
    <name>LinearizedTaskConstraint.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/constraint/internal/</path>
    <filename>a00020</filename>
    <includes id="a00254" name="Task.h" local="no" imported="no">tvm/Task.h</includes>
    <includes id="a00011" name="LinearConstraint.h" local="no" imported="no">tvm/constraint/abstract/LinearConstraint.h</includes>
    <includes id="a00314" name="ProtoTask.h" local="no" imported="no">tvm/utils/ProtoTask.h</includes>
    <class kind="class">tvm::constraint::internal::LinearizedTaskConstraint</class>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
    <namespace>tvm::constraint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Listener.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/event/</path>
    <filename>a00032</filename>
    <includes id="a00035" name="Source.h" local="no" imported="no">tvm/event/Source.h</includes>
    <class kind="class">tvm::event::Listener</class>
    <namespace>tvm</namespace>
    <namespace>tvm::event</namespace>
  </compound>
  <compound kind="file">
    <name>Log.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/internal/</path>
    <filename>a00077</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <class kind="class">tvm::graph::internal::Log</class>
    <class kind="struct">tvm::graph::internal::Log::EnumValue</class>
    <class kind="struct">tvm::graph::internal::Log::Pointer</class>
    <class kind="struct">tvm::graph::internal::Log::Update</class>
    <class kind="struct">tvm::graph::internal::Log::Output</class>
    <class kind="struct">tvm::graph::internal::Log::Input</class>
    <class kind="struct">tvm::graph::internal::Log::InputDependency</class>
    <class kind="struct">tvm::graph::internal::Log::OutputDependency</class>
    <class kind="struct">tvm::graph::internal::Log::InternalDependency</class>
    <class kind="struct">tvm::graph::internal::Log::DirectDependency</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::internal</namespace>
    <member kind="function">
      <type>bool</type>
      <name>lexLess</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aad9e7110f7a2fd2790b9af19849fd846</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aec241ce2358d14a409f0e578430f068f</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lexLess</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a8dec35c5717c5e0acf167b1b03617cd7</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>ae10ef3aa20955e32c33119274e9a4c96</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/internal/</path>
    <filename>a00080</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00077" name="Log.h" local="no" imported="no">tvm/graph/internal/Log.h</includes>
    <class kind="class">tvm::graph::internal::Logger</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::abstract</namespace>
    <namespace>tvm::graph::internal</namespace>
    <member kind="function">
      <type>std::uintptr_t</type>
      <name>getPointerValue</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aa595f4e0beceebe4489e216d83a7c096</anchor>
      <arglist>(void(T::*ptfm)())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LSSOLLeastSquareSolver.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/solver/</path>
    <filename>a00242</filename>
    <includes id="a00233" name="LeastSquareSolver.h" local="no" imported="no">tvm/solver/abstract/LeastSquareSolver.h</includes>
    <class kind="class">tvm::solver::LSSOLLSSolverOptions</class>
    <class kind="class">tvm::solver::LSSOLLeastSquareSolver</class>
    <class kind="class">tvm::solver::LSSOLLSSolverFactory</class>
    <namespace>tvm</namespace>
    <namespace>tvm::solver</namespace>
  </compound>
  <compound kind="file">
    <name>main.dox</name>
    <path>/home/runner/work/tvm/tvm/doc/</path>
    <filename>a00365</filename>
  </compound>
  <compound kind="file">
    <name>map.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/internal/</path>
    <filename>a00308</filename>
    <class kind="class">tvm::utils::internal::IdComparator</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <namespace>tvm::utils::internal</namespace>
    <member kind="typedef">
      <type>std::map&lt; KeyWithId, Value, IdComparator&lt; KeyWithId &gt;, Allocator &gt;</type>
      <name>map</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a1799eeadc084df3295499f98dad21b6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixProperties.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00116</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <class kind="class">tvm::internal::MatrixProperties</class>
    <class kind="struct">tvm::internal::MatrixProperties::Constness</class>
    <class kind="struct">tvm::internal::MatrixProperties::Invertibility</class>
    <namespace>tvm</namespace>
    <namespace>tvm::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ADD_ARGUMENT</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>af0817678bdee62f33c571b160150204e</anchor>
      <arglist>(T, member, b1, b2)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator-</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ada1f1cf36292359f682fd009bd31297e</anchor>
      <arglist>(const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator*</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>aaaa0e0a9c18d8979f5916a706a52b29a</anchor>
      <arglist>(double, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator+</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a7a0788f66237ee3122e00e292d7910ed</anchor>
      <arglist>(const MatrixProperties &amp;, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator-</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ad83c728d684bbef16f41e84f2b450bab</anchor>
      <arglist>(const MatrixProperties &amp;, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator*</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ac655e61c13545f2cbd20e62bc16b9a10</anchor>
      <arglist>(const MatrixProperties &amp;, const MatrixProperties &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixWithProperties.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00119</filename>
    <includes id="a00116" name="MatrixProperties.h" local="no" imported="no">tvm/internal/MatrixProperties.h</includes>
    <class kind="class">tvm::internal::ObjectWithProperties</class>
    <class kind="class">tvm::internal::KeepProperties</class>
    <class kind="class">tvm::internal::ObjectWithProperties</class>
    <namespace>tvm</namespace>
    <namespace>tvm::internal</namespace>
    <member kind="typedef">
      <type>ObjectWithProperties&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixWithProperties</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a1817451238184d41f13b5502c872ec94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectWithProperties&lt; Eigen::VectorXd &gt;</type>
      <name>VectorWithProperties</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ad994ea0e66746f6973730ef9151e2f2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>meta.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00122</filename>
    <class kind="struct">tvm::internal::is_base</class>
    <class kind="class">tvm::internal::always_true</class>
    <class kind="class">tvm::internal::always_false</class>
    <namespace>tvm</namespace>
    <namespace>tvm::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TVM_CREATE_HAS_MEMBER_TYPE_TRAIT_FOR</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a2218e7d2c9681604729c133820561c79</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||(std::is_same_v&lt; T, Base &gt;||derives_from&lt; T, Base &gt;())), int &gt;</type>
      <name>enable_for_t</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a62e4f0cf6093d536532cbd17f1e80f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||derives_from&lt; T, Base &gt;()), int &gt;</type>
      <name>enable_for_templated_t</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a88bfde1b5ce2106ebd5f23b4a5cc2fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>derives_from</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a098c8557722d22a773364eb08dcf816c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Node.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/abstract/</path>
    <filename>a00056</filename>
    <includes id="a00068" name="AbstractNode.h" local="no" imported="no">tvm/graph/internal/AbstractNode.h</includes>
    <class kind="class">tvm::graph::abstract::Node</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>None.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00272</filename>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::None</class>
    <class kind="class">tvm::task_dynamics::None::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
  </compound>
  <compound kind="file">
    <name>ObjWithId.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00125</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00113" name="IdProvider.h" local="no" imported="no">tvm/internal/IdProvider.h</includes>
    <class kind="class">tvm::internal::ObjWithId</class>
    <namespace>tvm</namespace>
    <namespace>tvm::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Option.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/solver/internal/</path>
    <filename>a00239</filename>
    <member kind="define">
      <type>#define</type>
      <name>TVM_ADD_OPTION_GET_SET</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a70519f978d2c3715515fe90b494deecc</anchor>
      <arglist>(optionName, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_ADD_DEFAULT_OPTION</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a4ffff88740d63b9201263c15b56eb9c4</anchor>
      <arglist>(optionName, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_ADD_NON_DEFAULT_OPTION</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a518217413c2a9b0d2a903055860bd958</anchor>
      <arglist>(optionName, defaultValue)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_PROCESS_OPTION_2</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a27d52adabb184fba0791fad905ee41c2</anchor>
      <arglist>(optionName, target, setterName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrientationFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00185</filename>
    <includes id="a00170" name="Frame.h" local="no" imported="no">tvm/robot/Frame.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::OrientationFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>Outputs.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/abstract/</path>
    <filename>a00059</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a02356" name="internal/enums.h" local="no" imported="no">tvm/internal/enums.h</includes>
    <class kind="class">tvm::graph::abstract::Outputs</class>
    <class kind="struct">tvm::graph::abstract::Outputs::Output</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::abstract</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SET_OUTPUTS</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ac1f4fe6f3e3eb0d483f2189be741a7a5</anchor>
      <arglist>(SelfT,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISABLE_OUTPUTS</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>af3c088e8f82f2660e01a45bb8eb92ebf</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLEAR_DISABLED_OUTPUTS</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a4527a4c660f2fbb809b36aeaea2c5a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_output</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a6b3bd5aff8d785eeafb26ab8a893b216</anchor>
      <arglist>(EnumT v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_output</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a1995fcaed2352884e8bbad90c296ba3c</anchor>
      <arglist>(EnumT v, Args ... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutputSelector.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/graph/abstract/</path>
    <filename>a00062</filename>
    <includes id="a00059" name="Outputs.h" local="no" imported="no">tvm/graph/abstract/Outputs.h</includes>
    <class kind="struct">tvm::graph::abstract::SelectorMembers</class>
    <class kind="struct">tvm::graph::abstract::SelectorMembers&lt; false &gt;</class>
    <class kind="class">tvm::graph::abstract::OutputSelector</class>
    <class kind="class">tvm::graph::abstract::OutputSelector</class>
    <namespace>tvm</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::graph::abstract</namespace>
    <member kind="function">
      <type>std::true_type</type>
      <name>is_output_selector_impl</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a46f4088ba048638fb2c5c5885448e5e3</anchor>
      <arglist>(OutputSelector&lt; T, Base &gt; const volatile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>is_output_selector_impl</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a2cdeb4b0245c4c6615bd00957796638f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_output_selector</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a2e8b6c4226d0ec33703ccac682cef0ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PairElementToken.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/internal/</path>
    <filename>a00128</filename>
    <class kind="class">tvm::internal::PairElementTokenHandle</class>
    <class kind="class">tvm::internal::PairElementToken</class>
    <namespace>tvm::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Plane.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/geometry/</path>
    <filename>a00053</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00056" name="Node.h" local="no" imported="no">tvm/graph/abstract/Node.h</includes>
    <class kind="class">tvm::geometry::Plane</class>
    <namespace>tvm</namespace>
    <namespace>tvm::geometry</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Plane &gt;</type>
      <name>PlanePtr</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a200655f1c775385c4e120df8d8a412a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PositionFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00188</filename>
    <includes id="a00170" name="Frame.h" local="no" imported="no">tvm/robot/Frame.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::PositionFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>PostureFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00191</filename>
    <includes id="a00197" name="Robot.h" local="no" imported="no">tvm/Robot.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::robot::PostureFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
  </compound>
  <compound kind="file">
    <name>PriorityLevel.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/requirements/</path>
    <filename>a00143</filename>
    <includes id="a00137" name="SingleSolvingRequirement.h" local="no" imported="no">tvm/requirements/abstract/SingleSolvingRequirement.h</includes>
    <class kind="class">tvm::requirements::PriorityLevelBase</class>
    <namespace>tvm</namespace>
    <namespace>tvm::requirements</namespace>
    <member kind="typedef">
      <type>PriorityLevelBase&lt; true &gt;</type>
      <name>PriorityLevel</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>aa5d3c61ef15897a9eee0c742a80fbee3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProblemComputationData.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00218</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00326" name="VariableVector.h" local="no" imported="no">tvm/VariableVector.h</includes>
    <includes id="a00221" name="ProblemDefinitionEvent.h" local="no" imported="no">tvm/scheme/internal/ProblemDefinitionEvent.h</includes>
    <class kind="class">tvm::scheme::internal::ProblemComputationData</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
  </compound>
  <compound kind="file">
    <name>ProblemDefinitionEvent.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00221</filename>
    <class kind="class">tvm::scheme::internal::ProblemDefinitionEvent</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme::internal</namespace>
  </compound>
  <compound kind="file">
    <name>ProblemWritingExample.dox</name>
    <path>/home/runner/work/tvm/tvm/examples/</path>
    <filename>a00347</filename>
  </compound>
  <compound kind="file">
    <name>Proportional.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00275</filename>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::Proportional</class>
    <class kind="class">tvm::task_dynamics::Proportional::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <member kind="typedef">
      <type>Proportional</type>
      <name>P</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a48db1a4191bee9b4313893cbc71c60d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProportionalDerivative.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00278</filename>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::ProportionalDerivative</class>
    <class kind="class">tvm::task_dynamics::ProportionalDerivative::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <member kind="typedef">
      <type>ProportionalDerivative</type>
      <name>PD</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>abbc550226fefd54eb4205711373370ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProtoTask.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/</path>
    <filename>a00314</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00287" name="AffineExpr.h" local="no" imported="no">tvm/utils/AffineExpr.h</includes>
    <includes id="a00311" name="ProtoTaskDetails.h" local="no" imported="no">tvm/utils/internal/ProtoTaskDetails.h</includes>
    <class kind="class">tvm::utils::ProtoTaskCommon</class>
    <class kind="class">tvm::utils::ProtoTaskCommon</class>
    <class kind="class">tvm::utils::ProtoTaskCommon&lt; constraint::Type::DOUBLE_SIDED, FunT &gt;</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TVM_ID</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae1a920dc965c837bae948075e6fdaa8b</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TVM_LIN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0297f6a53b0e2b16ebdd6b532a6da868</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTaskCommon&lt; T, FunctionPtr &gt;</type>
      <name>ProtoTask</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2dfe19cb30968d93c81382f2b5463f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTaskCommon&lt; T, LinearFunctionPtr &gt;</type>
      <name>LinearProtoTask</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a509f413d9278f8193b7bafd5b026b0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::enable_if&lt; std::is_base_of&lt; tvm::function::abstract::Function, T &gt;::value, typename std::conditional&lt; std::is_base_of&lt; tvm::function::abstract::LinearFunction, T &gt;::value, IfLinearFunction, IfNotLinearFunction &gt;::type &gt;::type</type>
      <name>ProtoChoice</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1c707dc549b7ec739bb11f88a0edcd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::EQUAL &gt;</type>
      <name>ProtoTaskEQ</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a446f70a3cebac171df63b889fbdfec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::EQUAL &gt;</type>
      <name>LinearProtoTaskEQ</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a67d50eddd53504a0b86fa2bfe7c6c36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskEQ, tvm::utils::LinearProtoTaskEQ &gt;</type>
      <name>ProtoTaskEQRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac9e42fbaa6410794e6fadcdd18d49ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::LOWER_THAN &gt;</type>
      <name>ProtoTaskLT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a37297a4563c741c267339e340d5fa5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::LOWER_THAN &gt;</type>
      <name>LinearProtoTaskLT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad9cfc9fd2ff34269264b54eb97d96eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskLT, tvm::utils::LinearProtoTaskLT &gt;</type>
      <name>ProtoTaskLTRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a882353a88468a7018118653d9e592463</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::GREATER_THAN &gt;</type>
      <name>ProtoTaskGT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aafeba3b8e2ee8ea6967317533f102941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::GREATER_THAN &gt;</type>
      <name>LinearProtoTaskGT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ada1513adbbfbaf283d6495fad4728758</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskGT, tvm::utils::LinearProtoTaskGT &gt;</type>
      <name>ProtoTaskGTRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aee433b6f4c4593b7b997ecd5667281e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::DOUBLE_SIDED &gt;</type>
      <name>ProtoTaskDS</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8bb2ad8c3268c4f7459045e8ab119c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::DOUBLE_SIDED &gt;</type>
      <name>LinearProtoTaskDS</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a835bafc1b1123b69bf974a9bb59d8a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskDS, tvm::utils::LinearProtoTaskDS &gt;</type>
      <name>ProtoTaskDSRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a572f8731e1875065a8272c5732cbe217</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskEQRet&lt; F &gt;</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2765d8761839c9be488c1791caf607eb</anchor>
      <arglist>(std::shared_ptr&lt; F &gt; f, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskEQRet&lt; F &gt;</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a259c367dfd1d73c48d26246e935e939b</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, std::shared_ptr&lt; F &gt; f)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskGTRet&lt; F &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa5c8820e5a5b58deee1d030a8146b731</anchor>
      <arglist>(std::shared_ptr&lt; F &gt; f, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskLTRet&lt; F &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5f9be1224ccaacd213bc9c0d823fc286</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, std::shared_ptr&lt; F &gt; f)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskLTRet&lt; F &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa620cb49fe3624c3740e07aa6091e5b2</anchor>
      <arglist>(std::shared_ptr&lt; F &gt; f, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskGTRet&lt; F &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7a61a85c2aa1291fca5d0a6b97c6756c</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, std::shared_ptr&lt; F &gt; f)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskDS</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aac9aa5c36a529fcb987495d18d46ad70</anchor>
      <arglist>(const tvm::utils::ProtoTaskLT &amp;ptl, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskDS</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a78f2ee25d760c5b8016ab0317aa87e5f</anchor>
      <arglist>(const tvm::utils::ProtoTaskGT &amp;ptg, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac88674042337fc313b59907cbb4f69c4</anchor>
      <arglist>(tvm::VariablePtr x, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad98039c9cbd69b8d373fdbf480c7621c</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, tvm::VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5fa6160237ce65fff22d2741da9670cb</anchor>
      <arglist>(tvm::VariablePtr x, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aca6a01f396b2f8e3e22412803176752f</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, tvm::VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae03e45d52a824e285105da2982c2bef2</anchor>
      <arglist>(tvm::VariablePtr x, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a025b5aad5a41210711a569b162e9ed7f</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, tvm::VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa319750f05b3a094983c19c630af7518</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a808ce6901225256043acf700d253c43d</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a03a5442a4e35c47cec1fe0acd6fdd7de</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abdd3b876119912afb160f05de8a9fda9</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa2f479e54a893727c96657b19267f44a</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af5fa8d5efe421711eb56416493425f0c</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abbd2906c5c049e602c0a79186a6f6622</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab892abbf5c2aa39f1d8bf3f2fefb46f4</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a677812064718bae0cd7df570cf055354</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8c6601cae896326a7c99da7dbd896b77</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4d2ec7c149e53f04e67014599c95a237</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a72a9b5a1e7a6cc4d1ccd3e59efcaff62</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskEQRet&lt; F &gt;</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2765d8761839c9be488c1791caf607eb</anchor>
      <arglist>(std::shared_ptr&lt; F &gt; f, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskEQRet&lt; F &gt;</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a259c367dfd1d73c48d26246e935e939b</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, std::shared_ptr&lt; F &gt; f)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskGTRet&lt; F &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa5c8820e5a5b58deee1d030a8146b731</anchor>
      <arglist>(std::shared_ptr&lt; F &gt; f, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskLTRet&lt; F &gt;</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5f9be1224ccaacd213bc9c0d823fc286</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, std::shared_ptr&lt; F &gt; f)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskLTRet&lt; F &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa620cb49fe3624c3740e07aa6091e5b2</anchor>
      <arglist>(std::shared_ptr&lt; F &gt; f, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskGTRet&lt; F &gt;</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7a61a85c2aa1291fca5d0a6b97c6756c</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, std::shared_ptr&lt; F &gt; f)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskDS</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aac9aa5c36a529fcb987495d18d46ad70</anchor>
      <arglist>(const tvm::utils::ProtoTaskLT &amp;ptl, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::ProtoTaskDS</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a78f2ee25d760c5b8016ab0317aa87e5f</anchor>
      <arglist>(const tvm::utils::ProtoTaskGT &amp;ptg, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac88674042337fc313b59907cbb4f69c4</anchor>
      <arglist>(tvm::VariablePtr x, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad98039c9cbd69b8d373fdbf480c7621c</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, tvm::VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5fa6160237ce65fff22d2741da9670cb</anchor>
      <arglist>(tvm::VariablePtr x, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aca6a01f396b2f8e3e22412803176752f</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, tvm::VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae03e45d52a824e285105da2982c2bef2</anchor>
      <arglist>(tvm::VariablePtr x, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a025b5aad5a41210711a569b162e9ed7f</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, tvm::VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa319750f05b3a094983c19c630af7518</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a808ce6901225256043acf700d253c43d</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a03a5442a4e35c47cec1fe0acd6fdd7de</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abdd3b876119912afb160f05de8a9fda9</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa2f479e54a893727c96657b19267f44a</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af5fa8d5efe421711eb56416493425f0c</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abbd2906c5c049e602c0a79186a6f6622</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskEQ</type>
      <name>operator==</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab892abbf5c2aa39f1d8bf3f2fefb46f4</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a677812064718bae0cd7df570cf055354</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&gt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8c6601cae896326a7c99da7dbd896b77</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskLT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4d2ec7c149e53f04e67014599c95a237</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const tvm::utils::internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearProtoTaskGT</type>
      <name>operator&lt;=</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a72a9b5a1e7a6cc4d1ccd3e59efcaff62</anchor>
      <arglist>(const tvm::utils::internal::RHS &amp;rhs, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProtoTaskDetails.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/internal/</path>
    <filename>a00311</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <includes id="a00050" name="IdentityFunction.h" local="no" imported="no">tvm/function/IdentityFunction.h</includes>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <class kind="class">tvm::utils::internal::RHS</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <namespace>tvm::utils::internal</namespace>
    <member kind="enumeration">
      <type></type>
      <name>RHSType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>abc830f391523910ef34e4594c2f98f54</anchor>
      <arglist></arglist>
      <enumvalue file="a00401.html" anchor="abc830f391523910ef34e4594c2f98f54ad7ed4ee1df437474d005188535f74875">Zero</enumvalue>
      <enumvalue file="a00401.html" anchor="abc830f391523910ef34e4594c2f98f54ad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="a00401.html" anchor="abc830f391523910ef34e4594c2f98f54a57dea6f5039281b7fee517fc43bf3110">Vector</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>QLDLeastSquareSolver.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/solver/</path>
    <filename>a00245</filename>
    <includes id="a00233" name="LeastSquareSolver.h" local="no" imported="no">tvm/solver/abstract/LeastSquareSolver.h</includes>
    <class kind="class">tvm::solver::QLDLSSolverOptions</class>
    <class kind="class">tvm::solver::QLDLeastSquareSolver</class>
    <class kind="class">tvm::solver::QLDLSSolverFactory</class>
    <namespace>tvm</namespace>
    <namespace>tvm::solver</namespace>
  </compound>
  <compound kind="file">
    <name>QuadprogLeastSquareSolver.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/solver/</path>
    <filename>a00248</filename>
    <includes id="a00233" name="LeastSquareSolver.h" local="no" imported="no">tvm/solver/abstract/LeastSquareSolver.h</includes>
    <class kind="class">tvm::solver::QuadprogLSSolverOptions</class>
    <class kind="class">tvm::solver::QuadprogLeastSquareSolver</class>
    <class kind="class">tvm::solver::QuadprogLSSolverFactory</class>
    <namespace>tvm</namespace>
    <namespace>tvm::solver</namespace>
  </compound>
  <compound kind="file">
    <name>Range.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00134</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <class kind="class">tvm::Range</class>
    <namespace>tvm</namespace>
  </compound>
  <compound kind="file">
    <name>Reference.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00281</filename>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::Reference</class>
    <class kind="class">tvm::task_dynamics::Reference::Impl</class>
    <class kind="class">tvm::task_dynamics::ReferenceVelocity</class>
    <class kind="class">tvm::task_dynamics::ReferenceAcceleration</class>
    <namespace>tvm::task_dynamics</namespace>
  </compound>
  <compound kind="file">
    <name>ResolutionScheme.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/abstract/</path>
    <filename>a00200</filename>
    <includes id="a00326" name="VariableVector.h" local="no" imported="no">tvm/VariableVector.h</includes>
    <includes id="a00227" name="SchemeAbilities.h" local="no" imported="no">tvm/scheme/internal/SchemeAbilities.h</includes>
    <includes id="a00218" name="ProblemComputationData.h" local="no" imported="no">tvm/scheme/internal/ProblemComputationData.h</includes>
    <includes id="a00224" name="ResolutionSchemeBase.h" local="no" imported="no">tvm/scheme/internal/ResolutionSchemeBase.h</includes>
    <class kind="class">tvm::scheme::abstract::ResolutionScheme</class>
    <class kind="class">tvm::scheme::abstract::LinearResolutionScheme</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>ResolutionSchemeBase.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00224</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00125" name="ObjWithId.h" local="no" imported="no">tvm/internal/ObjWithId.h</includes>
    <includes id="a00227" name="SchemeAbilities.h" local="no" imported="no">tvm/scheme/internal/SchemeAbilities.h</includes>
    <class kind="class">tvm::scheme::internal::ResolutionSchemeBase</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>identifier</name>
      <anchorfile>a00396.html</anchorfile>
      <anchor>a485e7c18a3dae699ac797fc8c381de7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RHSVectors.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/constraint/internal/</path>
    <filename>a00023</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <class kind="class">tvm::constraint::internal::RHSVectors</class>
    <namespace>tvm</namespace>
    <namespace>tvm::constraint</namespace>
    <namespace>tvm::constraint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Robot.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00197</filename>
    <includes id="a00005" name="Clock.h" local="no" imported="no">tvm/Clock.h</includes>
    <includes id="a00323" name="Variable.h" local="no" imported="no">tvm/Variable.h</includes>
    <includes id="a00326" name="VariableVector.h" local="no" imported="no">tvm/VariableVector.h</includes>
    <includes id="a00056" name="Node.h" local="no" imported="no">tvm/graph/abstract/Node.h</includes>
    <class kind="class">tvm::Robot</class>
    <namespace>tvm</namespace>
  </compound>
  <compound kind="file">
    <name>sch.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/</path>
    <filename>a00317</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
    <member kind="function">
      <type>TVM_DLLAPI void</type>
      <name>transform</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3de0bbbdb09bf2e7b1e540b416b0bffd</anchor>
      <arglist>(sch::S_Object &amp;obj, const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI std::unique_ptr&lt; sch::S_Polyhedron &gt;</type>
      <name>Polyhedron</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a50917f119cc052920c809a2c08d6ee82</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI double</type>
      <name>distance</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7eef10a1512d54024ca7243c99709f29</anchor>
      <arglist>(sch::CD_Pair &amp;pair, Eigen::Vector3d &amp;p1, Eigen::Vector3d &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SchemeAbilities.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/internal/</path>
    <filename>a00227</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00149" name="ViolationEvaluation.h" local="no" imported="no">tvm/requirements/ViolationEvaluation.h</includes>
    <class kind="class">tvm::scheme::internal::LevelAbilities</class>
    <class kind="class">tvm::scheme::internal::SchemeAbilities</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::scheme::internal</namespace>
  </compound>
  <compound kind="file">
    <name>SingleSolvingRequirement.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/requirements/abstract/</path>
    <filename>a00137</filename>
    <includes id="a00107" name="CallbackManager.h" local="no" imported="no">tvm/internal/CallbackManager.h</includes>
    <class kind="class">tvm::requirements::abstract::SingleSolvingRequirement</class>
    <namespace>tvm</namespace>
    <namespace>tvm::requirements</namespace>
    <namespace>tvm::requirements::abstract</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TVM_DEFINE_LW_NON_LW_CONVERSION_OPERATORS</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a5988269b909594350680cd55493ff232</anchor>
      <arglist>(className, T, L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SolvingRequirements.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/requirements/</path>
    <filename>a00146</filename>
    <includes id="a00140" name="AnisotropicWeight.h" local="no" imported="no">tvm/requirements/AnisotropicWeight.h</includes>
    <includes id="a00143" name="PriorityLevel.h" local="no" imported="no">tvm/requirements/PriorityLevel.h</includes>
    <includes id="a00149" name="ViolationEvaluation.h" local="no" imported="no">tvm/requirements/ViolationEvaluation.h</includes>
    <includes id="a00152" name="Weight.h" local="no" imported="no">tvm/requirements/Weight.h</includes>
    <class kind="class">tvm::requirements::SolvingRequirementsBase</class>
    <class kind="class">tvm::requirements::SolvingRequirements</class>
    <class kind="class">tvm::requirements::SolvingRequirementsWithCallbacks</class>
    <namespace>tvm</namespace>
    <namespace>tvm::requirements</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ADD_REQUIREMENT</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa1c88b7fbb2d8411417facd48cf44a8f</anchor>
      <arglist>(T, name, member)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Source.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/event/</path>
    <filename>a00035</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a02353" name="event/enums.h" local="no" imported="no">tvm/event/enums.h</includes>
    <class kind="class">tvm::event::Source</class>
    <namespace>tvm</namespace>
    <namespace>tvm::event</namespace>
  </compound>
  <compound kind="file">
    <name>Space.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00251</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <class kind="class">tvm::Space</class>
    <namespace>tvm</namespace>
  </compound>
  <compound kind="file">
    <name>Substitution.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/</path>
    <filename>a00104</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00083" name="SubstitutionCalculator.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculator.h</includes>
    <includes id="a00089" name="AutoCalculator.h" local="no" imported="no">tvm/hint/internal/AutoCalculator.h</includes>
    <class kind="class">tvm::hint::Substitution</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>SubstitutionCalculator.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/abstract/</path>
    <filename>a00083</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00086" name="SubstitutionCalculatorImpl.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculatorImpl.h</includes>
    <class kind="class">tvm::hint::abstract::SubstitutionCalculator</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>SubstitutionCalculatorImpl.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/abstract/</path>
    <filename>a00086</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00326" name="VariableVector.h" local="no" imported="no">tvm/VariableVector.h</includes>
    <includes id="a00134" name="Range.h" local="no" imported="no">tvm/Range.h</includes>
    <class kind="class">tvm::hint::abstract::SubstitutionCalculatorImpl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>Substitutions.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/internal/</path>
    <filename>a00098</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00071" name="DependencyGraph.h" local="no" imported="no">tvm/graph/internal/DependencyGraph.h</includes>
    <includes id="a00104" name="Substitution.h" local="no" imported="no">tvm/hint/Substitution.h</includes>
    <includes id="a00101" name="SubstitutionUnit.h" local="no" imported="no">tvm/hint/internal/SubstitutionUnit.h</includes>
    <class kind="class">tvm::hint::internal::Substitutions</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>SubstitutionUnit.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/hint/internal/</path>
    <filename>a00101</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00134" name="Range.h" local="no" imported="no">tvm/Range.h</includes>
    <includes id="a00014" name="BasicLinearConstraint.h" local="no" imported="no">tvm/constraint/BasicLinearConstraint.h</includes>
    <includes id="a00047" name="BasicLinearFunction.h" local="no" imported="no">tvm/function/BasicLinearFunction.h</includes>
    <includes id="a00104" name="Substitution.h" local="no" imported="no">tvm/hint/Substitution.h</includes>
    <includes id="a00086" name="SubstitutionCalculatorImpl.h" local="no" imported="no">tvm/hint/abstract/SubstitutionCalculatorImpl.h</includes>
    <class kind="class">tvm::hint::internal::SubstitutionUnit</class>
    <namespace>tvm</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::hint::internal</namespace>
  </compound>
  <compound kind="file">
    <name>Task.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00254</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <includes id="a00023" name="RHSVectors.h" local="no" imported="no">tvm/constraint/internal/RHSVectors.h</includes>
    <includes id="a00314" name="ProtoTask.h" local="no" imported="no">tvm/utils/ProtoTask.h</includes>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::Task</class>
    <namespace>tvm</namespace>
  </compound>
  <compound kind="file">
    <name>TaskDynamics.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/abstract/</path>
    <filename>a00257</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00056" name="Node.h" local="no" imported="no">tvm/graph/abstract/Node.h</includes>
    <includes id="a02362" name="task_dynamics/enums.h" local="no" imported="no">tvm/task_dynamics/enums.h</includes>
    <includes id="a00260" name="TaskDynamicsImpl.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamicsImpl.h</includes>
    <class kind="class">tvm::task_dynamics::abstract::TaskDynamics</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <namespace>tvm::task_dynamics::abstract</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TASK_DYNAMICS_DERIVED_FACTORY</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>abb698affbe75e6eb09581fed3cb1ad62</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPOSABLE_TASK_DYNAMICS_DERIVED_FACTORY</name>
      <anchorfile>a00257.html</anchorfile>
      <anchor>a78f5f030eca0b25436ca268039666277</anchor>
      <arglist>(T,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TaskDynamicsExample.dox</name>
    <path>/home/runner/work/tvm/tvm/examples/</path>
    <filename>a00353</filename>
  </compound>
  <compound kind="file">
    <name>TaskDynamicsImpl.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/abstract/</path>
    <filename>a00260</filename>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a02350" name="constraint/enums.h" local="no" imported="no">tvm/constraint/enums.h</includes>
    <includes id="a00056" name="Node.h" local="no" imported="no">tvm/graph/abstract/Node.h</includes>
    <includes id="a02362" name="task_dynamics/enums.h" local="no" imported="no">tvm/task_dynamics/enums.h</includes>
    <class kind="class">tvm::task_dynamics::abstract::TaskDynamicsImpl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <namespace>tvm::task_dynamics::abstract</namespace>
  </compound>
  <compound kind="file">
    <name>UpdatelessFunction.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/utils/</path>
    <filename>a00320</filename>
    <includes id="a00041" name="Function.h" local="no" imported="no">tvm/function/abstract/Function.h</includes>
    <includes id="a00065" name="CallGraph.h" local="no" imported="no">tvm/graph/CallGraph.h</includes>
    <includes id="a00122" name="meta.h" local="no" imported="no">tvm/internal/meta.h</includes>
    <class kind="class">tvm::utils::UpdatelessFunction</class>
    <namespace>tvm</namespace>
    <namespace>tvm::utils</namespace>
  </compound>
  <compound kind="file">
    <name>utils.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/robot/</path>
    <filename>a00194</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00005" name="Clock.h" local="no" imported="no">tvm/Clock.h</includes>
    <includes id="a00197" name="Robot.h" local="no" imported="no">tvm/Robot.h</includes>
    <namespace>tvm</namespace>
    <namespace>tvm::robot</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; Robot &gt; TVM_DLLAPI</type>
      <name>fromURDF</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>aa0c50be7a7db4b673268d061999e284f</anchor>
      <arglist>(tvm::Clock &amp;clock, const std::string &amp;name, const std::string &amp;path, bool fixed, const std::vector&lt; std::string &gt; &amp;filteredLinks, const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Variable.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00323</filename>
    <includes id="a00134" name="Range.h" local="no" imported="no">tvm/Range.h</includes>
    <includes id="a00251" name="Space.h" local="no" imported="no">tvm/Space.h</includes>
    <includes id="a00125" name="ObjWithId.h" local="no" imported="no">tvm/internal/ObjWithId.h</includes>
    <class kind="class">tvm::Variable</class>
    <namespace>tvm</namespace>
    <member kind="function">
      <type>VariablePtr TVM_DLLAPI</type>
      <name>dot</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a87d6cb6ff8019ac998b40578d2a27438</anchor>
      <arglist>(VariablePtr var, int ndiff=1)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::CommaInitializer&lt; Eigen::VectorXd &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>adbe4ff1ed76e4f0428291750abf5e553</anchor>
      <arglist>(tvm::VariablePtr &amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::CommaInitializer&lt; Eigen::VectorXd &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>a01ecc8ad002e4a12c21e0f91f936f517</anchor>
      <arglist>(tvm::VariablePtr &amp;&amp;v, double d)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::CommaInitializer&lt; Eigen::VectorXd &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>a7a357f89393d7e5c776d100a7c9dbbe1</anchor>
      <arglist>(tvm::VariablePtr &amp;v, const Eigen::DenseBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::CommaInitializer&lt; Eigen::VectorXd &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00323.html</anchorfile>
      <anchor>ad211caf9c37299acce708ff4cbd1e847</anchor>
      <arglist>(tvm::VariablePtr &amp;&amp;v, const Eigen::DenseBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VariableVector.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/</path>
    <filename>a00326</filename>
    <includes id="a00002" name="api.h" local="no" imported="no">tvm/api.h</includes>
    <includes id="a00029" name="defs.h" local="no" imported="no">tvm/defs.h</includes>
    <includes id="a00119" name="MatrixWithProperties.h" local="no" imported="no">tvm/internal/MatrixWithProperties.h</includes>
    <class kind="class">tvm::VariableVector</class>
    <namespace>tvm</namespace>
    <member kind="function">
      <type>VariableVector TVM_DLLAPI</type>
      <name>dot</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a42c2dc1b096188c0810cc2c3fbe10e6c</anchor>
      <arglist>(const VariableVector &amp;vars, int ndiff=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityDamper.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/task_dynamics/</path>
    <filename>a00284</filename>
    <includes id="a00257" name="TaskDynamics.h" local="no" imported="no">tvm/task_dynamics/abstract/TaskDynamics.h</includes>
    <class kind="class">tvm::task_dynamics::VelocityDamper</class>
    <class kind="class">tvm::task_dynamics::VelocityDamper::Config</class>
    <class kind="class">tvm::task_dynamics::VelocityDamper::AnisotropicConfig</class>
    <class kind="class">tvm::task_dynamics::VelocityDamper::Impl</class>
    <namespace>tvm</namespace>
    <namespace>tvm::task_dynamics</namespace>
  </compound>
  <compound kind="file">
    <name>ViolationEvaluation.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/requirements/</path>
    <filename>a00149</filename>
    <includes id="a00137" name="SingleSolvingRequirement.h" local="no" imported="no">tvm/requirements/abstract/SingleSolvingRequirement.h</includes>
    <class kind="class">tvm::requirements::ViolationEvaluationBase</class>
    <namespace>tvm</namespace>
    <namespace>tvm::requirements</namespace>
    <member kind="typedef">
      <type>ViolationEvaluationBase&lt; true &gt;</type>
      <name>ViolationEvaluation</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a34fbea9cdc1068d953d49a7a2642b60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ViolationEvaluationType</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>aa4adc5cf6ecbfb56b852b529f1e29198</anchor>
      <arglist></arglist>
      <enumvalue file="a00377.html" anchor="aa4adc5cf6ecbfb56b852b529f1e29198a9ec4c0afd450ceac7adb81c3bcfc9732">L1</enumvalue>
      <enumvalue file="a00377.html" anchor="aa4adc5cf6ecbfb56b852b529f1e29198a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</enumvalue>
      <enumvalue file="a00377.html" anchor="aa4adc5cf6ecbfb56b852b529f1e29198a38b6015d873e96433844072ccea5c553">LINF</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>Weight.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/requirements/</path>
    <filename>a00152</filename>
    <includes id="a00137" name="SingleSolvingRequirement.h" local="no" imported="no">tvm/requirements/abstract/SingleSolvingRequirement.h</includes>
    <class kind="class">tvm::requirements::WeightBase</class>
    <namespace>tvm</namespace>
    <namespace>tvm::requirements</namespace>
    <member kind="typedef">
      <type>WeightBase&lt; true &gt;</type>
      <name>Weight</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>ad596b52ac03ded388e26964e3e995866</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WeightedLeastSquares.h</name>
    <path>/home/runner/work/tvm/tvm/include/tvm/scheme/</path>
    <filename>a00230</filename>
    <includes id="a00122" name="meta.h" local="no" imported="no">tvm/internal/meta.h</includes>
    <includes id="a00200" name="ResolutionScheme.h" local="no" imported="no">tvm/scheme/abstract/ResolutionScheme.h</includes>
    <includes id="a00203" name="Assignment.h" local="no" imported="no">tvm/scheme/internal/Assignment.h</includes>
    <includes id="a00218" name="ProblemComputationData.h" local="no" imported="no">tvm/scheme/internal/ProblemComputationData.h</includes>
    <includes id="a00233" name="LeastSquareSolver.h" local="no" imported="no">tvm/solver/abstract/LeastSquareSolver.h</includes>
    <class kind="class">tvm::scheme::WeightedLeastSquaresOptions</class>
    <class kind="class">tvm::scheme::WeightedLeastSquares</class>
    <namespace>tvm</namespace>
    <namespace>tvm::scheme</namespace>
  </compound>
  <compound kind="class">
    <name>tvm::graph::internal::AbstractNode</name>
    <filename>a01087.html</filename>
    <base>tvm::graph::internal::Inputs</base>
    <base>tvm::graph::abstract::Outputs</base>
    <class kind="struct">tvm::graph::internal::AbstractNode::Update</class>
    <member kind="enumeration">
      <type></type>
      <name>Update_</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a790faeb964ed1317fc122684e9894efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractNode</type>
      <name>UpdateParent</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a9ec81271334fed0d3e4f084eb25978bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AbstractNode</type>
      <name>UpdateBase</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ac7bda88cc7186ef0bd06b1a98526808a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpdateEnabled</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a6bbb3a8c43895a4f8d270100aedcb82c</anchor>
      <arglist>(EnumT e) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpdateStaticallyEnabled</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ab5c43e0a081f5622ded1ff5693f4ab6d</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUpdateCustomEnabled</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a211ec74b66961ad450511ccf07a8082c</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractNode</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a30cd15a0a35da061802335616544e195</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>aa33b9554a9a9f835cda51e12ddc101bc</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr const char *</type>
      <name>UpdateName</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>afd08cb36177f92f4a3fb16402e93b39f</anchor>
      <arglist>(Update_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>UpdateStaticallyEnabled</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a635fb252e53f6d8cd758f1b5b8510592</anchor>
      <arglist>(EnumT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>UpdateSize</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a9ba18bfdd20b769be09129d996847830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>UpdateBaseName</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a64eefa91bdf144b3781ec662f6321847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Outputs *, std::set&lt; int &gt; &gt;</type>
      <name>input_dependency_t</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a11b35a84d53fa223e34497bbad7d4eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::function&lt; void(AbstractNode &amp;)&gt; &gt;</type>
      <name>updates_</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a03be13d3a865915ec7412f02c557913a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::vector&lt; int &gt; &gt;</type>
      <name>outputDependencies_</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a8a47ad0e14298cd09d74f81987b70394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::vector&lt; int &gt; &gt;</type>
      <name>internalDependencies_</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ae862f5c5b2e0ce6a49c1c65ddf0ae057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, input_dependency_t &gt;</type>
      <name>inputDependencies_</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>af9ba8826223fd52b49fea487fcd61cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; int, std::pair&lt; Outputs *, int &gt; &gt;</type>
      <name>directDependencies_</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>acc492564f93a7d94c99ac42cf26e5afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>tvm::graph::abstract::Node</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>abf498e455f48dd03f1957c12fcc5aa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>tvm::graph::CallGraph</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ad30a0da6c3cc968e6b25d709ddab5e76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::AffineExpr</name>
    <filename>a01767.html</filename>
    <templarg>CstDerived</templarg>
    <templarg>Derived</templarg>
    <member kind="function">
      <type></type>
      <name>AffineExpr</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ad304f33ae6978599a7dc604986c84b08</anchor>
      <arglist>(const LinearExpr&lt; Derived &gt; &amp;... linear)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineExpr</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a100f729ca296ded77ceaa2e93740a3c0</anchor>
      <arglist>(const Eigen::MatrixBase&lt; CstDerived &gt; &amp;constant, const LinearExpr&lt; Derived &gt; &amp;... linear)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineExpr</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a8f13ce4a543aa7e79404acb7d3d2dd83</anchor>
      <arglist>(const internal::NoConstant &amp;constant, const std::tuple&lt; LinearExpr&lt; Derived &gt;... &gt; &amp;linear)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AffineExpr</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a0bd9ac10136b4ae56e141162b9a77e8e</anchor>
      <arglist>(const Eigen::MatrixBase&lt; CstDerived &gt; &amp;constant, const std::tuple&lt; LinearExpr&lt; Derived &gt;... &gt; &amp;linear)</arglist>
    </member>
    <member kind="function">
      <type>const std::tuple&lt; LinearExpr&lt; Derived &gt;... &gt; &amp;</type>
      <name>linear</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a0f49ee3f2d97db4abd456de88831bd0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CstDerived &amp;</type>
      <name>constant</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a5095307086839de4af4f11a12bf65c59</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::always_false</name>
    <filename>a01243.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>tvm::internal::always_true</name>
    <filename>a01239.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::VelocityDamper::AnisotropicConfig</name>
    <filename>a01755.html</filename>
    <member kind="function">
      <type></type>
      <name>AnisotropicConfig</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>afc7ecaa852a20424f3c041d1a4b1c242</anchor>
      <arglist>(const VectorConstRef &amp;di, const VectorConstRef &amp;ds, const VectorConstRef &amp;xsi, const std::optional&lt; VectorConstRef &gt; &amp;xsiOff=std::nullopt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnisotropicConfig</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a5567236c24c9cd91c68a7bd5f493b8cc</anchor>
      <arglist>(const Config &amp;config)</arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>di_</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a6c0b8e74ea1724f4e1c295462d4bcf44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>ds_</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a7550ce203f5bcfacad6843bf9c2781b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>xsi_</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a41f03ac5682ff5e07c28f81c98404012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>xsiOff_</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>ae94f23415291566e03f10004d4b89162</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::AnisotropicWeightBase</name>
    <filename>a01275.html</filename>
    <templarg>Lightweight</templarg>
    <base>SingleSolvingRequirement&lt; Eigen::VectorXd, Lightweight &gt;</base>
    <member kind="function">
      <type></type>
      <name>AnisotropicWeightBase</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a08c2f1697b1812090cbe4727006192f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnisotropicWeightBase</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>ab224584c8934c79aaa2c04926b56df65</anchor>
      <arglist>(const Eigen::VectorXd &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ArgCount</name>
    <filename>a01435.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>count</name>
      <anchorfile>a01435.html</anchorfile>
      <anchor>a2c5fdcfe9e5e18daa941ae36ee95a9e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ArgCount&lt; T &gt;</name>
    <filename>a01439.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>count</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a5f79266e505cd53e8080b553d3b3f1e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignBase</name>
    <filename>a01479.html</filename>
    <templarg>A</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignBase&lt; ADD &gt;</name>
    <filename>a01487.html</filename>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a999c945f44a40f226778705778dfb980</anchor>
      <arglist>(U &amp;out, const T &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>afbcd287e1413fd32d6173490538e65e9</anchor>
      <arglist>(U &amp;out, double in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignBase&lt; COPY &gt;</name>
    <filename>a01483.html</filename>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a4ed3580b43ef0ec6ace0e9ede73091bb</anchor>
      <arglist>(U &amp;out, const T &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a9550ba04ce9103ba2096124fab3a2fcc</anchor>
      <arglist>(U &amp;out, double in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignBase&lt; MAX &gt;</name>
    <filename>a01499.html</filename>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01499.html</anchorfile>
      <anchor>a5ae6d008b96068e87a984930062e90a5</anchor>
      <arglist>(U &amp;out, const T &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01499.html</anchorfile>
      <anchor>aba22d88483e4918b81bb7d9439076880</anchor>
      <arglist>(U &amp;out, double in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignBase&lt; MIN &gt;</name>
    <filename>a01495.html</filename>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01495.html</anchorfile>
      <anchor>a8d85004ee6bd912012ef6b8dc69cb753</anchor>
      <arglist>(U &amp;out, const T &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01495.html</anchorfile>
      <anchor>a438fc1dc09006898ca36f9238edcd813</anchor>
      <arglist>(U &amp;out, double in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignBase&lt; SUB &gt;</name>
    <filename>a01491.html</filename>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01491.html</anchorfile>
      <anchor>a4d7c250139eb8a2b9717e4f55a1f2e33</anchor>
      <arglist>(U &amp;out, const T &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01491.html</anchorfile>
      <anchor>aeddbfd6ffd5eb5a6640ff5cf3fd618cd</anchor>
      <arglist>(U &amp;out, double in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::Assignment</name>
    <filename>a01387.html</filename>
    <member kind="typedef">
      <type>const Eigen::VectorXd &amp;(constraint::abstract::LinearConstraint::*)() const</type>
      <name>RHSFunction</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>ace5177448994cc763ef1ea3b1636c849</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixRef(AssignmentTarget::*)(int, int) const</type>
      <name>MatrixFunction</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>ae76b96d0f9503dd2e520f7afec006109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorRef(AssignmentTarget::*)() const</type>
      <name>VectorFunction</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>adf9a844678d0c3ccb098f05cda0aea00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a9bc33c58a16ce1baa0bb01b553fbf8eb</anchor>
      <arglist>(LinearConstraintPtr source, SolvingRequirementsPtr req, const AssignmentTarget &amp;target, const VariableVector &amp;variables, const hint::internal::Substitutions *const subs=nullptr, double scalarizationWeight=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>ac5c8774c5264b34e7e5958199ee8216a</anchor>
      <arglist>(LinearConstraintPtr source, const AssignmentTarget &amp;target, const VariablePtr &amp;variables, bool first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>aef6859a8f5f7a743485a523ec77a91e3</anchor>
      <arglist>(const Assignment &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assignment</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a850a468d8ba9fc91ed242ed33cfb7f2c</anchor>
      <arglist>(Assignment &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Assignment &amp;</type>
      <name>operator=</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a1397699b1e9750f8473bf81b0b49139f</anchor>
      <arglist>(const Assignment &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Assignment &amp;</type>
      <name>operator=</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a1c5b050b149fe75ea543edf3f68c2017</anchor>
      <arglist>(Assignment &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>target</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a2e007e4b2c8d0e4177356ee793ae4699</anchor>
      <arglist>(IWontForgetToCallUpdates={})</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeScalarWeightIsAllowed</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a7b99789ff44e0d8b93d2aff23c0b5861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeVectorWeightIsAllowed</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>aa1acb35e167de1b88d7b98537e569d0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onUpdatedSource</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>aff6a486f12b45e13387102d51b8d2e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onUpdatedTarget</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a0fcb55f364d96ac5cad423415275cb9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onUpdatedMapping</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a8b6da2c042874cb8fbdee25c45981be7</anchor>
      <arglist>(const VariableVector &amp;newVar, bool updateMatrixtarget=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onUpdateWeights</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a086cf3b669da0cf7e6e4a445c9b7a001</anchor>
      <arglist>(bool scalar=true, bool vector=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a674471286a013a2ae2bb468fec42fd7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Assignment</type>
      <name>reprocess</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a78db2952d55eb3f8853dd9c23a419a7b</anchor>
      <arglist>(const Assignment &amp;, const VariableVector &amp;, const hint::internal::Substitutions *const)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static double</type>
      <name>big_</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a89dcc51db8037b735fa99312e1cf8880</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::AssignmentTarget</name>
    <filename>a01411.html</filename>
    <member kind="function">
      <type></type>
      <name>AssignmentTarget</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a774d7d5187bdf7eb718b0573daa2e8f6</anchor>
      <arglist>(RangePtr range, MatrixRef A, constraint::Type ct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssignmentTarget</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>abb2853bc13688b6d793340735cccd5c1</anchor>
      <arglist>(RangePtr range, MatrixRef A, VectorRef b, constraint::Type ct, constraint::RHS cr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssignmentTarget</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>ace24472f164898741ed59e4ccc196a4e</anchor>
      <arglist>(RangePtr range, MatrixRef A, VectorRef l, VectorRef u, constraint::RHS cr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssignmentTarget</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a100d2164541b672fb56188e1badbb5bb</anchor>
      <arglist>(RangePtr range, VectorRef l, VectorRef u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssignmentTarget</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a82029bd6e32c66d7c70034d0df4c51bc</anchor>
      <arglist>(RangePtr range, VectorRef lu, constraint::Type ct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssignmentTarget</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a0113610757c4c904f80578472557ade4</anchor>
      <arglist>(MatrixRef Q, VectorRef q, constraint::RHS cr)</arglist>
    </member>
    <member kind="function">
      <type>TargetType</type>
      <name>targetType</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>ad8f520c6c0187c2350a86f165428fc13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constraint::Type</type>
      <name>constraintType</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a9e520d09dad792dcea3184d0aadc063a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constraint::RHS</type>
      <name>constraintRhs</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a8f8ddc5313bf52a60ea3428cf8bf2ba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a3ad1fba67064934fb6e2c1fd7b708af3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixRef</type>
      <name>A</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>aa4398303f45cb2caa8f4825e58b572b2</anchor>
      <arglist>(int colStart, int colDim) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixRef</type>
      <name>Q</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a1c6cb3975e78e45df6bf73337bce9e37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>l</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>af7128a1d85203b0790887d391103cf7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>u</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a9425bc92b139d58e716f11ad3c55ab92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>b</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>ad349cdcf9a64df5293c47d2eb0a8b262</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>q</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a82f71fb23ee98025d71824d810ce1de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>setA</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>aa9a42a5ee2201f5762f85f3c0af1bae9</anchor>
      <arglist>(MatrixRef A)</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>setQ</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a0fd9bab5f641693e486bdec6c74cff87</anchor>
      <arglist>(MatrixRef Q)</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>setl</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a406a54d3167d8b0c5eba1100dd903a46</anchor>
      <arglist>(VectorRef l)</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>setu</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a64261b49f2f2b6862bfc5cb0dc9f454e</anchor>
      <arglist>(VectorRef u)</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>setb</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a2c4419e04dccc5181c96e1f56961050e</anchor>
      <arglist>(VectorRef b)</arglist>
    </member>
    <member kind="function">
      <type>AssignmentTarget &amp;</type>
      <name>setq</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a5c6223795bf5f6a71f37a490ea221316</anchor>
      <arglist>(VectorRef q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeData</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a2dfbb5b762703850ecfbb03bc7af6cae</anchor>
      <arglist>(MatrixRef AQ, VectorRef bq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeData</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a20269a482e092fc81bd8e32d0ecd4791</anchor>
      <arglist>(MatrixRef A, VectorRef l, VectorRef u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeData</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a4b7d0315152e5d6289f7c7ec49bb4b96</anchor>
      <arglist>(VectorRef l, VectorRef u)</arglist>
    </member>
    <member kind="function">
      <type>MatrixRef</type>
      <name>AFirstHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>afec542bf932fc6fe6990ac7ca368556d</anchor>
      <arglist>(int colStart, int colDim) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixRef</type>
      <name>ASecondHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a79534e2dcd1996aaa86539e08497f361</anchor>
      <arglist>(int colStart, int colDim) const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>bFirstHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>ae97e0d24e80fb495b187529528b2e90c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>bSecondHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>aa8d7bc9e10c92b4668e77c56b3a38dbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixRef</type>
      <name>AFirstHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>afec542bf932fc6fe6990ac7ca368556d</anchor>
      <arglist>(int colStart, int colDim) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixRef</type>
      <name>ASecondHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a79534e2dcd1996aaa86539e08497f361</anchor>
      <arglist>(int colStart, int colDim) const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>bFirstHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>ae97e0d24e80fb495b187529528b2e90c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>bSecondHalf</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>aa8d7bc9e10c92b4668e77c56b3a38dbb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::AutoCalculator</name>
    <filename>a01167.html</filename>
    <base>tvm::hint::abstract::SubstitutionCalculator</base>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::SubstitutionCalculatorImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a848c0b68f674232ad3754e9bc7f1fe26</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::constraint::BasicLinearConstraint</name>
    <filename>a00963.html</filename>
    <base>tvm::constraint::abstract::LinearConstraint</base>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a9d3597efba3abe0c706fd8eca939cdce</anchor>
      <arglist>(const MatrixConstRef &amp;A, VariablePtr x, Type ct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>add1dcbf34397fb7751e18349c4a71a67</anchor>
      <arglist>(const std::vector&lt; MatrixConstRef &gt; &amp;A, const std::vector&lt; VariablePtr &gt; &amp;x, Type ct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>ad03d4fe958f5e6c67592ffcd0e7dbbd8</anchor>
      <arglist>(const MatrixConstRef &amp;A, VariablePtr x, const VectorConstRef &amp;b, Type ct, RHS cr=RHS::AS_GIVEN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a0321981f6429e35995a2db79e417663d</anchor>
      <arglist>(const std::vector&lt; MatrixConstRef &gt; &amp;A, const std::vector&lt; VariablePtr &gt; &amp;x, const VectorConstRef &amp;b, Type ct, RHS cr=RHS::AS_GIVEN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a01083cafd0d1c8932f1cc54b9a6ddd89</anchor>
      <arglist>(const MatrixConstRef &amp;A, VariablePtr x, const VectorConstRef &amp;l, const VectorConstRef &amp;u, RHS cr=RHS::AS_GIVEN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>ae3a975fb63efabda0bdbfca15135087c</anchor>
      <arglist>(const std::vector&lt; MatrixConstRef &gt; &amp;A, const std::vector&lt; VariablePtr &gt; &amp;x, const VectorConstRef &amp;l, const VectorConstRef &amp;u, RHS cr=RHS::AS_GIVEN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a328df4402ab8802b933a8630dee71db4</anchor>
      <arglist>(int m, VariablePtr x, Type ct, RHS cr=RHS::AS_GIVEN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearConstraint</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a8c3990a1fd790f74a2cfe8b10471de3b</anchor>
      <arglist>(int m, std::vector&lt; VariablePtr &gt; &amp;x, Type ct, RHS cr=RHS::AS_GIVEN)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>A</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a1c4d687cf3ed7b6241f812351039555f</anchor>
      <arglist>(const MatrixConstRef &amp;A, const Variable &amp;x, const tvm::internal::MatrixProperties &amp;p=tvm::internal::MatrixProperties())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>A</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a4c4d96fae911b055be8de76abbf22ed4</anchor>
      <arglist>(const MatrixConstRef &amp;A, const tvm::internal::MatrixProperties &amp;p=tvm::internal::MatrixProperties())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>b</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>afce2cc21f7697f016878d6d650896362</anchor>
      <arglist>(const VectorConstRef &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>l</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>aa55f4910c66047a76bb1ea8663876c2f</anchor>
      <arglist>(const VectorConstRef &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>u</name>
      <anchorfile>a00963.html</anchorfile>
      <anchor>a5c1612c6cf030cb0dec4ae490f16dbef</anchor>
      <arglist>(const VectorConstRef &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::function::BasicLinearFunction</name>
    <filename>a01035.html</filename>
    <base>tvm::function::abstract::LinearFunction</base>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a4bd1dd2f6a61f459f0ae379281d58ed9</anchor>
      <arglist>(const MatrixConstRef &amp;A, VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a4a39cda6024efcec7178ce7af8660638</anchor>
      <arglist>(const std::vector&lt; MatrixConstRef &gt; &amp;A, const std::vector&lt; VariablePtr &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a822a6b0284c26c49f7438bfc91b63e18</anchor>
      <arglist>(const MatrixConstRef &amp;A, VariablePtr x, const VectorConstRef &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a749121a282695b82f6e5b9997db47ec1</anchor>
      <arglist>(const std::vector&lt; MatrixConstRef &gt; &amp;A, const std::vector&lt; VariablePtr &gt; &amp;x, const VectorConstRef &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a14f792b1d0a0b61d41d67579ce3b8457</anchor>
      <arglist>(int m, VariablePtr x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a51bfb5c5a9093e1c963690ed6fd24be9</anchor>
      <arglist>(int m, const std::vector&lt; VariablePtr &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a1201b8c94072ff552f38b4d459183f87</anchor>
      <arglist>(const utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicLinearFunction</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a80dfccbf9fa012e8b6062045f18f9b39</anchor>
      <arglist>(const utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>A</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>ae99c9486b87f2ac0fdaf3692c3e427f6</anchor>
      <arglist>(const MatrixConstRef &amp;A, const Variable &amp;x, const internal::MatrixProperties &amp;p=internal::MatrixProperties())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>A</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a8c7d84d505b3bd575ea2ec406e9bdf76</anchor>
      <arglist>(const MatrixConstRef &amp;A, const internal::MatrixProperties &amp;p=internal::MatrixProperties())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>b</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>aee68f500f8b904fa2d363ab4397b7ee1</anchor>
      <arglist>(const VectorConstRef &amp;b, const internal::MatrixProperties &amp;p=internal::MatrixProperties())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::internal::BufferedMatrix</name>
    <filename>a01795.html</filename>
    <member kind="function">
      <type></type>
      <name>BufferedMatrix</name>
      <anchorfile>a01795.html</anchorfile>
      <anchor>ac06ee8e6913eff18a8f3e9d2c2a3c6b6</anchor>
      <arglist>(Eigen::DenseIndex m, Eigen::DenseIndex n)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; const Eigen::MatrixXd, Eigen::Aligned &gt;</type>
      <name>get</name>
      <anchorfile>a01795.html</anchorfile>
      <anchor>a8c6c66d3c899f41387e25fa62e437d08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Eigen::MatrixXd, Eigen::Aligned &gt;</type>
      <name>get</name>
      <anchorfile>a01795.html</anchorfile>
      <anchor>a78344857c727193490f2fb241153ec46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01795.html</anchorfile>
      <anchor>a8f55fa782901353fb36f4dba7fc1ed60</anchor>
      <arglist>(Eigen::DenseIndex m, Eigen::DenseIndex n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CachedResult</name>
    <filename>a01443.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>Cache</templarg>
    <member kind="function">
      <type>const T &amp;</type>
      <name>cache</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>aeb6348426970a32cb1d8a1f166bfbb5b</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CachedResult&lt; MatrixType, true &gt;</name>
    <filename>a01447.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>cache</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a4c84804d05ad8e6d994e3191e0fc520d</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>cache</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a8ed2e24cd4bd6659cc5a2293be2d0f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>cache</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a976f81c26300f1ccf0ac57a751ef6b98</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CachedResult&lt; MatrixType, use_assign_cache&lt; MatrixType, A, W, M, F &gt;::value||use_product_cache&lt; MatrixType, A, W, M, F &gt;::value &gt;</name>
    <filename>a01443.html</filename>
    <member kind="function">
      <type>const T &amp;</type>
      <name>cache</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>aeb6348426970a32cb1d8a1f166bfbb5b</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::CallGraph::Call</name>
    <filename>a01075.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a439d96926840507581844482a2412904</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>internal::AbstractNode *</type>
      <name>node</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a463fd9e7dad85b1241803ffd6bc18b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a16bacd3a15608ea7b0cec7abbc0e25de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::CallbackManager</name>
    <filename>a01199.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>Callback</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a9bd8e31ab050ef14d91329de6aaf7e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; PairElementToken, Callback &gt;</type>
      <name>TCPair</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a9d1c27c3d32873837c5b8daaff7259e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackManager</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>aad256fc6de38dff2296c5bf6bbf0b081</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CallbackManager</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a7a6545c49fe16d3d2b9ac14d9dafc482</anchor>
      <arglist>(const CallbackManager &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>CallbackManager &amp;</type>
      <name>operator=</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a3fe2711c7b3e02d4a986b681a0933470</anchor>
      <arglist>(const CallbackManager &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CallbackManager</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a12ffc6546fcb1fc2eccb819a4e708e67</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>PairElementTokenHandle</type>
      <name>registerCallback</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a317a0774b058bee87ddbce8d1e62d111</anchor>
      <arglist>(std::function&lt; void()&gt; c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterCallback</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>aa98062bf51da7e3c867f9b0b3274b91c</anchor>
      <arglist>(const PairElementToken &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>abb5b45d38d1cc94f11ccedca0b4b91f0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::CallGraph</name>
    <filename>a01071.html</filename>
    <class kind="struct">tvm::graph::CallGraph::Call</class>
    <class kind="struct">tvm::graph::CallGraph::CompareCall</class>
    <class kind="struct">tvm::graph::CallGraph::Plan</class>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>a0bcce269baa11efdb3caf2f379d1b795</anchor>
      <arglist>(std::shared_ptr&lt; internal::Inputs &gt; inputs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>abc176a720df31fa0b1ac9364fcf12aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>a540654c07725029c708aac6e9b86a0d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>a7902b9bbf6848c6d9d56a4ed6d4bb7d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>addOutput</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>aa84af529fe0552695965fd0a17569d0e</anchor>
      <arglist>(abstract::Outputs *source, int output)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>addCall</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>ad26b2653ec6f157004375b952994d0ac</anchor>
      <arglist>(Call c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; internal::Inputs &gt; &gt;</type>
      <name>inputs_</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>a9bb2c860f9299f1c31bc74ace099174b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Call, int, CompareCall &gt;</type>
      <name>callId_</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>a761a333c8ed34297e6effbc97880404f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Call &gt;</type>
      <name>calls_</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>a7e0ddf2df3886554a1bc9561f0b2731f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::DependencyGraph</type>
      <name>dependencyGraph_</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>ae97e0c544f10bc0b1a446208370ca402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::intptr_t, std::map&lt; int, std::vector&lt; int &gt; &gt; &gt;</type>
      <name>visited_</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>ab28d2cd6a9ce8557d4b585da7d7a6d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Plan</type>
      <name>plan_</name>
      <anchorfile>a01071.html</anchorfile>
      <anchor>ae7073b3b9f975270420b9a8180e8800a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::CheckOptions</name>
    <filename>a01775.html</filename>
    <member kind="function">
      <type></type>
      <name>CheckOptions</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga9532f9c87cd5f5ab6d259b151babe59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckOptions</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga0b5cee38e2ebe9f032340dc902db2d3f</anchor>
      <arglist>(double s, double p, bool v)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>step</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga2bac40ffe8d7bc6158cc07fb6c8024c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prec</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>gabde61e89043748a2665960d90f42a693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>gac9f0d3eb926695e51e82f2e61b71a1ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Clamped</name>
    <filename>a01683.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">tvm::task_dynamics::Clamped::Impl</class>
    <member kind="typedef">
      <type>mpark::variant&lt; double, Eigen::VectorXd &gt;</type>
      <name>Bounds</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a21bf20e2ae9a17c7cd24c51d6ff7ead1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamped</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>ac7f67c11e585b23f97870950cb8d457f</anchor>
      <arglist>(double max, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamped</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a93cc96ce10ad556b41d5b8d8a48d3147</anchor>
      <arglist>(const std::pair&lt; double, double &gt; &amp;minMax, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamped</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a4d3b11d54a29a1a7050e67e0d3a8b46e</anchor>
      <arglist>(const VectorConstRef &amp;max, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clamped</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>afb7d7588dbb6529b3051c926d26077da</anchor>
      <arglist>(const std::pair&lt; VectorConstRef, VectorConstRef &gt; &amp;minMax, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Clamped</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a21d2e10eb13358ced2f2926ce534b6e3</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>af6bfa86084554c96555a11e7a163f611</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::Clock</name>
    <filename>a00951.html</filename>
    <base>tvm::graph::abstract::Outputs</base>
    <member kind="function">
      <type></type>
      <name>Clock</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a194ce7ea14c33cf236559234a3c5ce11</anchor>
      <arglist>(double dt)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>ticks</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>ad19e6eca17c557b70d3d9b2c37e9a9b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dt</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a76a9b9fe23b44288975f389ca2d5b991</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a7068fb0ae67e5d6c9e1b6ffe1f9ce6a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a329c2aec12c5e8a1e4c503595039e12a</anchor>
      <arglist>(const Clock &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Clock &amp;</type>
      <name>operator=</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a59eb68285e021fabd3c739ed0918155d</anchor>
      <arglist>(const Clock &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aaf908fe2aa1a9d8beaf5bc3f78ab06f8</anchor>
      <arglist>(Clock &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Clock &amp;</type>
      <name>operator=</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a05585bd84ffff0c0fb1fb8d60fc4bb90</anchor>
      <arglist>(Clock &amp;&amp;)=default</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ControlProblem</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a456b206388ee0b1f6a64b83a34ee8c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::robot::CollisionFunction::CollisionData</name>
    <filename>a01307.html</filename>
    <class kind="struct">tvm::robot::CollisionFunction::CollisionData::ObjectData</class>
    <member kind="function">
      <type></type>
      <name>CollisionData</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a9268cd7f248c1f8d0c8017b29affb0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionData</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a5c2d9261d2ea76934f006a6ca8b57523</anchor>
      <arglist>(CollisionFunction &amp;fn, ConvexHullPtr ch1, ConvexHullPtr ch2)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ObjectData &gt;</type>
      <name>objects_</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a349abcf4d20a7749499c1373c05ba19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConvexHullPtr</type>
      <name>ch_</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a1e741fcefd17e1d6a79d329253988681</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>sch::CD_Pair</type>
      <name>pair_</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>ac6604996fc085ac9dc1bb2e64b506900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>normVecDist_</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a2e8b91445cf9b2d4216c587184f65e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>prevNormVecDist_</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a8fcaf4938f07d72b549ea5de236b269c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>speedVec_</name>
      <anchorfile>a01307.html</anchorfile>
      <anchor>a1bbf6824eafa6b1c2f9cebb012e3b830</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::CollisionFunction</name>
    <filename>a01303.html</filename>
    <base>tvm::function::abstract::Function</base>
    <class kind="struct">tvm::robot::CollisionFunction::CollisionData</class>
    <member kind="function">
      <type></type>
      <name>CollisionFunction</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a59942498e65dc00b48f2107947ab4892</anchor>
      <arglist>(Clock &amp;clock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCollision</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a5eef39a9b9f860af449ca04482f4d12e</anchor>
      <arglist>(ConvexHullPtr ch1, ConvexHullPtr ch2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a9cce7c94ca754ae3c7e069ad6638989f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>aea1ff6bab1ce54dd3bcda6da5e77ec71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a5972916c2e51bc24ca700d96a8aa525c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a9aeb92ad849447b914b0bbf2fb646116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateTimeDependency</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>addf016ad8ca557ea7ef9ef0196a1a30f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a595e737da00e25d782d5b124a2874229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Clock &amp;</type>
      <name>clock_</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>aa68f5e5d2a71bd79bb734bbb285ae8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>last_tick_</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>ae98c5b26c87f994a5ce6b79e56ed84a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; CollisionData &gt;</type>
      <name>colls_</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>abadb54659dd562863c75557ff3ff5ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>closestPoints_</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a9208a5e74054fd9f724d4262d0fcc600</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>fullJac_</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a3c2cdbff681ff981fb26dee8a320db38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>distJac_</name>
      <anchorfile>a01303.html</anchorfile>
      <anchor>a739d3e96517dfe8f226b37c08a8915f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::CoMFunction</name>
    <filename>a01315.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type></type>
      <name>CoMFunction</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a7f2823d63159420fe84e366007d5cadc</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a72f54ced2b9cb57efa0e8615951f0ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>ad4ae2d911a5e22b90bf12dc25ff0b26e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>com</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>ac726850f73e96d4c98e898a1e791802a</anchor>
      <arglist>(const Eigen::Vector3d &amp;com)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>aec0c79c2310e934b45dca6a0982e755e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>ac59bdc558540836df6982023965b0839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a9b1890c827ac90ea2435fbde1cb4c80a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a3b135042ae23174fac952d2ac4357209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJDot</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>ae4f556e90b2393b96747247fd1951058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>afdb33800b4ecef00c42e45a8204db020</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>com_</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a760c782f32a9817edbc9e14b1ba5fc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::CoMJacobian</type>
      <name>jac_</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a4770b9d39a431d05d78fec513564934d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::CoMInConvexFunction</name>
    <filename>a01319.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type></type>
      <name>CoMInConvexFunction</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>adab6e64ff811acd4da7547f0baeb1b7d</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPlane</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>ac5904fe744bc63ca941b569efb7d2fd3</anchor>
      <arglist>(geometry::PlanePtr plane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>a784c06b69d2934a0b4c2f1f9631b4996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>af9e943afd34e2117217f88dce41df930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>aba3f5d6522c0508a0b3b9a269dff504a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>a88aaa35b17487c72e2dcffc64273198a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>aa2fbef858a6a8ad0cb9ff4d5be8b5d56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>ae28401e221a29ff8345c835a4af9ffd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; geometry::PlanePtr &gt;</type>
      <name>planes_</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>abf73ce102f879abb6cf38e4790406499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rbd::CoMJacobian</type>
      <name>jac_</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>a72fc0004cbb4035747fde65f41c7d33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>comSpeed_</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>a56fce0ccaafe94c081932914bf971a89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::CallGraph::CompareCall</name>
    <filename>a01079.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a01079.html</anchorfile>
      <anchor>a43d07159a902bd69708e47c2e9bb2336</anchor>
      <arglist>(const Call &amp;c1, const Call &amp;c2) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CompiledAssignment</name>
    <filename>a01551.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <templarg>F</templarg>
    <base>CachedResult&lt; MatrixType, use_assign_cache&lt; MatrixType, A, W, M, F &gt;::value||use_product_cache&lt; MatrixType, A, W, M, F &gt;::value &gt;</base>
    <base>tvm::scheme::internal::AssignBase</base>
    <base>tvm::scheme::internal::WeightMultBase</base>
    <base>tvm::scheme::internal::MatrixMultBase</base>
    <base>tvm::scheme::internal::SourceBase</base>
    <member kind="function">
      <type>std::enable_if&lt;!use_product_cache&lt; U, A, W, M, F &gt;::value &gt;::type</type>
      <name>run</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a9c767e2235c05bca118c2b9cf8c13b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; use_product_cache&lt; U, A, W, M, F &gt;::value &amp;&amp;!use_assign_cache&lt; U, A, W, M, F &gt;::value &gt;::type</type>
      <name>run</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a88fee49bd30a0a7010d29e0e6252a91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; use_product_cache&lt; U, A, W, M, F &gt;::value &amp;&amp;use_assign_cache&lt; U, A, W, M, F &gt;::value &gt;::type</type>
      <name>run</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>ad74d110b8f778449e9594b20f28eb9b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>ac656f6fa2fc6c6f72df7ba4aa956e85f</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixType &gt; &amp;to)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>aea3144f72908072b25ad07815140e73d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CompiledAssignment&lt; MatrixType, A, W, M, ZERO &gt;</name>
    <filename>a01555.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const MatrixType &gt;</type>
      <name>SourceType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a41d9fdcdd54d8b9d3cdb8185b14bc70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>ad1f81e891db607fcad08d63f60a0780e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>abce499148f4a942e8c2eddf4371b04ab</anchor>
      <arglist>(const Eigen::Ref&lt; const MatrixType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>abfa57127706c5dd14182d4205a179848</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixType &gt; &amp;to)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aea3144f72908072b25ad07815140e73d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CompiledAssignment&lt; MatrixType, COPY, W, M, ZERO &gt;</name>
    <filename>a01559.html</filename>
    <templarg></templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const MatrixType &gt;</type>
      <name>SourceType</name>
      <anchorfile>a01559.html</anchorfile>
      <anchor>afae28ff68888e81280517ad18ced9b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01559.html</anchorfile>
      <anchor>af3c12628ed37ee3ec4abf80c8d45d0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01559.html</anchorfile>
      <anchor>a6bf8ccffbc79a0ac2cc7d7b2cba7f7fc</anchor>
      <arglist>(const Eigen::Ref&lt; const MatrixType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01559.html</anchorfile>
      <anchor>af6565505ec5bc719771d820685d8672e</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixType &gt; &amp;to)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01559.html</anchorfile>
      <anchor>aea3144f72908072b25ad07815140e73d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CompiledAssignment&lt; MatrixType, MAX, W, M, ZERO &gt;</name>
    <filename>a01567.html</filename>
    <templarg></templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const MatrixType &gt;</type>
      <name>SourceType</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a7ae8467c5d26061844ea3164ae2f91f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a329968ccbfe0c114692a92142e58e726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a856a94f65fb5db2050c35d09384de340</anchor>
      <arglist>(const Eigen::Ref&lt; const MatrixType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a9a9820373e691fa59c17f9cb0b53dd77</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixType &gt; &amp;to)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>aea3144f72908072b25ad07815140e73d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CompiledAssignment&lt; MatrixType, MIN, W, M, ZERO &gt;</name>
    <filename>a01563.html</filename>
    <templarg></templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const MatrixType &gt;</type>
      <name>SourceType</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a9518daddba36379921d52b70c6f2fdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a0abd408f8bda204bc75720c6022316b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>af4ed73db8864d927e193a6e0f903483a</anchor>
      <arglist>(const Eigen::Ref&lt; const MatrixType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a8111c3427c538ae28e0cc4e38abaaf76</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixType &gt; &amp;to)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>aea3144f72908072b25ad07815140e73d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::CompiledAssignmentWrapper</name>
    <filename>a01571.html</filename>
    <templarg>MatrixType</templarg>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af7fa5073b5f129e26cc3aacc54239707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a8f604d7efe5b457babeebe168d7a94ea</anchor>
      <arglist>(const CompiledAssignmentWrapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4f5e9334bcc04d324a167a81f6ca8c6c</anchor>
      <arglist>(CompiledAssignmentWrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a71e928da606b22f42a84a8d1116d5317</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aae4bd120469ecf8b5c17b67aa8785c94</anchor>
      <arglist>(const CompiledAssignmentWrapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a13e4ee67aeb75c0d5a4352588e654be5</anchor>
      <arglist>(CompiledAssignmentWrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a86ba9ae30cea1da84eff42afe4d9438e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a3b5b585b057577101f110b41d71e3f61</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a51e6a0d3d80600eeafa00b44a9afe17a</anchor>
      <arglist>(const Eigen::Ref&lt; const MatrixType &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa20bd8278a0b2b38c9942f6ac89ffa14</anchor>
      <arglist>(const Eigen::Ref&lt; MatrixType &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper&lt; MatrixType &gt;</type>
      <name>make</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a7c1cc0cf3d294b88f8d26508997b7d7d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompiledAssignmentWrapper</type>
      <name>make</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba509cdb750e9d58b01c0449a82705a4</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompiledAssignmentWrapper&lt; Eigen::MatrixXd &gt;</name>
    <filename>a01571.html</filename>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af7fa5073b5f129e26cc3aacc54239707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a8f604d7efe5b457babeebe168d7a94ea</anchor>
      <arglist>(const CompiledAssignmentWrapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4f5e9334bcc04d324a167a81f6ca8c6c</anchor>
      <arglist>(CompiledAssignmentWrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a71e928da606b22f42a84a8d1116d5317</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aae4bd120469ecf8b5c17b67aa8785c94</anchor>
      <arglist>(const CompiledAssignmentWrapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a13e4ee67aeb75c0d5a4352588e654be5</anchor>
      <arglist>(CompiledAssignmentWrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a86ba9ae30cea1da84eff42afe4d9438e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a3b5b585b057577101f110b41d71e3f61</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a51e6a0d3d80600eeafa00b44a9afe17a</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa20bd8278a0b2b38c9942f6ac89ffa14</anchor>
      <arglist>(const Eigen::Ref&lt; Eigen::MatrixXd &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper&lt; Eigen::MatrixXd &gt;</type>
      <name>make</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a7c1cc0cf3d294b88f8d26508997b7d7d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompiledAssignmentWrapper</type>
      <name>make</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba509cdb750e9d58b01c0449a82705a4</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CompiledAssignmentWrapper&lt; Eigen::VectorXd &gt;</name>
    <filename>a01571.html</filename>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af7fa5073b5f129e26cc3aacc54239707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a8f604d7efe5b457babeebe168d7a94ea</anchor>
      <arglist>(const CompiledAssignmentWrapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4f5e9334bcc04d324a167a81f6ca8c6c</anchor>
      <arglist>(CompiledAssignmentWrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompiledAssignmentWrapper</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a71e928da606b22f42a84a8d1116d5317</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aae4bd120469ecf8b5c17b67aa8785c94</anchor>
      <arglist>(const CompiledAssignmentWrapper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a13e4ee67aeb75c0d5a4352588e654be5</anchor>
      <arglist>(CompiledAssignmentWrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a86ba9ae30cea1da84eff42afe4d9438e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a3b5b585b057577101f110b41d71e3f61</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a51e6a0d3d80600eeafa00b44a9afe17a</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa20bd8278a0b2b38c9942f6ac89ffa14</anchor>
      <arglist>(const Eigen::Ref&lt; Eigen::VectorXd &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CompiledAssignmentWrapper&lt; Eigen::VectorXd &gt;</type>
      <name>make</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a7c1cc0cf3d294b88f8d26508997b7d7d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CompiledAssignmentWrapper</type>
      <name>make</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba509cdb750e9d58b01c0449a82705a4</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::VelocityDamper::Config</name>
    <filename>a01751.html</filename>
    <member kind="function">
      <type></type>
      <name>Config</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>af3a63bc3e9f55d47b1a9223d97314c41</anchor>
      <arglist>(double di, double ds, double xsi, double xsiOff=0)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>di_</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>af7fc35cb19ece546f33a61165fa0a509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ds_</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>abac487e36e9878bda39e627882ab5a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xsi_</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a8b729669f846363c1d3ad28111c9a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>xsiOff_</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>ac87e5d78a69700e370e2ef300c84cbc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Constant</name>
    <filename>a01691.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamics</base>
    <class kind="class">tvm::task_dynamics::Constant::Impl</class>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>a53f705baef4755d4548a66690e1c902f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Constant</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>a7da33fd93805eabe8d9f6ff1013943dd</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>ace88a7cc059f3f4b2db1bff45b4d3e4b</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Order</type>
      <name>order_</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>a606c4cf535640483d61fdf5f676710d3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::internal::MatrixProperties::Constness</name>
    <filename>a01215.html</filename>
    <member kind="function">
      <type></type>
      <name>Constness</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>ad7aa4cd208881781fe4b8ac67e3fecad</anchor>
      <arglist>(bool b=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a53264e3567c96c65257fe588f387ecb5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::constraint::abstract::Constraint</name>
    <filename>a00955.html</filename>
    <base>tvm::internal::ObjWithId</base>
    <base>OutputSelector&lt; Constraint, tvm::internal::FirstOrderProvider &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>l</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a151c48af8f32a3f2609a79a1c469edff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>u</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>acab41d41c879f4153faaf1fda1940c3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>e</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>aa8b6163dcf9198ed46f2b2ac3a880860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>ac91b160bf58ef01fa51259eef8b2af9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEquality</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a38f762bb92a31f2e6508474dea5cd9ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RHS</type>
      <name>rhs</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>ad27f2b705f739082c7bb0550c7d44782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>ae91170f5a174f0dae09962d2e40c4a76</anchor>
      <arglist>(Type ct, RHS cr, int m=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCache</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>abf34b9407c03d930db09d00627ee56b9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::VectorXd &amp;</type>
      <name>lRef</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a25fcd7be6b5ab2066bec85ff5f05ff01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::VectorXd &amp;</type>
      <name>uRef</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a14ad5dfbb5fd38da8c4be5b978f7e96c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Eigen::VectorXd &amp;</type>
      <name>eRef</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a42ebefedc37512daf3dc6d8a5d297fd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::RHSVectors</type>
      <name>vectors_</name>
      <anchorfile>a00955.html</anchorfile>
      <anchor>a27389009ccd343a2efcae4368edc894a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::Contact</name>
    <filename>a01323.html</filename>
    <base>Node&lt; Contact &gt;</base>
    <class kind="struct">tvm::robot::Contact::Id</class>
    <class kind="struct">tvm::robot::Contact::View</class>
    <member kind="function">
      <type></type>
      <name>SET_OUTPUTS</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>aabe53967ae7c505a2161590d1d6b408d</anchor>
      <arglist>(Contact, F1Position, F1Jacobian, F1Velocity, F1NormalAcceleration, F2Position, F2Jacobian, F2Velocity, F2NormalAcceleration) Contact(FramePtr f1</arglist>
    </member>
    <member kind="function">
      <type>const Frame &amp;</type>
      <name>f1</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a7afa2912cbe58c31b728091271ac6e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Frame &amp;</type>
      <name>f2</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a0c8baf595da6cdf330b5bfc5c68aa227</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>f1Points</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a0e2a92976633bbadd73bd86ba2d4e02f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_f1_f2</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a834a79f0094fc8d5a054d21d19b0c094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>X_f2_f1</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a429044f55301d8bd92746ab108a1d996</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>f2Points</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>ad95dc671a1bdde57b74b8e8d785425c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const View</type>
      <name>f1View</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a20c370f6b35c2cff0c3a4d598a0d6a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const View</type>
      <name>f2View</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a8846f11c4391ea0374444f1b8a4de2e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a608fe01bc014e09fac09f1c716417257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>FramePtr</type>
      <name>f2</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a90eb1848cf616e48e882dc474ab346a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FramePtr std::vector&lt; sva::PTransformd &gt;</type>
      <name>points</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a9f567cbc5af7b5cc87d618d0458caac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FramePtr std::vector&lt; sva::PTransformd &gt; int</type>
      <name>ambiguityId</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a4ed278bc8918a109ca64c2653f62b98c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::ControlProblem</name>
    <filename>a00979.html</filename>
    <class kind="class">tvm::ControlProblem::Updater</class>
    <member kind="function">
      <type></type>
      <name>ControlProblem</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>aa26e9fb05bc3e5a4aa099a59690dac0c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ControlProblem</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a494bf6e4a7035ac685998578070996a7</anchor>
      <arglist>(const ControlProblem &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ControlProblem &amp;</type>
      <name>operator=</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a105f49549e8d86ca3323546032bff1a5</anchor>
      <arglist>(const ControlProblem &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>ab6210225650f48069ef46d62701ff15b</anchor>
      <arglist>(const Task &amp;task, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a0735dd3af1c4598d10545c614b570511</anchor>
      <arglist>(utils::ProtoTask&lt; T &gt; proto, const task_dynamics::abstract::TaskDynamics &amp;td, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>aebd49cb70575fb5b46f0c3a473871dac</anchor>
      <arglist>(utils::LinearProtoTask&lt; T &gt; proto, const task_dynamics::abstract::TaskDynamics &amp;td, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a6a238c66cab8b9103dd501b4c3e60244</anchor>
      <arglist>(utils::LinearProtoTask&lt; T &gt; proto, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a8ace9b41936e3bd34e2a939a43871e3f</anchor>
      <arglist>(TaskWithRequirementsPtr tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a5093af14ef4e96ee685094e3fb19b80e</anchor>
      <arglist>(TaskWithRequirements *tr)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TaskWithRequirementsPtr &gt; &amp;</type>
      <name>tasks</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>ac3a606e35f53e2dd15dbf848c0b4195e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a59f2080238e33168e7fda68523dbe70d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a60d19087a0579c9ab14b775c67957aed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a9b8e6ce5aa3451a567c0b0c3707c92ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a204e58c08ba50b7dca7bb8c70369096e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Updater</type>
      <name>updater_</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>afe5807c324c53675cb853e76159fe621</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LinearizedControlProblem</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>a92ba89182ead5aecaab77b0762a34986</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend scheme::internal::ProblemComputationData *</type>
      <name>scheme::internal::getComputationData</name>
      <anchorfile>a00979.html</anchorfile>
      <anchor>ab8ff59c7a8a8ff07f65f3da3a38ca00c</anchor>
      <arglist>(Problem &amp;problem, const Scheme &amp;resolutionScheme)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::ConvexHull</name>
    <filename>a01335.html</filename>
    <base>Node&lt; ConvexHull &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConvexHull</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>a395a277d2130b235c47a68f9d623da39</anchor>
      <arglist>(std::shared_ptr&lt; sch::S_Object &gt; o, FramePtr f, const sva::PTransformd &amp;X_f_o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexHull</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>a3d915999d14bc1417cf4f7d99801c060</anchor>
      <arglist>(const std::string &amp;path, FramePtr f, const sva::PTransformd &amp;X_f_o)</arglist>
    </member>
    <member kind="function">
      <type>sch::CD_Pair</type>
      <name>makePair</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>aa157d2d5d638dd854a74e38d547b9422</anchor>
      <arglist>(const ConvexHull &amp;hull) const</arglist>
    </member>
    <member kind="function">
      <type>const Frame &amp;</type>
      <name>frame</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>ad813622ed979369964a39b21dc91c812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frame &amp;</type>
      <name>frame</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>a9c66082a615790fe315389b7600ce9b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::exception::DataException</name>
    <filename>a00999.html</filename>
    <base>tvm::exception::Exception</base>
  </compound>
  <compound kind="class">
    <name>tvm::solver::DefaultLSSolverFactory</name>
    <filename>a01627.html</filename>
    <base>tvm::solver::abstract::LSSolverFactory</base>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LSSolverFactory &gt;</type>
      <name>clone</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>ab33fd56442afba241f7883b94e5ce85d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultLSSolverFactory</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>ad05494972228006357ddd76340ab77e4</anchor>
      <arglist>(const DefaultLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LeastSquareSolver &gt;</type>
      <name>createSolver</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a1a9473e53a4278e3429b44cae1c5fb13</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::DefaultLSSolverOptions</name>
    <filename>a01623.html</filename>
    <member kind="typedef">
      <type>DefaultLSSolverFactory</type>
      <name>Factory</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>afcb331752f62889cafb9d7dc8a249163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::internal::DependencyGraph</name>
    <filename>a01095.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>addNode</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>aee290367d6bb4a7a65d8c18bf9951504</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEdge</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>ae26dad1f527f3e404eb4677c15f91bd8</anchor>
      <arglist>(size_t from, size_t to)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::vector&lt; std::vector&lt; size_t &gt; &gt;, DependencyGraph &gt;</type>
      <name>reduce</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a6e5193af0ea781b84f6ed83460d46d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt;</type>
      <name>order</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>aa64ef5d79fca6cfc12754cb74765964b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; size_t &gt; &gt;</type>
      <name>groupedOrder</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a22302100a7d8d4c1b0a8182e7da566f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>ae4ab069840fa478652656d43672a2a7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; std::pair&lt; size_t, size_t &gt; &gt; &amp;</type>
      <name>edges</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a8090f67c05f27d9bed44bec887fc7eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>aefd7b54f55ae4857034c339b1bb6707f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::DiagonalCalculator</name>
    <filename>a01171.html</filename>
    <base>tvm::hint::abstract::SubstitutionCalculator</base>
    <class kind="class">tvm::hint::internal::DiagonalCalculator::Impl</class>
    <member kind="function">
      <type></type>
      <name>DiagonalCalculator</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>af3cb0adefccfcf9229e5f118bbf4e4c1</anchor>
      <arglist>(Eigen::DenseIndex first=0, Eigen::DenseIndex size=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalCalculator</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a5f1e3e2fdafc9f5fea3dc9fff0f1785f</anchor>
      <arglist>(const std::vector&lt; Eigen::DenseIndex &gt; &amp;nnzRows, const std::vector&lt; Eigen::DenseIndex &gt; &amp;zeroRows={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::SubstitutionCalculatorImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a7742e917253f1f5587810a06547bd128</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::DirectDependency</name>
    <filename>a01147.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>ab8e26d71b8b05005995eb6003ba324a5</anchor>
      <arglist>(const DirectDependency &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a4b8a785a5b9b61a5137939a653d367f6</anchor>
      <arglist>(const DirectDependency &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>input</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>aeccadc410a6aadbb8eca7071bd3c4f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>output</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>aba7253e68965d78ff53008bd9cc24d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>source</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a8b7ab656ee50c48bdf65c29021914a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a72bf63a4bca497fcceba34e5fb1236c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::exception::DuplicateVariable</name>
    <filename>a01015.html</filename>
    <base>tvm::exception::FunctionException</base>
  </compound>
  <compound kind="class">
    <name>tvm::robot::internal::DynamicFunction</name>
    <filename>a01343.html</filename>
    <base>tvm::function::abstract::LinearFunction</base>
    <class kind="struct">tvm::robot::internal::DynamicFunction::ForceContact</class>
    <member kind="typedef">
      <type>function::abstract::LinearFunction::Output</type>
      <name>Output</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a5afbf4c899efddfac935bee27606e7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicFunction</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a30534f8a2683a7889eb145bf300127a2</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addContact</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a42c3954015bbb65cf83cafb9583ec5a2</anchor>
      <arglist>(ContactPtr contact, bool linearize, double mu, unsigned int nrGen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContact</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a328065658c7e1c834c53cdaaab7456b6</anchor>
      <arglist>(const Contact::Id &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>sva::ForceVecd</type>
      <name>contactForce</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>af07693dc079be0ff6fab02887900c36a</anchor>
      <arglist>(const Contact::Id &amp;id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPositiveLambdaToProblem</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>ac60e3c2535d6d7e25d77d29a292435ec</anchor>
      <arglist>(ControlProblem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateb</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a8c42d44213993fe40ab8bf92f4150fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>aac5baaf3ded35fe5f366fd520c5bfd02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addContact_</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>af3f0b400d53434f185f0a66cf4a34d69</anchor>
      <arglist>(const Contact::View &amp;contact, bool linearize, double mu, unsigned int nrGen, double dir)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; ForceContact &gt;::iterator</type>
      <name>getContact</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a8d99f568d3bd469cc9bb263a5a7413ef</anchor>
      <arglist>(const Contact::Id &amp;id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; ForceContact &gt;::const_iterator</type>
      <name>getContact</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a3a1d6c071205f0086243ad88f7afe43e</anchor>
      <arglist>(const Contact::Id &amp;id) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>ab24a9ed85cd7743e1b516d8f4197b8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ForceContact &gt;</type>
      <name>contacts_</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a4bee1d74b99cdde1d7bffe77e42140a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::EnumValue</name>
    <filename>a01115.html</filename>
    <member kind="function">
      <type></type>
      <name>EnumValue</name>
      <anchorfile>a01115.html</anchorfile>
      <anchor>ab4a7bcf5b373a4032ce7512ab23e73da</anchor>
      <arglist>(E e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01115.html</anchorfile>
      <anchor>a40326cbbefa6f819da83981efafb79bd</anchor>
      <arglist>(const EnumValue &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01115.html</anchorfile>
      <anchor>a2eab6b3e1fb0800da09c303e55bc8544</anchor>
      <arglist>(const EnumValue &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>std::type_index</type>
      <name>type</name>
      <anchorfile>a01115.html</anchorfile>
      <anchor>a1af2f68e05b725ddd437a4fd0b034112</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>value</name>
      <anchorfile>a01115.html</anchorfile>
      <anchor>aa9e204225aa128d0f3be1d05709465d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::exception::Exception</name>
    <filename>a00995.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>afd6f053bccef9dd30a3a2162695b8516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>adbecc954c569883fc6422e57c718a953</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>a5782a0c2f97b0ed569c4605e190d2568</anchor>
      <arglist>(const char *what)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00995.html</anchorfile>
      <anchor>ab4925492b25d5ddd16ce511eb966555d</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::FeedForward</name>
    <filename>a01699.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">tvm::task_dynamics::FeedForward::Impl</class>
    <member kind="typedef">
      <type>std::function&lt; const Eigen::VectorXd &amp;()&gt;</type>
      <name>getFeedForwardT</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a8946ee14177601a7e60a05033bb59825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Impl &amp;)&gt;</type>
      <name>addProviderDependencyT</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>ac8f4704379a17aa27b2bc08313d3f7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FeedForward</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>ae5d30f49f50e6f11fa021d28ae7885d4</anchor>
      <arglist>(std::shared_ptr&lt; FFProvider &gt; provider, const Eigen::VectorXd &amp;(FFProvider::*method)() const, FFSignal signal, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FeedForward</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a16f4bba041002d7a1509cc721d42a704</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>abda16526050397d7ef14bc4a8371a942</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>getFeedForwardT</type>
      <name>feedForward_</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a6fdf46188bbae8c4829713a99318636f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>addProviderDependencyT</type>
      <name>addProviderDependency_</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a366d738cb0a5b82dfa14403686041e49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::FirstOrderProvider</name>
    <filename>a01203.html</filename>
    <base>Node&lt; FirstOrderProvider &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a9037013380af4e4df35867e98b990605</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const MatrixWithProperties &amp;</type>
      <name>jacobian</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a40164edac8fbdfad5d763d9dba7cd0c7</anchor>
      <arglist>(const Variable &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linearIn</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>ae2fff79056fb0ffb39cd1c2dd8a40d40</anchor>
      <arglist>(const Variable &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const Space &amp;</type>
      <name>imageSpace</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>af5eadb4206e9b45ab7cbea26ca3a189f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a1fa00e06c0c1ec2686d5996c8ea75d85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rSize</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a2f897d0aef9869861cf0f861cc2a1b84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tSize</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a66843a84a3b39fa1a99dbc5de2676107</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariableVector &amp;</type>
      <name>variables</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a655953a67eeab73a1bba388716144e9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FirstOrderProvider</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>af9184d29af7563cd7c0a2dc88a55a1cf</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FirstOrderProvider</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a924e364ff31bcd7d315b8cdea26bbd1b</anchor>
      <arglist>(Space image)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>resizeCache</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a0f0411fb45d39bc1dca8f50d83297d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeValueCache</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a2c932494358cf977821643564785eb95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeJacobianCache</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a21c39c1f5bddd2cc1b887c8583dbdbd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVariable</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a716434d1c4ee931e2a7d1162934aad3c</anchor>
      <arglist>(VariablePtr v, bool linear)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeVariable</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>ad93dd11e673afbeeb1341cd0f8ff8185</anchor>
      <arglist>(VariablePtr v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVariable</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a33a39675dbad5d874eb7c951142b936f</anchor>
      <arglist>(const VariableVector &amp;v, bool linear)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addVariable_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>aa6e7c997a0e76aaa5c2cd7842e0aeea0</anchor>
      <arglist>(VariablePtr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeVariable_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>ae5a18d1da20d3e9b84865395ce40905e</anchor>
      <arglist>(VariablePtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>splitJacobian</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a62a1a4e361dcf63bd1aa07f9ef594e3e</anchor>
      <arglist>(const MatrixConstRef &amp;J, const std::vector&lt; VariablePtr &gt; &amp;vars, bool keepProperties=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>splitJacobian</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>aee12b48a2160311b069018e5d5e68cae</anchor>
      <arglist>(const MatrixConstRef &amp;J, const VariableVector &amp;vars, bool keepProperties=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a35119ecabc945e5e1ff564444e521f4d</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>value_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a9c4ade899e4a0e07f716ea6d275d8f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>utils::internal::map&lt; Variable const  *, MatrixWithProperties &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a66a22c6f67c4de05fc344c661ac3c6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Space</type>
      <name>imageSpace_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>ad026691e0b6d793385fc139ab565e88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableVector</type>
      <name>variables_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a229c83683265d3b88b8c4305a5f05544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>utils::internal::map&lt; Variable const  *, bool &gt;</type>
      <name>linear_</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>aedd09cf8a42b924afeebbf534e08a415</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::robot::internal::DynamicFunction::ForceContact</name>
    <filename>a01347.html</filename>
    <member kind="variable">
      <type>Contact::Id</type>
      <name>id_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a77db64fbec056ca9157528f3b862e8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>linearized_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a1865f4b0b6ae3436e6bce8f6ab6fb88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; tvm::VariablePtr &gt;</type>
      <name>forces_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a39238477b5ea9bf465a053c6561299c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; sva::ForceVecd(const ForceContact &amp;)&gt;</type>
      <name>force_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>ab85b683f0bf3351796805db6b76c99ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>force_jac_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a9d449844262792a48d252ffddf23b0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::MatrixXd</type>
      <name>full_jac_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>ab8f4924cc0e95937b45fe631a0cac50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(ForceContact &amp;, DynamicFunction &amp;)&gt;</type>
      <name>updateJacobians_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>ac2420cd09156bbeb576928abed2fc6c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::Frame</name>
    <filename>a01339.html</filename>
    <base>Node&lt; Frame &gt;</base>
    <member kind="function">
      <type></type>
      <name>Frame</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a635eac920668a3109a1e3230938a857d</anchor>
      <arglist>(std::string name, RobotPtr robot, const std::string &amp;body, sva::PTransformd X_b_f)</arglist>
    </member>
    <member kind="function">
      <type>const Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a2ea6528157b5a187b6ede16f07790828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Robot &amp;</type>
      <name>robot</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>aa040bc0a29a67780311c8533d68faea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rbd::Jacobian &amp;</type>
      <name>rbdJacobian</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a3670aba0d9280524c6e18cea389cad15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::Jacobian &amp;</type>
      <name>rbdJacobian</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>ac35b94cce92a068d02945ab7c87fd532</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>accce1b0aeee4a0493a6025e760b74467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>position</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a86fe5c3cfc6e0a3c5d7be8736e51909a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const tvm::internal::MatrixWithProperties &amp;</type>
      <name>jacobian</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>afbeb5eea7c8a679250c6fc0bc56bc04c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>velocity</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>ac358128299eb4b9446241a1a9a383304</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::MotionVecd &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>ab3587255f0ad1fbe3b50761ccb8ca46d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>body</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a7c7b11383a5c05cb593075f1b838c416</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::internal::FrictionCone</name>
    <filename>a01351.html</filename>
    <member kind="function">
      <type></type>
      <name>FrictionCone</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>af1882e449c697757aa815a317eec7984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrictionCone</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>a37c0fd4e280126dee70f8f29d3d19429</anchor>
      <arglist>(const Eigen::Matrix3d &amp;frame, unsigned int nrGen, double mu, double direction=1.0)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Eigen::Vector3d &gt;</type>
      <name>generators</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>a97e208c3bd1106c14e55d18a7f2a2f02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::function::abstract::Function</name>
    <filename>a01027.html</filename>
    <base>tvm::internal::FirstOrderProvider</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>velocity</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>adc483e1f5af549175ee4629361f5fe6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a293c358e245f9a82b254d1d9f22db5f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Eigen::MatrixXd &amp;</type>
      <name>JDot</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a590e4ad861913913a0824df05d5202c8</anchor>
      <arglist>(const Variable &amp;x) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Function</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a22a6013990c0d433610fbd9affeac6d9</anchor>
      <arglist>(int m=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Function</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a759af5751424860ea38ee7c425b2d1e8</anchor>
      <arglist>(Space image)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeCache</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a6731cf72240474247174fdde116a2506</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeVelocityCache</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a777d67d775aa4e0b6232796e19da5dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeNormalAccelerationCache</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>abc7180784baa30af537f4153c7cb1b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resizeJDotCache</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a17068f4b443734c45693737985e6a24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVariable_</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a984382a49725fad906ec99ffccb8837f</anchor>
      <arglist>(VariablePtr v) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeVariable_</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a4706bc4563ac19c1f79b5eb5b1b202fe</anchor>
      <arglist>(VariablePtr v) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>velocity_</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>acb13855ae41acba66ddd2594e1c8d5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>normalAcceleration_</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a15a10205ed422955d4c30c2146a218df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>utils::internal::map&lt; Variable const *, Eigen::MatrixXd &gt;</type>
      <name>JDot_</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a443072809d5cdae5a872446a4aef2ff3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::exception::FunctionException</name>
    <filename>a01007.html</filename>
    <base>tvm::exception::Exception</base>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::GenericCalculator</name>
    <filename>a01179.html</filename>
    <base>tvm::hint::abstract::SubstitutionCalculator</base>
    <class kind="class">tvm::hint::internal::GenericCalculator::Impl</class>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::SubstitutionCalculatorImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>a9772cf76c1a0d6b8a3868e32b2cde8fc</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::internal::GeometricContactFunction</name>
    <filename>a01355.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="typedef">
      <type>function::abstract::Function::Output</type>
      <name>Output</name>
      <anchorfile>a01355.html</anchorfile>
      <anchor>a42681a94eb70a3c91c211123032420b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometricContactFunction</name>
      <anchorfile>a01355.html</anchorfile>
      <anchor>a0cd69af21490f2ae11cfe7690a79f673</anchor>
      <arglist>(ContactPtr contact, Eigen::Matrix6d dof)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::hasNoArgCtor</name>
    <filename>a01431.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>tvm::robot::Contact::Id</name>
    <filename>a01327.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a4f5e1f170ed218b883cef8eba7d7f14e</anchor>
      <arglist>(const Id &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a04b9c312fe5aa25f38a9d8ae7917be2a</anchor>
      <arglist>(const Id &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r1</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ad2b840503887fcc26793c8a1b1cd3925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>f1</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ab933388e108f1d855a97774e42b404ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>r2</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a1ba742b7c8bdcfe969d4e40177d90a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>f2</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a64b768bf4d7e2cad1b666889a947507c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ambiguityId</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a3d71573ccb1cbbf8b6d8d92a5c023cd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::internal::IdComparator</name>
    <filename>a01799.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename std::decay&lt; typename std::remove_pointer&lt; ObjWithId &gt;::type &gt;::type</type>
      <name>T</name>
      <anchorfile>a01799.html</anchorfile>
      <anchor>a8cf142c5f7c1d81ea018a872207f9da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a01799.html</anchorfile>
      <anchor>a5f68542d7e80429ecbe0603eb2ee0ad4</anchor>
      <arglist>(const T *const lhs, const T *const rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a01799.html</anchorfile>
      <anchor>ac006452a3d1ffce5f455ce266c05ed4f</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::function::IdentityFunction</name>
    <filename>a01039.html</filename>
    <base>tvm::function::BasicLinearFunction</base>
    <member kind="function">
      <type></type>
      <name>IdentityFunction</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a75cb1034c6a5be2f40070af538a1de82</anchor>
      <arglist>(VariablePtr x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue_</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a3e2290f564d191675385a14450c9b9c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity_</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a389e8ff8d80dcb921bbcfd53592422f2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::IdProvider</name>
    <filename>a01207.html</filename>
    <member kind="function">
      <type>int</type>
      <name>makeId</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>afef7eeb3484bc88502adc1f55702469a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Clamped::Impl</name>
    <filename>a01687.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>acdd69bf914b9c06060d90a5bf1495696</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, const Bounds &amp;min, const Bounds &amp;max, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>ad058380bb126854206d9abbf06e3d3a3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a239fe1e7a808267521ece371db52eb17</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>min</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a279d5efaba7b100b4f13192f656b0e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>min</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>ac2ca601afac3bc73047231fd9fc20cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>max</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a8708682a999b633a08f2b921758430b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>max</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>afc0b959f36bd440f8245ec46ef3f7dee</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Constant::Impl</name>
    <filename>a01695.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamicsImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>a9ccd363be61f5a360ce516d712de25eb</anchor>
      <arglist>(FunctionPtr, constraint::Type t, const Eigen::VectorXd &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>af5af1a0f843219b6bcbb06ab201d7a91</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>a807f47dc39bedaeadc87f23b0080b769</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::FeedForward::Impl</name>
    <filename>a01703.html</filename>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a65754116d7bf261c3f6c8674dd702d8e</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, const getFeedForwardT &amp;ff, const addProviderDependencyT &amp;addPD, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a7dc9b8de20b1d753942d958b9c25c289</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a6e9f88470f2a3efa8b056edb43b6a896</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FeedForward</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a5d2b3f15df52a06a4fe9f2bdbacb3502</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::None::Impl</name>
    <filename>a01711.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamicsImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a903671e84fe25a01b02a450efda1fd7d</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a61a2b600ab7ec3bcded0d8bc3819afb4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a54b20321af8f8152c64ef3ef642901f4</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Proportional::Impl</name>
    <filename>a01719.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamicsImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a37083387087ec5a18b3f8f1527859844</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, const Gain &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a1410721d388362d978fe70fdba8a76fd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a0165a02a2b956c68d7f29fff0fa10aae</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a3495561a9cd96e248e8fef2e8dfabee5</anchor>
      <arglist>(double kp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a68f7e5aefc6a3e8942dbba91372e11ff</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>aa1c3369c3e0ccee64441a619b677a05e</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type>const Gain &amp;</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>aff4f9fce9ef314dcc0a7020e3260cad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a88069e528470ab2198a68ad87b8c5bc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Gain &amp;</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>aedafb9b86877f901de9b5258c83ca115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>gain</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a3661929073f3f3d686b3d03144ac02a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::ProportionalDerivative::Impl</name>
    <filename>a01727.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamicsImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a2c75030a3df46f1a8e0213e72d8661b8</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, const Gain &amp;kp, const Gain &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>ad7efd03386423c9215fc20970fa5016a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>ac38f2c9888febaf27922bb62ebeeb94f</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const Gain &amp;, const Gain &amp; &gt;</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a443b57d5a83a15cea5313ab383d0b160</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>abd6422b4842504d2f9cb1412af65233c</anchor>
      <arglist>(double kp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a3d87b04060ba8dd5490027b13155395f</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a0cb20bcdce3093682228deb3990a3a66</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type>const Gain &amp;</type>
      <name>kp</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a18b14ff05d3fa0acd50f25d34dfb534a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>kp</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a4450839955cd384f981947deb4e288eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Gain &amp;</type>
      <name>kp</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a32fc6aa824e24892c9e726d423478868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>kp</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a0cfdc0589de259e38a19b91690713d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Gain &amp;</type>
      <name>kv</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>aad0d8aba5a81b2616b73f97afc78f1ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>kv</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a53ddadb1ba92654e368857bdd01c4529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Gain &amp;</type>
      <name>kv</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>ab007e02bcb1789dea3f158a8a4d2bc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>kv</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a23c3aac3e327d343e7046c92e59ab257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>ac98fc52e81c71ebdae8b92c28a474cbe</anchor>
      <arglist>(double kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a7932416dbbaf9db6855e1b8f98f5015a</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a7ddc3d1dad52778ed85c3b13963a0aa9</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a594f571040c528834d2e95fba8750d8c</anchor>
      <arglist>(double kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a1d0fb9ebf860fff4b92277ab7dd98101</anchor>
      <arglist>(double kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>aeb24a8f6386c7787a411715bdd79e529</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a71a84bee9c0ea0d90ea4cc083ccba972</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a9e9319941e8e74bd8e312c1326f72576</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a4ec72e7cb10e2b4060bd3353a4f01cab</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>ac98fc52e81c71ebdae8b92c28a474cbe</anchor>
      <arglist>(double kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a7932416dbbaf9db6855e1b8f98f5015a</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a7ddc3d1dad52778ed85c3b13963a0aa9</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a594f571040c528834d2e95fba8750d8c</anchor>
      <arglist>(double kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a1d0fb9ebf860fff4b92277ab7dd98101</anchor>
      <arglist>(double kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>aeb24a8f6386c7787a411715bdd79e529</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a71a84bee9c0ea0d90ea4cc083ccba972</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a9e9319941e8e74bd8e312c1326f72576</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gains</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a4ec72e7cb10e2b4060bd3353a4f01cab</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Reference::Impl</name>
    <filename>a01735.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamicsImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01735.html</anchorfile>
      <anchor>ad7c64cd9cc353327a18a2b7f134c4975</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, Order order, FunctionPtr ref)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01735.html</anchorfile>
      <anchor>aa1b2dd68d2bd4ea022d3133a52a4a87b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01735.html</anchorfile>
      <anchor>aacd985ba942fbde1397a969bdb63f339</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>FunctionPtr</type>
      <name>ref</name>
      <anchorfile>a01735.html</anchorfile>
      <anchor>af16a3771bfacda732f04266476ef79e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ref</name>
      <anchorfile>a01735.html</anchorfile>
      <anchor>aaf479f67b60a8ea0883d4395008741f3</anchor>
      <arglist>(const FunctionPtr &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::VelocityDamper::Impl</name>
    <filename>a01759.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamicsImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>af02938e9bfcf89cc90bb166d786138d8</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, bool autoXsi, const Eigen::VectorXd &amp;di, const Eigen::VectorXd &amp;ds, const Eigen::VectorXd &amp;xsi, double big)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>a57374af379369e0ff5f562fa5e935217</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, double dt, bool autoXsi, const Eigen::VectorXd &amp;di, const Eigen::VectorXd &amp;ds, const Eigen::VectorXd &amp;xsi, double big)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>ae272496d38514a15ce562192ef0c8908</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Impl</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>a4429b22709a482bbe0a066730dd40cfa</anchor>
      <arglist>() override=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::DiagonalCalculator::Impl</name>
    <filename>a01175.html</filename>
    <base>tvm::hint::abstract::SubstitutionCalculatorImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a9e761fcbdc84880bb08c3e45e92eaa2c</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank, Eigen::DenseIndex first, Eigen::DenseIndex size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a9f3f8608cbea14c86602f98e725fa9ca</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank, const std::vector&lt; Eigen::DenseIndex &gt; &amp;nnzRows, const std::vector&lt; Eigen::DenseIndex &gt; &amp;zeroRows)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a689eb31e7153ede2fc05484c2fd5f012</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>premultiplyByASharpAndSTranspose_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>ad3bd65db2d6831b7d639aa68642699ce</anchor>
      <arglist>(MatrixRef outA, MatrixRef outS, const MatrixConstRef &amp;in, bool minus) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postMultiplyByN_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>aa30bc070d8fedaef48715d5e660ec6f5</anchor>
      <arglist>(MatrixRef out, const MatrixConstRef &amp;in, bool add) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::GenericCalculator::Impl</name>
    <filename>a01183.html</filename>
    <base>tvm::hint::abstract::SubstitutionCalculatorImpl</base>
    <member kind="function">
      <type></type>
      <name>Impl</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a3cd21968118b01a88ffde9c47578afca</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ac8ce133376562bce551228c399299e54</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>premultiplyByASharpAndSTranspose_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ae0bbb153203ece7dd40889e9c3d363ae</anchor>
      <arglist>(MatrixRef outA, MatrixRef outS, const MatrixConstRef &amp;in, bool minus) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::Input</name>
    <filename>a01131.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a5de0f643eed6c526cdd0ccbd753fe8c0</anchor>
      <arglist>(const Input &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a6a4893cc1681a6d42bcb64597920da07</anchor>
      <arglist>(const Input &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>id</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a826f6863c4336e5f74f82b16177626ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a440b74e37ed387a629d31eec2ca86b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>source</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a5e163c6903a4356e4ad0622e06b2eae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a050da3276f11065b65b36031a1b0412e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::InputDependency</name>
    <filename>a01135.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01135.html</anchorfile>
      <anchor>a25ceaabd740dfee5842744633c7f49ee</anchor>
      <arglist>(const InputDependency &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01135.html</anchorfile>
      <anchor>afa831ed58cdbff33e32365839eb9997e</anchor>
      <arglist>(const InputDependency &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>input</name>
      <anchorfile>a01135.html</anchorfile>
      <anchor>a3702f258591842f2a24c093ef80acde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>update</name>
      <anchorfile>a01135.html</anchorfile>
      <anchor>a746e289bd011e4da2ee90e0fa2388a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>source</name>
      <anchorfile>a01135.html</anchorfile>
      <anchor>a41454758bab759cfbba764fbb549d965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01135.html</anchorfile>
      <anchor>ad21b1f78332c38e46bcdc641fdb7fe8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::internal::Inputs</name>
    <filename>a01103.html</filename>
    <class kind="struct">tvm::graph::internal::Inputs::Iterator</class>
    <member kind="typedef">
      <type>std::unordered_map&lt; abstract::Outputs *, std::set&lt; int &gt; &gt;</type>
      <name>inputs_t</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>a5f83c4f362fa09c25249bec6f6ad7c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_set&lt; std::shared_ptr&lt; abstract::Outputs &gt; &gt;</type>
      <name>store_t</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>ac6e7f546232c0333a259b677cfd3446f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Inputs</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>aee57010cd59189302e03828097aad3a3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInput</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>afd28cb6b0518021d7cb3ca6b1d434810</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; source, EnumI i, Args ... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInput</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>adfca69bc37336a6f8040a38d1e52b33f</anchor>
      <arglist>(T &amp;source, EnumI i, Args ... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInput</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>ad60a58128da7e4cdafba2e4ae358a23b</anchor>
      <arglist>(T *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInput</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>a83c340d294e0e092e8a1ecfe4b94be70</anchor>
      <arglist>(T *source, Args ... args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>getInput</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>aa460986cd8bbf0060ed476a8625aeac0</anchor>
      <arglist>(T *source)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>getInput</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>ae18f52958730844f8f29f727ca89e112</anchor>
      <arglist>(const std::shared_ptr&lt; T &gt; &amp;source)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>tvm::graph::CallGraph</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>ad30a0da6c3cc968e6b25d709ddab5e76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::InternalDependency</name>
    <filename>a01143.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a8f6e7dc899e3a1ecfeab296db39b7a84</anchor>
      <arglist>(const InternalDependency &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a84bdb2881bc4f712065816e6811f768f</anchor>
      <arglist>(const InternalDependency &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>from</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>adca86cb7c07883f07dd4b8c714c0fe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>to</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a87e9a75430ebe5f792965f5a4d2b6d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a3bb385b932d8614453a7d68c38436524</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::internal::MatrixProperties::Invertibility</name>
    <filename>a01219.html</filename>
    <member kind="function">
      <type></type>
      <name>Invertibility</name>
      <anchorfile>a01219.html</anchorfile>
      <anchor>afb36f8581408115f6b5ebc5e5a6375d2</anchor>
      <arglist>(bool b=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01219.html</anchorfile>
      <anchor>af898bc6d33dba97cb03bdfd5b166e19d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::internal::is_base</name>
    <filename>a01235.html</filename>
    <templarg>Base</templarg>
    <member kind="function" static="yes">
      <type>static std::true_type</type>
      <name>check</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>aef8213d9b6c7677be170e740af8ec4e1</anchor>
      <arglist>(Base&lt; T... &gt; const volatile &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::false_type</type>
      <name>check</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>aeacae02083a691a0e3770d15fc8f59c6</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Inputs::Iterator</name>
    <filename>a01107.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a01107.html</anchorfile>
      <anchor>ae0575801e2a31a008828efc9071e9ee7</anchor>
      <arglist>(inputs_t::iterator it, inputs_t::iterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01107.html</anchorfile>
      <anchor>a103f60c2e1bd1b54ca3cc8e7cd0cfc91</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::JointsSelector</name>
    <filename>a01359.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>ac8b5c195ebba49cdf9718f967de4ecd7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>velocity</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aa543e0e1838563e45f4c8a3cc95c0e2a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aee6955070f6f724e12997b9dd5481890</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; JointsSelector &gt;</type>
      <name>ActiveJoints</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a31cbae13c006173253aaed589d473728</anchor>
      <arglist>(FunctionPtr f, RobotPtr robot, const std::vector&lt; std::string &gt; &amp;activeJoints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; JointsSelector &gt;</type>
      <name>InactiveJoints</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>adc089a9d69b7f7629f6fba0b11bb59e1</anchor>
      <arglist>(FunctionPtr f, RobotPtr robot, const std::vector&lt; std::string &gt; &amp;inactiveJoints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointsSelector</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a07acf27b0e062fecde75823273a496a5</anchor>
      <arglist>(FunctionPtr f, RobotPtr robot, bool ffActive, const std::vector&lt; std::pair&lt; Eigen::DenseIndex, Eigen::DenseIndex &gt;&gt; &amp;activeIndex)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>abc9583df3461ae5c643ffdeb6024b698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJDot</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a5af259a4c3a5b163cfb35dfce93122c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FunctionPtr</type>
      <name>f_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aa4c7cf24cdc20fe15b64ff4dffd2bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>af62b21859edb23b7b93e551a72292d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>ffActive_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>abf88aa82d9399e6af0aa613e15b4174e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; Eigen::DenseIndex, Eigen::DenseIndex &gt; &gt;</type>
      <name>activeIndex_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a5ee253b852a0e6954634919d3363c6ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::KeepProperties</name>
    <filename>a01231.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>KeepProperties</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>aad31c7a9502f4334b05a805464e79eb7</anchor>
      <arglist>(ObjectWithProperties&lt; MatrixType &gt; &amp;M, bool keep)</arglist>
    </member>
    <member kind="function">
      <type>ObjectWithProperties&lt; MatrixType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>ad25800bcb0e960bc07561234f1ebf8a5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ObjectWithProperties&lt; MatrixType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>ae2f1b8bf8d5b1398decae9c9aab083bc</anchor>
      <arglist>(const ObjectWithProperties&lt; MatrixType &gt; &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::abstract::LeastSquareSolver</name>
    <filename>a01615.html</filename>
    <member kind="typedef">
      <type>utils::internal::map&lt; K, T &gt;</type>
      <name>map</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a70271b0bd50e96801e3e1bb96c46f33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::unique_ptr&lt; scheme::internal::Assignment &gt; &gt;</type>
      <name>AssignmentVector</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a95988cb51b89236e363bf48acb695d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; scheme::internal::Assignment * &gt;</type>
      <name>AssignmentPtrVector</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a8bc11c16f07a4b78be15fb84022a62b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; constraint::abstract::LinearConstraint *, AssignmentPtrVector &gt;</type>
      <name>MapToAssignment</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ac2a72be1906713a1c11abe459e64adc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquareSolver</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a6510ed405995eccc7b8b95eab6950606</anchor>
      <arglist>(bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquareSolver</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a0f0e2bcf5b50e3c559687bc77c15b7db</anchor>
      <arglist>(const LeastSquareSolver &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>LeastSquareSolver &amp;</type>
      <name>operator=</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a54a2223ecdba20e93b409b545129007e</anchor>
      <arglist>(const LeastSquareSolver &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LeastSquareSolver</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a1c97dfc4a522e819e945706999716d96</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startBuild</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>acab0b1da4af455451960f9044baae2ae</anchor>
      <arglist>(const VariableVector &amp;x, int nObj, int nEq, int nIneq, bool useBounds=true, const hint::internal::Substitutions *const subs=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeBuild</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ac656025fb6da6de520001c78d6d1d4ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuild</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a9cf3ce3b916a374add949ca3178b94e3</anchor>
      <arglist>(int nObj, int nEq, int nIneq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBound</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a498946e0c632ebd39ab03f61e552c6e7</anchor>
      <arglist>(LinearConstraintPtr bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a5337ac438bec063f42603ee7d242a93e</anchor>
      <arglist>(LinearConstraintPtr cstr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObjective</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a79a538ae98946c3d09416244400fadf3</anchor>
      <arglist>(LinearConstraintPtr obj, SolvingRequirementsPtr req, double additionalWeight=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumNorm</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a5e6d6bb8f6c74b8680a2d4a8cf801b68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ac9c495839db315c52ec06f6568814901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>result</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ae518e78de20d887d8f76469a4b8e124f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>constraintSize</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a64e3e91724bae85450bc20f93197094f</anchor>
      <arglist>(const LinearConstraintPtr &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWeight</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>aad0eb2e29cdff8ac9687dee79d81d65d</anchor>
      <arglist>(constraint::abstract::LinearConstraint *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAnisotropicWeight</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a6e8fc2e6fb17185bc658890e2c9ff094</anchor>
      <arglist>(constraint::abstract::LinearConstraint *c)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initializeBuild_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ad6511a50e125da09c826b3590996e8fb</anchor>
      <arglist>(int nObj, int nEq, int nIneq, bool useBounds)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addBound_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>af856b350aface97620be43d34f9d19a6</anchor>
      <arglist>(LinearConstraintPtr bound, RangePtr range, bool first)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addEqualityConstraint_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a60fcdf249fe024639e292ee10bdcd489</anchor>
      <arglist>(LinearConstraintPtr cstr)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addIneqalityConstraint_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a572230e38a5269d985a55a3618b2135a</anchor>
      <arglist>(LinearConstraintPtr cstr)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addObjective_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a01d7fea7e60c4e0dcc6a73ce3a75519e</anchor>
      <arglist>(LinearConstraintPtr obj, SolvingRequirementsPtr req, double additionalWeight=1)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setMinimumNorm_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a781e05b42b55803c23ba222b5d897bff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preAssignmentProcess_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a19f0461f07bbe91d72f32e0a7c2057d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postAssignmentProcess_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>af03aba3b20ea70b9984ecc59b57316e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>solve_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>abf5eca61b379efa6074bd4912015c207</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a8b5703ef1e13c55b8acda6e854356e27</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>handleDoubleSidedConstraint_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a97323b60663d92a9de70df4965429fdd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>printProblemData_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ab0461b8b275ece5ce0a9f5913a987284</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>printDiagnostic_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ac9dd179e0e5ba0e03c12c9a17e973c70</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const VariableVector &amp;</type>
      <name>variables</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a375e66619ca804359483acd385563fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const hint::internal::Substitutions *</type>
      <name>substitutions</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>adf23f08e8f6a9d94a0f80c32333f3a54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addAssignement</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>acfc6a2abfa644473d566aae238eac5ba</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nEq_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>af93ab7797fc1992046da3b518c21a4b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nIneq_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a4249508200e811ddcf52a909c3496de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nObj_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a3428deace130d2078b8c470acee81a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>objSize_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a247f51743146f9bcba380e65b405c672</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>eqSize_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ad7414899385906729feedcd6c2cf20b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ineqSize_</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ac97c443065a0e3d1a833af35fcff2c16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::LevelAbilities</name>
    <filename>a01587.html</filename>
    <member kind="function">
      <type></type>
      <name>LevelAbilities</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a29f0dfcc1af655aa62ae69ed34e9a6f1</anchor>
      <arglist>(bool inequality, const std::vector&lt; requirements::ViolationEvaluationType &gt; &amp;types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a85312f82b21cc59ce2256d81fa76d6e0</anchor>
      <arglist>(const ConstraintPtr &amp;c, const SolvingRequirementsPtr &amp;req, bool emitWarnings=true) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::constraint::abstract::LinearConstraint</name>
    <filename>a00959.html</filename>
    <base>tvm::constraint::abstract::Constraint</base>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>a00b01e37208c2f1492a22fb608779da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearConstraint</name>
      <anchorfile>a00959.html</anchorfile>
      <anchor>ab419bee158cb0cc4fc0204952de09d55</anchor>
      <arglist>(Type ct, RHS cr, int m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::LinearConstraintWithRequirements</name>
    <filename>a01259.html</filename>
    <member kind="variable">
      <type>LinearConstraintPtr</type>
      <name>constraint</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a957f4ea43f845ec06c3fe6f281fb1318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SolvingRequirementsPtr</type>
      <name>requirements</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>aa1ed4b445a07c6ba7fac2def826db329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>bound</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a51c6d466ff0c8b852865a5a47936129e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::LinearExpr</name>
    <filename>a01763.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ace550799fdb22b967ce5f5bddd0aa4a0</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix, const VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aa8b13db5c36b8e2d4a55544a74687e5f</anchor>
      <arglist>(const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aa715dc995e4c492fb70b7046afbe7e74</anchor>
      <arglist>(double a, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearExpr</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aa8b13db5c36b8e2d4a55544a74687e5f</anchor>
      <arglist>(const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>matrix</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>abda44d8407e3f1fabf7f43616e621ea0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariablePtr &amp;</type>
      <name>variable</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ab518500d32934cbf912c9f50c7fbcd19</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::function::abstract::LinearFunction</name>
    <filename>a01031.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>aad7053806999ec377a0c9fe98d6f0fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>adb9573940118706e4996f68e2b52650e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeCache</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a91e805f79dd07e7f530eac257c15c932</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const internal::VectorWithProperties &amp;</type>
      <name>b</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>ace72da7b9d2d371d302e21ba67aa7b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearFunction</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a7522b48375815feb50fc738cb1f3198e</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateValue_</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>ae8c94139576d1c0d4228c371978a0ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>updateVelocity_</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a52518e389c2fba069eaf736d5dc59c26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDerivativesToZero</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>af8fc32187dbf0cf844c16fb819b16c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>internal::VectorWithProperties</type>
      <name>b_</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a7c36684ad2b244eefb7237dc03259188</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::LinearizedControlProblem</name>
    <filename>a01263.html</filename>
    <base>tvm::ControlProblem</base>
    <member kind="function">
      <type></type>
      <name>LinearizedControlProblem</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a185f50144ac73b3714a8aa791d138542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedControlProblem</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>ac6fa8721c64bbe7815f8ce56ff2be8fd</anchor>
      <arglist>(const ControlProblem &amp;pb)</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a95a06a4ee0e5e54207b44aff7288ad4c</anchor>
      <arglist>(const Task &amp;task, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a020de24e49ecdcd3b54eef51f4c3f168</anchor>
      <arglist>(utils::ProtoTask&lt; T &gt; proto, const task_dynamics::abstract::TaskDynamics &amp;td, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a3565021e75500149b2e7b9966209890f</anchor>
      <arglist>(utils::LinearProtoTask&lt; T &gt; proto, const task_dynamics::abstract::TaskDynamics &amp;td, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirementsPtr</type>
      <name>add</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>afcf0201670cbea4dec6276e55ff89904</anchor>
      <arglist>(utils::LinearProtoTask&lt; T &gt; proto, const requirements::SolvingRequirements &amp;req={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a13c49d719940c575cf3b6fb11991a65f</anchor>
      <arglist>(TaskWithRequirementsPtr tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>ade5c2dbb9049e1f470b952b38e66b580</anchor>
      <arglist>(TaskWithRequirements *tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a221e3d94b2858896c0e226bcb2640d65</anchor>
      <arglist>(const hint::Substitution &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const hint::internal::Substitutions &amp;</type>
      <name>substitutions</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a3c72fec3889c47156712d2525d3af078</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariableVector</type>
      <name>variables</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a4b8667cb321d850d9d62608cf73b3cb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; LinearConstraintWithRequirements &gt;</type>
      <name>constraints</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a6d8adbf4c712eb5ce148e6df32d4961e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearConstraintPtr</type>
      <name>constraint</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a34dd0b835d4e281927f4122660aba19f</anchor>
      <arglist>(TaskWithRequirements *t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>abf09a96310e5820d348a18bd8f94501a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize_</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a3405a3add15a392d0d7d23f80d47981b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::constraint::internal::LinearizedTaskConstraint</name>
    <filename>a00967.html</filename>
    <base>tvm::constraint::abstract::LinearConstraint</base>
    <member kind="function">
      <type></type>
      <name>LinearizedTaskConstraint</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a4b0903cc8e0051a82649b2f8289cea17</anchor>
      <arglist>(const Task &amp;task)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedTaskConstraint</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ac61b8c5c69c76ecc169a0c7e97a5a3c2</anchor>
      <arglist>(const utils::ProtoTask&lt; T &gt; &amp;pt, const task_dynamics::abstract::TaskDynamics &amp;td)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLKin</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ab3f4d6d2aecd68f596bb4c4fe975cc2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateLDyn</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a3c2b7efb6f73b771d189073505f18009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateUKin</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ab9ca82e201a6fc4f5c92700bd8e12449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateUDyn</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a9e01dd04b8ff33f0aa6ee1915b49fdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEKin</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a7329c828984a9fa2b4152b079e9a2546</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateEDyn</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a5cff0e1ce9b297aedee86930cdd6c1ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateU2Kin</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>af333a6b75d65e4f94f4a032a8ec8b77f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateU2Dyn</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>a2765d2ec2842c5c9af49fb42eca14fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tvm::internal::MatrixWithProperties &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00967.html</anchorfile>
      <anchor>ad679ce8ec72c734e4c6f2e9905b94453</anchor>
      <arglist>(const Variable &amp;x) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::abstract::LinearResolutionScheme</name>
    <filename>a01383.html</filename>
    <templarg>Derived</templarg>
    <base>tvm::scheme::abstract::ResolutionScheme</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearResolutionScheme</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a019151cc7533d74bc20dbaa49940e7d2</anchor>
      <arglist>(internal::SchemeAbilities abilities, double big=constant::big_number)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearResolutionScheme&lt; WeightedLeastSquares &gt;</name>
    <filename>a01383.html</filename>
    <base>ResolutionScheme&lt; WeightedLeastSquares &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearResolutionScheme</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a019151cc7533d74bc20dbaa49940e7d2</anchor>
      <arglist>(internal::SchemeAbilities abilities, double big=constant::big_number)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::event::Listener</name>
    <filename>a00987.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Listener</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a0befab57c95dbde14fd0dfe34e4b1b6c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>a1fe832c40caa9d49dd80d1fa7108817b</anchor>
      <arglist>(Type evt, const Source &amp;notifier)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>process</name>
      <anchorfile>a00987.html</anchorfile>
      <anchor>af2e6e5fed058ea86c68e27834ab0f777</anchor>
      <arglist>(Type evt, const Source &amp;notifier)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::internal::Log</name>
    <filename>a01111.html</filename>
    <class kind="struct">tvm::graph::internal::Log::DirectDependency</class>
    <class kind="struct">tvm::graph::internal::Log::EnumValue</class>
    <class kind="struct">tvm::graph::internal::Log::Input</class>
    <class kind="struct">tvm::graph::internal::Log::InputDependency</class>
    <class kind="struct">tvm::graph::internal::Log::InternalDependency</class>
    <class kind="struct">tvm::graph::internal::Log::Output</class>
    <class kind="struct">tvm::graph::internal::Log::OutputDependency</class>
    <class kind="struct">tvm::graph::internal::Log::Pointer</class>
    <class kind="struct">tvm::graph::internal::Log::Update</class>
    <member kind="function">
      <type>std::string</type>
      <name>generateDot</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>afa58ae774bf3dc101dfe11817819dcb7</anchor>
      <arglist>(const Pointer &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generateDot</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>ae47952edabe6dcfa9a4e7b77fc8810a9</anchor>
      <arglist>(const CallGraph *const g) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generateDot</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a3d4660dc9818036aa8b03a1b0ecf0273</anchor>
      <arglist>(const std::vector&lt; Log::Output &gt; &amp;outHighlight={}, const std::vector&lt; Log::Update &gt; &amp;upHighlight={}) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Update &gt;</type>
      <name>updates_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a76e88b35cc20acfe8936ee07d7850ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Input &gt;</type>
      <name>inputs_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a53ee810b02617e81464bf517e4a36943</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Output &gt;</type>
      <name>outputs_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a50fdeb8e7fb893356111f1e6b5be81fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; InputDependency &gt;</type>
      <name>inputDependencies_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>ab083bed92aac2f4225efded5c6b54435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; OutputDependency &gt;</type>
      <name>outputDependencies_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a1a9f96228d1f42d8b62091f95aa841a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; InternalDependency &gt;</type>
      <name>internalDependencies_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a18cbb0adfb134159d41e42bdbbef5a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; DirectDependency &gt;</type>
      <name>directDependencies_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>aec5608f30f410ccea972d6c6adc959ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; Pointer, std::vector&lt; Pointer &gt; &gt;</type>
      <name>graphOutputs_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>ab0ca990b217de49a45ffeae370861d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::uintptr_t, std::vector&lt; std::type_index &gt; &gt;</type>
      <name>types_</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>afa117708bb8db03e970d2cfae9d25573</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::internal::Logger</name>
    <filename>a01151.html</filename>
    <member kind="function">
      <type>const Log &amp;</type>
      <name>log</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a6e4c749af0d1b14cb19f0e822bb4f0a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerUpdate</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a2526684e619e81f6be23498f8dc37652</anchor>
      <arglist>(U *node, EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInput</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a5d1845206da4abbf6b4d6ae9863e0915</anchor>
      <arglist>(Inputs *node, S *source, EnumO i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a0956c344448da3457dc6b3d241297850</anchor>
      <arglist>(U *node, EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>abf7ca127b7d13c5a2aa4130caf83d0db</anchor>
      <arglist>(U *node, EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a7839f87a2b90316995ecab90b6ac70f7</anchor>
      <arglist>(U *node, EnumU u, S *source, EnumO i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>aedefca285a6f19617292c4f2372a5852</anchor>
      <arglist>(U *node, EnumO o, S *source, EnumI i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGraphOutput</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>aacb1106daf43100ddd139cb690359fef</anchor>
      <arglist>(CallGraph *g, Inputs *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerType</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a45e47a539aaebf9745f3cfa726b7d877</anchor>
      <arglist>(U *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logCall</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a2cc181c60124a1d9d60b3ddd9e8b7b6f</anchor>
      <arglist>(U *node, void(U::*fn)())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger &amp;</type>
      <name>logger</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>a6d18c4d67dcbfc474c12a6600c7d2199</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::LSSOLLeastSquareSolver</name>
    <filename>a01635.html</filename>
    <base>tvm::solver::abstract::LeastSquareSolver</base>
    <member kind="function">
      <type></type>
      <name>LSSOLLeastSquareSolver</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>abd73c4a6890bbf7a6f12c9c221f7d421</anchor>
      <arglist>(const LSSOLLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeBuild_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a8ec19bae9b851281ecb216a805a1a16d</anchor>
      <arglist>(int nObj, int nEq, int nIneq, bool useBounds) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addBound_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>afed6bcd81b204a62fab6fd2e8483b9ec</anchor>
      <arglist>(LinearConstraintPtr bound, RangePtr range, bool first) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEqualityConstraint_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a5857b555377607f2d65529c20f9ad2b3</anchor>
      <arglist>(LinearConstraintPtr cstr) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addIneqalityConstraint_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>af9f75a79105a40e437e2e081cdd8744a</anchor>
      <arglist>(LinearConstraintPtr cstr) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addObjective_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a80a6e5f678db5ba030b50317958f48c5</anchor>
      <arglist>(LinearConstraintPtr cstr, SolvingRequirementsPtr req, double additionalWeight) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMinimumNorm_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>adc8b2cfb87e3236471b545836ead7ea3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preAssignmentProcess_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a5b83dfc1e4a891a82158d3fbf0bf04ba</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postAssignmentProcess_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a212da1a4c1a113e423a4036fc61f79b6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>solve_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a0bd868d0cb17932ee90e74202ae5ac90</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a371e638d7617e4f9d69232a56c33aa62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleDoubleSidedConstraint_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a78957d81cf1eb1504965b8c2fa97129c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printProblemData_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>aa2f4cbb3a305647d025d39da181c77b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printDiagnostic_</name>
      <anchorfile>a01635.html</anchorfile>
      <anchor>a3ef5d128f843db95bf8427040b23b8de</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::LSSOLLSSolverFactory</name>
    <filename>a01639.html</filename>
    <base>tvm::solver::abstract::LSSolverFactory</base>
    <member kind="function">
      <type></type>
      <name>LSSOLLSSolverFactory</name>
      <anchorfile>a01639.html</anchorfile>
      <anchor>a4161a1c6228053efd1f61b5dab901a1e</anchor>
      <arglist>(const LSSOLLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LSSolverFactory &gt;</type>
      <name>clone</name>
      <anchorfile>a01639.html</anchorfile>
      <anchor>a37498aa7021f22f076407a3106fdfc35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LeastSquareSolver &gt;</type>
      <name>createSolver</name>
      <anchorfile>a01639.html</anchorfile>
      <anchor>a0a7baded2c2cf864371d8e32f3add3c3</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::LSSOLLSSolverOptions</name>
    <filename>a01631.html</filename>
    <member kind="typedef">
      <type>LSSOLLSSolverFactory</type>
      <name>Factory</name>
      <anchorfile>a01631.html</anchorfile>
      <anchor>aa4aace23ce6579fd4320181195b38d18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::abstract::LSSolverFactory</name>
    <filename>a01619.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LSSolverFactory</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>aa7253c409c8125f7806cac17adffb8b5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; LSSolverFactory &gt;</type>
      <name>clone</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a6fa2c837939850ad7a9acb3aa7e7e6fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; LeastSquareSolver &gt;</type>
      <name>createSolver</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a9f66347b627c0e41deab82a2bbc0ee32</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LSSolverFactory</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a16f20ada8e2be7db1dfe20d6d19d27a2</anchor>
      <arglist>(const std::string &amp;solverName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::MatrixMultBase</name>
    <filename>a01523.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::MatrixMultBase&lt; MatrixType, CUSTOM &gt;</name>
    <filename>a01539.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MatrixMultBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9f607efbce088a211ef9d358b0ca98a0</anchor>
      <arglist>(void(*mult)(Eigen::Ref&lt; MatrixType &gt; out, const Eigen::Ref&lt; const MatrixType &gt; &amp;in))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMatrixMultCached</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab0ff5eff6f90da0cb22f1f6966b02f70</anchor>
      <arglist>(MatrixType &amp;cache, const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::MatrixMultBase&lt; MatrixType, GENERAL &gt;</name>
    <filename>a01531.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>decltype(std::declval&lt; Eigen::Ref&lt; const Eigen::MatrixXd &gt; &gt;() *std::declval&lt; T &gt;())</type>
      <name>PreType</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>ae9e51a359c8d96e54567c48fb894859f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; T &gt;() *std::declval&lt; Eigen::Ref&lt; const Eigen::MatrixXd &gt; &gt;())</type>
      <name>PostType</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a2cf9a89c221254f318c5080a8ef3c9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; Eigen::Ref&lt; const Eigen::MatrixXd &gt; &gt;() *Eigen::VectorXd::Constant(1, 1))</type>
      <name>ConstType</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>afaeb8334a9ac47eaff9d7f91fec4efbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixMultBase</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>abdd0beb3c2bb24191c72018922745da6</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; isVector&lt; MatrixType &gt;::value, PreType&lt; T &gt; &gt;::type</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>aa9f7fd52985cf857b5a9b482007f32f0</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt;!isVector&lt; MatrixType &gt;::value, PostType&lt; T &gt; &gt;::type</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a13931a03addf934ba95e48f6cc73ea1d</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; isVector&lt; U &gt;::value, ConstType &gt;::type</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>aadd50be0859c22263cb10590f4c850c1</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMatrixMultCached</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>ac2b54dec91b9db12f82f3a7ec8c9c51f</anchor>
      <arglist>(MatrixType &amp;cache, const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::MatrixMultBase&lt; MatrixType, IDENTITY &gt;</name>
    <filename>a01527.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MatrixMultBase</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>ad2d393f822c660ff6b064319d7302beb</anchor>
      <arglist>(NoArg)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>af2e8762d91431c39136cf731848fb8ad</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::MatrixMultBase&lt; MatrixType, INVERSE_DIAGONAL &gt;</name>
    <filename>a01535.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>decltype(std::declval&lt; Eigen::Ref&lt; const Eigen::MatrixXd &gt; &gt;().diagonal().cwiseInverse().asDiagonal())</type>
      <name>InvDiagType</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>ab9e879eaa68813bb22452c2f85dcdb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; InvDiagType &gt;() *std::declval&lt; T &gt;())</type>
      <name>PreType</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a09ecef717b707825e7745a911f676485</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; T &gt;() *std::declval&lt; InvDiagType &gt;())</type>
      <name>PostType</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a8b432bd95d351e10d917964b672cbb76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; InvDiagType &gt;() *Eigen::VectorXd::Constant(1, 1))</type>
      <name>ConstType</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a91696d9b7a3e5daf31c85b32cc50a890</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixMultBase</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a4dc3d14bfdff03e5c9fd32cbdcae508e</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; isVector&lt; MatrixType &gt;::value, PreType&lt; T &gt; &gt;::type</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>ad4ec3b654e0811725112d73eb5a2f0fb</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt;!isVector&lt; MatrixType &gt;::value, PostType&lt; T &gt; &gt;::type</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a87942b35f10bb6b5907896d9cb7dc944</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; isVector&lt; U &gt;::value, ConstType &gt;::type</type>
      <name>applyMatrixMult</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a0f84cf690666a1065ab3385b74094ab5</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyMatrixMultCached</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a78f8cd1895f05578110ede48f2b4a0ec</anchor>
      <arglist>(MatrixType &amp;cache, const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::MatrixProperties</name>
    <filename>a01211.html</filename>
    <class kind="struct">tvm::internal::MatrixProperties::Constness</class>
    <class kind="struct">tvm::internal::MatrixProperties::Invertibility</class>
    <member kind="enumeration">
      <type></type>
      <name>Shape</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda3a8490734aac6c2dcdef3819db0cf815</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_TRIANGULAR</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cdae9700cec9bb7f3f1019a520203fcf655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_TRIANGULAR</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cdaf2b156e2a83a3cfbe7e2bfc36715ff4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIAGONAL</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda43ad746fc40d8d73615f7bd0ec274fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLE_OF_IDENTITY</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda3ac3c5b139d4f76d2e323addb092aca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDENTITY</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda9a947cc33b6f2d08661c4294fbf58a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS_IDENTITY</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda03b8d7cafd2f7ac5a843cfb57cd6e535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZERO</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cdac11aaaf8dd73719e6cb7895f40464d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Positiveness</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NA</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf15ed658ed1f197afbd6a6c77ed9661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIVE_SEMIDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf8fe8b2b7a2a582a099bddcd72e4634e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIVE_DEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acacd927a719f977a8866e71a6d6cb57225</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEGATIVE_SEMIDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691aca871dc3ffd0222b4679aa5a42ced5944d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEGATIVE_DEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf1a0ade46356456857234d89b5a803d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691aca1a68db8433bdadd92c05cf9f9a298cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NON_ZERO_INDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf58c38129bf1e5a36592764d0f620f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda3a8490734aac6c2dcdef3819db0cf815</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER_TRIANGULAR</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cdae9700cec9bb7f3f1019a520203fcf655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER_TRIANGULAR</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cdaf2b156e2a83a3cfbe7e2bfc36715ff4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIAGONAL</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda43ad746fc40d8d73615f7bd0ec274fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTIPLE_OF_IDENTITY</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda3ac3c5b139d4f76d2e323addb092aca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDENTITY</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda9a947cc33b6f2d08661c4294fbf58a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS_IDENTITY</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cda03b8d7cafd2f7ac5a843cfb57cd6e535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZERO</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a5ecda606e4ac1a63774dc6cbaf34a6cdac11aaaf8dd73719e6cb7895f40464d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NA</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf15ed658ed1f197afbd6a6c77ed9661a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIVE_SEMIDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf8fe8b2b7a2a582a099bddcd72e4634e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSITIVE_DEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acacd927a719f977a8866e71a6d6cb57225</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEGATIVE_SEMIDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691aca871dc3ffd0222b4679aa5a42ced5944d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEGATIVE_DEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf1a0ade46356456857234d89b5a803d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691aca1a68db8433bdadd92c05cf9f9a298cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NON_ZERO_INDEFINITE</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a9205f791aecea843ac98ffa6995691acaf58c38129bf1e5a36592764d0f620f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixProperties</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a1adf2965787e6ecd891e9fc1efe01b81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixProperties</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aae2750798c532e1aefe5d85de568b3fd</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>Shape</type>
      <name>shape</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a2c2f846a1c3b0e71ff306925f7c271d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Positiveness</type>
      <name>positiveness</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ae48150711fe2734b63b6fe6316c52a05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Constness</type>
      <name>constness</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a4262a993da1ef06dfff10dfe3d7f40c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Invertibility</type>
      <name>invertibility</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aec03122a1d57fa1cff157117c8050b4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aec5e1dc18998630e90cc2ce2dfc0018b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a8099f8d53c491281637faad3f7ef6795</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTriangular</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a748e65f9c5ac9702812ef2cf9680f556</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ae51aa149324ab219be20ef8693587f6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a7382a2ae6337c91f95420837ac9ebbba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a0cb61b181f7270aef8e31dcf39455b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultipleOfIdentity</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a6c671d8ce20527f51ed2d164ee5e5f55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a96d2e034bb439d66705cb82d68199a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMinusIdentity</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a2daedc827bedcfe876fd8ebf647ebca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>af53698ed13a9ca5d2495f1ced096addb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSymmetric</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ae499f08242a36ce08e6f811976bdf71d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveSemiDefinite</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a19e56f8f3fc99246647199d9172908a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositiveDefinite</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a7afc70ab6e2a267f403202b516b041f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegativeSemidefinite</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a04eeca7dd18add16222c35e1c5427772</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegativeDefinite</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a4ab6b2edace3f381af6784095066c393</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIndefinite</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a7cf05e03d8f9779b5cfa8b2ab3548edd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNonZeroIndefinite</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac80a555b650a2d69641c4c6f14eacf48</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::NoArg</name>
    <filename>a01415.html</filename>
  </compound>
  <compound kind="class">
    <name>tvm::utils::internal::NoConstant</name>
    <filename>a01779.html</filename>
    <member kind="function">
      <type>NoConstant</type>
      <name>operator-</name>
      <anchorfile>a01779.html</anchorfile>
      <anchor>abb0569c302241503cc6a12fa3af0619a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::abstract::Node</name>
    <filename>a01047.html</filename>
    <templarg>T</templarg>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; Contact &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; ConvexHull &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; FirstOrderProvider &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; Frame &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; Plane &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; Robot &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Node&lt; TaskDynamicsImpl &gt;</name>
    <filename>a01047.html</filename>
    <base>tvm::graph::internal::AbstractNode</base>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a8d05ae3764eec43dc2444a21636b04e9</anchor>
      <arglist>(EnumT u, void(U::*fn)(), Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerUpdates</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a13fc273cdc8b130963e377ca2ebc23ec</anchor>
      <arglist>(EnumT u, void(U::*fn)())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aab69441987f72e1a7f748e7680040b53</anchor>
      <arglist>(EnumO o, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addOutputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a4ec29838fb05b1d999e255848608f42c</anchor>
      <arglist>(std::initializer_list&lt; EnumO &gt; os, EnumU u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInternalDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>aae1fb781215cdc67d7aab925ca578580</anchor>
      <arglist>(EnumU1 uDependent, EnumU2 u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>a6d4a5a073bdab44628101cbb45300491</anchor>
      <arglist>(EnumU u, std::shared_ptr&lt; S &gt; source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addInputDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>acdadbe57cf47ebc7639944e069977dd1</anchor>
      <arglist>(EnumU u, S &amp;source, EnumO i, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ae92f7743eb69a459cecb3be61f1b6e47</anchor>
      <arglist>(EnumO o, std::shared_ptr&lt; S &gt; source, EnumI i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addDirectDependency</name>
      <anchorfile>a01047.html</anchorfile>
      <anchor>ad0c8e10dbd78025cd1b67873368b5a57</anchor>
      <arglist>(EnumO o, S &amp;source, EnumI i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::None</name>
    <filename>a01707.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamics</base>
    <class kind="class">tvm::task_dynamics::None::Impl</class>
    <member kind="function">
      <type></type>
      <name>~None</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>ad28aecabc3a07ed2c37d89f1a10f5c5a</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>aeb7ea66d0e8f31d758b7161c533fd2b5</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Order</type>
      <name>order_</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>ab6cacaa6764c52f9ffb67001d3ebc848</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::exception::NonExistingVariable</name>
    <filename>a01019.html</filename>
    <base>tvm::exception::FunctionException</base>
  </compound>
  <compound kind="class">
    <name>tvm::exception::NotImplemented</name>
    <filename>a01023.html</filename>
    <base>tvm::exception::Exception</base>
  </compound>
  <compound kind="struct">
    <name>tvm::robot::CollisionFunction::CollisionData::ObjectData</name>
    <filename>a01311.html</filename>
    <member kind="variable">
      <type>Eigen::Vector3d</type>
      <name>nearestPoint_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a76a1aebaef648808cef92eb00922eb01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>rbd::Jacobian</type>
      <name>jac_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>af1728be56b625036637f33c733a6f592</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::ObjectWithProperties</name>
    <filename>a01227.html</filename>
    <templarg>MatrixType</templarg>
    <member kind="function">
      <type></type>
      <name>ObjectWithProperties</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a0fae047f1fbc44c9f258474be34a08eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectWithProperties</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a10bf9c00cabc3b99acaca4b974055769</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const MatrixProperties &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>ObjectWithProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a3bffde23ae5cd83bbde8f4fb2687a18d</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ObjectWithProperties &amp;</type>
      <name>assignKeepProperties</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a4f2abffcce0224a9221278dfde10a909</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixProperties &amp;</type>
      <name>properties</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a139b3f8ae5d4bdfa9c46ef76b76dcbec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>properties</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a9c63448b13cca6824a9bbd4b7908394b</anchor>
      <arglist>(const MatrixProperties &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KeepProperties&lt; MatrixType &gt;</type>
      <name>keepProperties</name>
      <anchorfile>a01227.html</anchorfile>
      <anchor>a85dd27100ca7c433b7ce60e0281074d0</anchor>
      <arglist>(bool keep)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::ObjWithId</name>
    <filename>a01247.html</filename>
    <member kind="function">
      <type></type>
      <name>ObjWithId</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>a56106dc0b038e076a2c8420368615efd</anchor>
      <arglist>(const ObjWithId &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjWithId &amp;</type>
      <name>operator=</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>a2c7051ea19885a16a459149fe36dd555</anchor>
      <arglist>(const ObjWithId &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>ab153084b455818dae756548bc210ba49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjWithId</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>a28e6fb5a7fdf04111cdd47209e825f9a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::OrientationFunction</name>
    <filename>a01363.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type></type>
      <name>OrientationFunction</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>aa9c4b1ffe33d44449bcfd22b82c557fb</anchor>
      <arglist>(FramePtr frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a560db2f56638945dd384091474c35d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix3d &amp;</type>
      <name>orientation</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a1f9d0701f055781ee5573280b88704d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a1a6442b7d2cf30d959933b19b7b972ed</anchor>
      <arglist>(const Eigen::Matrix3d &amp;ori)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>ae2e90b6644897b77a87144a9121979ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a61c6168d1574c5a9bf6bf96e704730a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a5221d447cf166644fea3b4d66b774d61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>acf513041e7b9b517ae4e9f6821f82433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FramePtr</type>
      <name>frame_</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a7541921c783576ee3b2240c1504f8286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix3d</type>
      <name>ori_</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a1c727c316ef27d6709e6d2e7c0a7e8db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::abstract::Outputs::Output</name>
    <filename>a01055.html</filename>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::Output</name>
    <filename>a01127.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>aece7f645175657b11afadc5e9b4843d8</anchor>
      <arglist>(const Output &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a24c6a949361bf4b7457f0cda932357f6</anchor>
      <arglist>(const Output &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>id</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>aebb7180e249b0dd0bcde56b811bf153b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a3cc6a42382f567b7b491904b7fd8a14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a7d6a30adbe700862b885726b8afa51d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::OutputDependency</name>
    <filename>a01139.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>af503b0dc02469115a0b2a80744e9e366</anchor>
      <arglist>(const OutputDependency &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>abe8dbfc9d736c036bcfb5086d26c5897</anchor>
      <arglist>(const OutputDependency &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>update</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a3e9d5698c091406516a9b016f25bded6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>output</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>aa5541db04c709f773c629d8b68c9c631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a98ab4a5ae11f4b4d9bcc6fbbc6bce54c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::abstract::Outputs</name>
    <filename>a01051.html</filename>
    <class kind="struct">tvm::graph::abstract::Outputs::Output</class>
    <member kind="enumeration">
      <type></type>
      <name>Output_</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a7426f1ecfb4746a92196ee6ec31dddeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Outputs</type>
      <name>OutputParent</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a0f92178ca250dd757ab141a92b41c03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Outputs</type>
      <name>OutputBase</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a28091daa5c502e591f5ccb07f6d7915f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Outputs</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3c7c267d448dea54dfc3e6ab64e07f60</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutputEnabled</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a0f1f636c33817fa12f4162f692cb381b</anchor>
      <arglist>(EnumT e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutputEnabled</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a9906689532225c28da9490e2b8eb0ced</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOutputStaticallyEnabled</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a6aba2d7e20119b41b6895f5406795a3b</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOutputCustomEnabled</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>afc310e1cf7c222ce1c71ad5cc51c6db5</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr const char *</type>
      <name>OutputName</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a24af6171e8e80e31c2d41b3d1272a9a8</anchor>
      <arglist>(Output_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>OutputStaticallyEnabled</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>ad0772c09826310a52fb60d12333ed8e1</anchor>
      <arglist>(EnumT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>OutputSize</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a1bb139d1761eac8f2b56635c8a684b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>OutputBaseName</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a79f6e3d77cf784915bdbfb69b5789992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>is_node_</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a23a32e4238b7900d0f3b7787bfa6232b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>tvm::graph::CallGraph</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>ad30a0da6c3cc968e6b25d709ddab5e76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::graph::abstract::OutputSelector</name>
    <filename>a01067.html</filename>
    <templarg>OutputProvider</templarg>
    <templarg>Base</templarg>
    <base protection="protected">SelectorMembers&lt;!is_output_selector&lt; Base &gt;()&gt;</base>
    <member kind="function">
      <type></type>
      <name>OutputSelector</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a56304a7795c79d5fbb55d8e1b34689cd</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a708907741c7ed1e5bbdc0c8b18ab0f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a20e59e5e0041a4a04b2d4c574f5357c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>acecd5431d8669020975745445eda213e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a766fd1ed72d2502853d44ee247c28b7b</anchor>
      <arglist>(EnumT e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>aa3c3c49cdca30d9298ba677889ab06ae</anchor>
      <arglist>(EnumT e, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>ac4c44ef0be45d2fbe9a0eb262ec9fd62</anchor>
      <arglist>(EnumT e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a29ae45142cb1934ccf79e6d1b64b2502</anchor>
      <arglist>(EnumT e, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isOutputCustomEnabled</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a9055289bba2c2a08cbde4cd4825cb77f</anchor>
      <arglist>(int e) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OutputSelector&lt; Constraint, tvm::internal::FirstOrderProvider &gt;</name>
    <filename>a01067.html</filename>
    <base>tvm::internal::FirstOrderProvider</base>
    <base protection="protected">SelectorMembers&lt;!is_output_selector&lt; tvm::internal::FirstOrderProvider &gt;()&gt;</base>
    <member kind="function">
      <type></type>
      <name>OutputSelector</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a56304a7795c79d5fbb55d8e1b34689cd</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a708907741c7ed1e5bbdc0c8b18ab0f3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a20e59e5e0041a4a04b2d4c574f5357c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>acecd5431d8669020975745445eda213e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a766fd1ed72d2502853d44ee247c28b7b</anchor>
      <arglist>(EnumT e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>disableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>aa3c3c49cdca30d9298ba677889ab06ae</anchor>
      <arglist>(EnumT e, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>ac4c44ef0be45d2fbe9a0eb262ec9fd62</anchor>
      <arglist>(EnumT e)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableOutput</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a29ae45142cb1934ccf79e6d1b64b2502</anchor>
      <arglist>(EnumT e, Args ... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isOutputCustomEnabled</name>
      <anchorfile>a01067.html</anchorfile>
      <anchor>a9055289bba2c2a08cbde4cd4825cb77f</anchor>
      <arglist>(int e) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::PairElementToken</name>
    <filename>a01255.html</filename>
    <member kind="function">
      <type></type>
      <name>PairElementToken</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a54e8adef2c488f9c11c017472f4afe02</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairElementToken</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a0f1f67b1db51326dadc2bc68004cd028</anchor>
      <arglist>(const PairElementToken &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PairElementToken &amp;</type>
      <name>operator=</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>adfbed015ab607a86fd24cae7f2018154</anchor>
      <arglist>(const PairElementToken &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairElementToken</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a542edf2dcaaef2f802f87360ba3b99dd</anchor>
      <arglist>(PairElementToken &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairElementToken</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a1d924b7b87c21969e474befd14fec777</anchor>
      <arglist>(PairElementTokenHandle &amp;&amp;h) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PairElementToken &amp;</type>
      <name>operator=</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a4193fd311631a89733bb36f91a98a982</anchor>
      <arglist>(PairElementToken &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PairElementToken &amp;</type>
      <name>operator=</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a3b607e66b4e7dea01ee9ccc7ef67d710</anchor>
      <arglist>(PairElementTokenHandle &amp;&amp;h) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PairElementToken</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>afef49cf3962506a96f33647c979a39f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pairWith</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a90104d7961210a154fb4a2611ef9a7c0</anchor>
      <arglist>(PairElementToken &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaired</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>abbd392c2acfca49d92ac5ce51b0117b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPairedWith</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>ac76439530a78c6211b73fcb8a9607cac</anchor>
      <arglist>(const PairElementToken &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PairElementToken &amp;</type>
      <name>otherPairElement</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>aec372fcc72e598d5482387ceed351733</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::internal::PairElementTokenHandle</name>
    <filename>a01251.html</filename>
    <member kind="function">
      <type></type>
      <name>PairElementTokenHandle</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a716e6b05af90e75d9b1f21f074be034f</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairElementTokenHandle</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a8cab33ac027071f37af304f13a945a27</anchor>
      <arglist>(const PairElementTokenHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairElementTokenHandle</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a8407a00a5fb430f09403045c1f76c9fd</anchor>
      <arglist>(PairElementTokenHandle &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PairElementTokenHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>aea1df01baa44cbd442d5cad1b45b645b</anchor>
      <arglist>(const PairElementTokenHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PairElementTokenHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a0184f2014da3b9d065ce680dc6167206</anchor>
      <arglist>(PairElementTokenHandle &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PairElementTokenHandle</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a0979fb64ce4a0f7b1c2bd05d1e44900e</anchor>
      <arglist>(PairElementToken &amp;t) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a745de08b5142257c81f95163a36449f3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ParseArg</name>
    <filename>a01427.html</filename>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ParseArg_</name>
    <filename>a01419.html</filename>
    <templarg>N</templarg>
    <member kind="function" static="yes">
      <type>static std::tuple_element&lt; N, std::tuple&lt; Args... &gt; &gt;::type</type>
      <name>get</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>af0126d894fd15e55277b65bd6d7d7ec6</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ParseNoArg_</name>
    <filename>a01423.html</filename>
    <member kind="function" static="yes">
      <type>static NoArg</type>
      <name>get</name>
      <anchorfile>a01423.html</anchorfile>
      <anchor>a96dad55475955efaf6b3aafbac2f957c</anchor>
      <arglist>(Args &amp;&amp;...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::CallGraph::Plan</name>
    <filename>a01083.html</filename>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a01083.html</anchorfile>
      <anchor>ac6830efb1d692d3094a7129f1c93a866</anchor>
      <arglist>(const CallGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01083.html</anchorfile>
      <anchor>a01178b52a508fe369caefa3e95e29fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>a01083.html</anchorfile>
      <anchor>acc8fe0adb65059f464a60409f68b22b1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::geometry::Plane</name>
    <filename>a01043.html</filename>
    <base>Node&lt; Plane &gt;</base>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>ad74165f0db46cd2d2df2b00c94428b65</anchor>
      <arglist>(const Eigen::Vector3d &amp;normal, double offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a9e7c196ed05f5f2c4a507afbd73c741e</anchor>
      <arglist>(const Eigen::Vector3d &amp;normal, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegrator</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>ab9f41c4e1420d5ce1b7877e3b28005da</anchor>
      <arglist>(std::shared_ptr&lt; S &gt; integrator, EnumO oPosition, EnumO oVelocity, EnumO oAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegrator</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>ae591e6d2e33838eb17c2efa78cc46cf7</anchor>
      <arglist>(S &amp;integrator, EnumO oPosition, EnumO oVelocity, EnumO oAcceleration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a745000c56b8ddbb2bad193198cd5efec</anchor>
      <arglist>(const Eigen::Vector3d &amp;normal, const Eigen::Vector3d &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a80fb8c553ada1375f54c94f0f4a38b60</anchor>
      <arglist>(const Eigen::Vector3d &amp;normal, double offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>velocity</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a5a4cd2a5300b3a634c18bcc985570f6d</anchor>
      <arglist>(const Eigen::Vector3d &amp;nDot, const Eigen::Vector3d &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceleration</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>abec3e16bdde80750ff9762d889bd706c</anchor>
      <arglist>(const Eigen::Vector3d &amp;nDotDot, const Eigen::Vector3d &amp;accel)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>normal</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a968a02cc2f42d3c8b3eeb2157dc0e94b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>offset</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>ae050d736738243ac7ee56bc15ed61edb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>point</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a711b8330853b07303cf72219d32b6940</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>normalDot</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>ad738b3a103c3ce0188dfcd15f84b7bab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>speed</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a8df08f03f7cae135d9e3b28e566d70c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>normalDotDot</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a8038ea0966c53871016e4e38176f1265</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>acceleration</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a0717cd9e9c938bfa7a78f9876ed9cc48</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::Pointer</name>
    <filename>a01119.html</filename>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>ae6fd2b3fe5f45fb6435d8aa8c74318cf</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>a9d7242d4c45dc0664bb07de1ccb11413</anchor>
      <arglist>(const std::type_index &amp;t, std::uintptr_t v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>a5e059086cba9bbe42aa76555e5d91d26</anchor>
      <arglist>(const Pointer &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>ad32392904aa55c7d3aa094bade598718</anchor>
      <arglist>(const Pointer &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>std::type_index</type>
      <name>type</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>a47ca500da504fbe40e1f7f467cd7fdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uintptr_t</type>
      <name>value</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>af4b840f84e5951f2952959179d6c41a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::PositionFunction</name>
    <filename>a01367.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type></type>
      <name>PositionFunction</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>aa9b673ce831ff58a6ba983e83d842794</anchor>
      <arglist>(FramePtr frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a60df31194b6d4ea5edf7ac887958868e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>position</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a6eba7837235eeee157ff997751c89245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>position</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a925c8c9a795e78ce70b3081dc500ad79</anchor>
      <arglist>(const Eigen::Vector3d &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>af05e9ca55427233c2588b34dab417b49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a71b748afc90e4d64b5db44b39ed633d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateJacobian</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a980d7bda556175c66cfc14b59bf70923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateNormalAcceleration</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>aad660f15e7a5cc9d5b61eccac198083b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FramePtr</type>
      <name>frame_</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a4662ef9ca4bef94384d2f82ca01d3eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Vector3d</type>
      <name>pos_</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a85b4976fe41840e3802bd6df37cc70c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::robot::PostureFunction</name>
    <filename>a01371.html</filename>
    <base>tvm::function::abstract::Function</base>
    <member kind="function">
      <type></type>
      <name>PostureFunction</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>aa210f6036aa38778df64ea6eb78f9819</anchor>
      <arglist>(RobotPtr robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a3ec0c03915e67ce498965f7e9af1a0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a5d6e83625186b9bc577872e9f2a9944f</anchor>
      <arglist>(const std::string &amp;j, const std::vector&lt; double &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>posture</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a011bb38a71229800f6cfb8a4d2084331</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; double &gt;&gt; &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateValue</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>acb4b1c6f39e4627b1ac7c14dfcef15cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelocity</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>aff6fc65cdac8fc7b45ea190de05df800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RobotPtr</type>
      <name>robot_</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a1bfe636c3d72fc3aab6d19f23d593afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>posture_</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a5ed6f766d06e9dd939bacff7c1c02449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>j0_</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>aba5265bfc9ede51c2b3460c0e01ae87e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::PriorityLevelBase</name>
    <filename>a01279.html</filename>
    <templarg>Lightweight</templarg>
    <base>SingleSolvingRequirement&lt; int, Lightweight &gt;</base>
    <member kind="function">
      <type></type>
      <name>PriorityLevelBase</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>af8fc070e60fc796ff47650f51ada4177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorityLevelBase</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>ac8281f8eaa2f4ffb1c365646fc10b370</anchor>
      <arglist>(int p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ProblemComputationData</name>
    <filename>a01575.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProblemComputationData</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ae25cf5d3b44a97562d04ce2945404509</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solverId</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ae81e44f0373c64c02ab4aa0bb4e7bd61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVariable</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>aa3fb6b078098e20cb4fa51de26d75d46</anchor>
      <arglist>(VariablePtr var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVariable</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a7f77e4f6bbc76a6df63d5f420c3765d5</anchor>
      <arglist>(const VariableVector &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVariable</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a9d29629c9ce08ba2ed1059ad0a41aeec</anchor>
      <arglist>(Variable *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVariable</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a14ebde29b15f2b4ca8f8bcf176d246ad</anchor>
      <arglist>(const VariableVector &amp;vars)</arglist>
    </member>
    <member kind="function">
      <type>const VariableVector &amp;</type>
      <name>variables</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a58cbf3db7ca4b701751e3737ae2348f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVariablesToSolution</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a7a12195f4bfcdce9297da51364f50892</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEvent</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a13844b89e570800dbc657bd8ce2505b9</anchor>
      <arglist>(const ProblemDefinitionEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>ProblemDefinitionEvent</type>
      <name>popEvent</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a4f64bb80e0b42dafa4fc6e5a022f34a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEvents</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>aba12e428a82870bfd1922c1a51fd8313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemComputationData</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ab5ba42c5270fb93ffddaee562c02cc73</anchor>
      <arglist>(int solverId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemComputationData</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a72b037eaff3c68715bad7d22eeff6a2d</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setVariablesToSolution_</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a32eea38f2dce8263ba1661a2570e73fd</anchor>
      <arglist>(VariableVector &amp;x)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableVector</type>
      <name>x_</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a1a4f25982df27bbf939afe9377704ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; ProblemDefinitionEvent &gt;</type>
      <name>events_</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>afae2058692ecd15d9583e4eab0786886</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ProblemDefinitionEvent</name>
    <filename>a01579.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>add21aabf2172548b0cef1edf725bebb7</anchor>
      <arglist></arglist>
      <enumvalue file="a01579.html" anchor="add21aabf2172548b0cef1edf725bebb7a41924119a07fa5aa148829f2c240a2af">WeightChange</enumvalue>
      <enumvalue file="a01579.html" anchor="add21aabf2172548b0cef1edf725bebb7a5a108faae93ccced54796866ca9741cc">AnisotropicWeightChange</enumvalue>
      <enumvalue file="a01579.html" anchor="add21aabf2172548b0cef1edf725bebb7aa6799a77cc26fcb05546d9840af38e35">TaskAddition</enumvalue>
      <enumvalue file="a01579.html" anchor="add21aabf2172548b0cef1edf725bebb7afa2e45ca12d0da1e2ac88433424d2760">TaskRemoval</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>ProblemDefinitionEvent</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a95c0bc43978937032b99abbaece32f9b</anchor>
      <arglist>(Type type, TaskWithRequirements *emitter)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>ad6d62ed5e9d52e29029417570cdc3481</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TaskWithRequirements *</type>
      <name>emitter</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a37da7bd34e5cd5779dfbac43502e9359</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Proportional</name>
    <filename>a01715.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamics</base>
    <class kind="class">tvm::task_dynamics::Proportional::Impl</class>
    <member kind="typedef">
      <type>mpark::variant&lt; double, Eigen::VectorXd, Eigen::MatrixXd &gt;</type>
      <name>Gain</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>ab07b19a8764c8f30db69656dcbc9e9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proportional</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>ac0871e9c927f66d2ba860dbdc4e43c2e</anchor>
      <arglist>(double kp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proportional</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a864547b2a4a6a6da51ea4cb40ae1a7dc</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proportional</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a45c5ec3ca85c63ce7f094b1c4c6949d1</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Proportional</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>aa985834754c95d59194e584c089d96f3</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a36c06430efb0662c9ef87cbf7a06a4e7</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Order</type>
      <name>order_</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a510dcbb35e9c497fa50ec9d8ca80a19c</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::ProportionalDerivative</name>
    <filename>a01723.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamics</base>
    <class kind="class">tvm::task_dynamics::ProportionalDerivative::Impl</class>
    <member kind="typedef">
      <type>mpark::variant&lt; double, Eigen::VectorXd, Eigen::MatrixXd &gt;</type>
      <name>Gain</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a7f25d6570ea1203bcb84da3b62b101b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a30e1720a9d0f30828bec2799c9ed3701</anchor>
      <arglist>(double kp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a7d44f946ec9d3c52e4b9a163952e8f20</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>aded0ff4791dfb70251425f0173ca34a8</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a65d282a27174dd8b54e6130780c5403e</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a1d377fa8f2e0030b298e74706e3efc72</anchor>
      <arglist>(double kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a79f939c0606aba984f59e982f29cd89c</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>ac56de6b4cb46db6535ade715a5678c3e</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a620bbb6ab0d8ad2c13b373a7469ec71c</anchor>
      <arglist>(double kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>aa9bee348091060739e0531df678e6ce3</anchor>
      <arglist>(double kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>af34fca2ed02a44cd684201f967049d86</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a619a9647c17587e281eaaab4c998e9db</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a1715518cfe97dc10d06089c57b571a8f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a2434f3ad96d66f897e20a32cbbdb2dc0</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a9c0722648d496cca84e0152c1b062cd0</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Order</type>
      <name>order_</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a74adb4a1aef02b7fe9fbfd6738206a40</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a1d377fa8f2e0030b298e74706e3efc72</anchor>
      <arglist>(double kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a79f939c0606aba984f59e982f29cd89c</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>ac56de6b4cb46db6535ade715a5678c3e</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a620bbb6ab0d8ad2c13b373a7469ec71c</anchor>
      <arglist>(double kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>aa9bee348091060739e0531df678e6ce3</anchor>
      <arglist>(double kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>af34fca2ed02a44cd684201f967049d86</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a619a9647c17587e281eaaab4c998e9db</anchor>
      <arglist>(const Eigen::VectorXd &amp;kp, const Eigen::MatrixXd &amp;kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a1715518cfe97dc10d06089c57b571a8f</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, double kv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProportionalDerivative</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a2434f3ad96d66f897e20a32cbbdb2dc0</anchor>
      <arglist>(const Eigen::MatrixXd &amp;kp, const Eigen::VectorXd &amp;kv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::ProtoTaskCommon</name>
    <filename>a01807.html</filename>
    <templarg>T</templarg>
    <templarg>FunT</templarg>
    <member kind="function">
      <type></type>
      <name>ProtoTaskCommon</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>aa8bf3a509f038b6ba48f2c5ee2abc011</anchor>
      <arglist>(FunT f, const internal::RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtoTaskCommon</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>aa94880ba33e8b04608d8d1a16931b154</anchor>
      <arglist>(const ProtoTaskCommon&lt; T, FunU &gt; &amp;pt)</arglist>
    </member>
    <member kind="variable">
      <type>FunT</type>
      <name>f_</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a0411deca84f15523ba9526a2e14fb60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::RHS</type>
      <name>rhs_</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a81e8393cfe7557636d35ad0ca9c421ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::ProtoTaskCommon&lt; constraint::Type::DOUBLE_SIDED, FunT &gt;</name>
    <filename>a01811.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ProtoTaskCommon</name>
      <anchorfile>a01811.html</anchorfile>
      <anchor>a00b1a161738d55592b835881bdad34b8</anchor>
      <arglist>(FunT f, const internal::RHS &amp;l, const internal::RHS &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProtoTaskCommon</name>
      <anchorfile>a01811.html</anchorfile>
      <anchor>a92d5f6c5b95b576c4b2a4603f0cbbc55</anchor>
      <arglist>(const ProtoTaskCommon&lt; constraint::Type::DOUBLE_SIDED, FunU &gt; &amp;pt)</arglist>
    </member>
    <member kind="variable">
      <type>FunctionPtr</type>
      <name>f_</name>
      <anchorfile>a01811.html</anchorfile>
      <anchor>abdd96d45ab1d613985f22ad2af9625a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::RHS</type>
      <name>l_</name>
      <anchorfile>a01811.html</anchorfile>
      <anchor>a5b83ec1248006e1392dd960fe742c3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>internal::RHS</type>
      <name>u_</name>
      <anchorfile>a01811.html</anchorfile>
      <anchor>aaebf45ccc2046ddb00dec00d8086f8ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::QLDLeastSquareSolver</name>
    <filename>a01647.html</filename>
    <base>tvm::solver::abstract::LeastSquareSolver</base>
    <member kind="function">
      <type></type>
      <name>QLDLeastSquareSolver</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a161456ab65fc6de687cd8171877d9190</anchor>
      <arglist>(const QLDLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeBuild_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>abf7b4ddb6965711cefc654eb13d41eba</anchor>
      <arglist>(int nObj, int nEq, int nIneq, bool useBounds) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addBound_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a2a9c38f37a822486b609c657169c0642</anchor>
      <arglist>(LinearConstraintPtr bound, RangePtr range, bool first) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEqualityConstraint_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>ad3a8f7c680b7905ae19e3fa85299e374</anchor>
      <arglist>(LinearConstraintPtr cstr) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addIneqalityConstraint_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>abe32cdda8febe3c913f0aca14e497e63</anchor>
      <arglist>(LinearConstraintPtr cstr) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addObjective_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a060df26b1bf16ce7fd20d919a4127f2b</anchor>
      <arglist>(LinearConstraintPtr cstr, SolvingRequirementsPtr req, double additionalWeight) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMinimumNorm_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a4bd43c70c18f0ca23d35d899e33de97b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preAssignmentProcess_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a35492f419e0f95e62daff9fabb212774</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postAssignmentProcess_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>ad72c8cef7135647487542d70f00e4640</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>solve_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a3d71c9c033a737a145dc2147711d23f4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a29586cebe605b9d922fd1c8e0ac34311</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleDoubleSidedConstraint_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a06aeccab58a66f11881f276e3274580c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printProblemData_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a37e21a83fc3c7f150efe2b756fcdbe9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printDiagnostic_</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a838c09e6eba5fde9901259644bb0724d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::QLDLSSolverFactory</name>
    <filename>a01651.html</filename>
    <base>tvm::solver::abstract::LSSolverFactory</base>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LSSolverFactory &gt;</type>
      <name>clone</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a54daecdbd121b208dad45d5c838865ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QLDLSSolverFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ac0e503764cb83c5e285d14a3437c675b</anchor>
      <arglist>(const QLDLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LeastSquareSolver &gt;</type>
      <name>createSolver</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>afaf1697b4e884815baa656f5a3e0e4d0</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::QLDLSSolverOptions</name>
    <filename>a01643.html</filename>
    <member kind="typedef">
      <type>QLDLSSolverFactory</type>
      <name>Factory</name>
      <anchorfile>a01643.html</anchorfile>
      <anchor>a2b97c5ac51268424cd983302b43b6b10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::QuadprogLeastSquareSolver</name>
    <filename>a01659.html</filename>
    <base>tvm::solver::abstract::LeastSquareSolver</base>
    <member kind="function">
      <type></type>
      <name>QuadprogLeastSquareSolver</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a8a5cbdf8002d2811fb2390249a6831a0</anchor>
      <arglist>(const QuadprogLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeBuild_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a30119b50b9a72aacc50cb48bfd764426</anchor>
      <arglist>(int nObj, int nEq, int nIneq, bool useBounds) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addBound_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a7436fcc59267090ebae577b0f6f7f288</anchor>
      <arglist>(LinearConstraintPtr bound, RangePtr range, bool first) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addEqualityConstraint_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a617397f4d7eac2741ba9e5e58ec7c78e</anchor>
      <arglist>(LinearConstraintPtr cstr) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addIneqalityConstraint_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>ad9974cdbc859ffbdf4085ae87b5e0b84</anchor>
      <arglist>(LinearConstraintPtr cstr) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addObjective_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>aa959599bfb3083fff47919848abda7f5</anchor>
      <arglist>(LinearConstraintPtr cstr, SolvingRequirementsPtr req, double additionalWeight) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMinimumNorm_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>ad7e24ba40b469ee1ee5ba09a8e299628</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>preAssignmentProcess_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a1957014fe536158c429ba51abdbd1e18</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postAssignmentProcess_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a11e65e2f444e06d3756417fc9b03f724</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>solve_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a7f7456b61d65d086a79180f6ec85ca9b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const Eigen::VectorXd &amp;</type>
      <name>result_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>ab834c8b628203c03296a9dfcc20f37b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>handleDoubleSidedConstraint_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>adf1f9c2f0df7352aac01267a4565bf16</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printProblemData_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>a7217cc0e4ac407694cdf20ae86c2773a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printDiagnostic_</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>af1b280b8407f3559a499f63ad835b84a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::QuadprogLSSolverFactory</name>
    <filename>a01663.html</filename>
    <base>tvm::solver::abstract::LSSolverFactory</base>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LSSolverFactory &gt;</type>
      <name>clone</name>
      <anchorfile>a01663.html</anchorfile>
      <anchor>a7d11f82ebe54a9fa18a5e3df579f8e76</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuadprogLSSolverFactory</name>
      <anchorfile>a01663.html</anchorfile>
      <anchor>a6cc16212339951cc4c696ed563ebb900</anchor>
      <arglist>(const QuadprogLSSolverOptions &amp;options={})</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; abstract::LeastSquareSolver &gt;</type>
      <name>createSolver</name>
      <anchorfile>a01663.html</anchorfile>
      <anchor>ad1c07fab0f65837df1134da9bc2293f8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::solver::QuadprogLSSolverOptions</name>
    <filename>a01655.html</filename>
    <member kind="typedef">
      <type>QuadprogLSSolverFactory</type>
      <name>Factory</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>a193c5e72d6d0e377e13da0c8240dd3ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::Range</name>
    <filename>a01267.html</filename>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a6ac34b69de245b88f01a3268855ef748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Range</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a1341354e4e7e37e91a25a057ebc86da7</anchor>
      <arglist>(int s, int d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a9580601c7733542244bf2be8c2d2272d</anchor>
      <arglist>(const Range &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>aa59f647c90c329982d3ae8c58696b3bc</anchor>
      <arglist>(const Range &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>start</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>aa0734c5492110755bac0ff7a7346bcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a252127b997a5428dff3735f52f48313d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::Reference</name>
    <filename>a01731.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamics</base>
    <class kind="class">tvm::task_dynamics::Reference::Impl</class>
    <member kind="function">
      <type></type>
      <name>Reference</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>a6e040ff17b6792a2981632ef0d0b8e0a</anchor>
      <arglist>(Order order, const FunctionPtr &amp;ref)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Reference</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>adafe4dc92bc399211d15dd6caef498da</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>ab8045f3656cac54d86d094ebbecd3e7d</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Order</type>
      <name>order_</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>a265d9adb6b99ae2bebcfb68f79b7f530</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::ReferenceAcceleration</name>
    <filename>a01743.html</filename>
    <base>tvm::task_dynamics::Reference</base>
    <member kind="function">
      <type></type>
      <name>ReferenceAcceleration</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>a562c8db40fba1ce58b150de09e201971</anchor>
      <arglist>(const FunctionPtr &amp;ref)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::ReferenceVelocity</name>
    <filename>a01739.html</filename>
    <base>tvm::task_dynamics::Reference</base>
    <member kind="function">
      <type></type>
      <name>ReferenceVelocity</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>a72b5e2d77995d28c6f2167aada139334</anchor>
      <arglist>(const FunctionPtr &amp;ref)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::utils::internal::RefSelector</name>
    <filename>a01783.html</filename>
    <templarg>Derived</templarg>
    <member kind="typedef">
      <type>typename Eigen::internal::ref_selector&lt; Derived &gt;::type</type>
      <name>type</name>
      <anchorfile>a01783.html</anchorfile>
      <anchor>a81f162d9b69e6f335fbcdd643ea2d693</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::utils::internal::RefSelector&lt; NoConstant &gt;</name>
    <filename>a01787.html</filename>
    <member kind="typedef">
      <type>NoConstant</type>
      <name>type</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>aaddf7b73ef3be6c348b9c3f85fb5772c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::abstract::ResolutionScheme</name>
    <filename>a01379.html</filename>
    <templarg>Derived</templarg>
    <base>tvm::scheme::internal::ResolutionSchemeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a73c637baa1e013c38687115fdfae7904</anchor>
      <arglist>(Problem &amp;problem) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; internal::ProblemComputationData &gt;</type>
      <name>createComputationData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a972d606a5d3e0920049d156d3ad8dd44</anchor>
      <arglist>(const Problem &amp;problem) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a136b3f1492abc048598b23aac81942d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>afe1e5a187ad7fe380b331839269c65d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResolutionScheme</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aa9b9a4143fbff4f5654731c92333ce9b</anchor>
      <arglist>(internal::SchemeAbilities abilities, double big=constant::big_number)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ResolutionScheme&lt; WeightedLeastSquares &gt;</name>
    <filename>a01379.html</filename>
    <base>tvm::scheme::internal::ResolutionSchemeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a73c637baa1e013c38687115fdfae7904</anchor>
      <arglist>(Problem &amp;problem) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; internal::ProblemComputationData &gt;</type>
      <name>createComputationData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a972d606a5d3e0920049d156d3ad8dd44</anchor>
      <arglist>(const Problem &amp;problem) const</arglist>
    </member>
    <member kind="function">
      <type>WeightedLeastSquares &amp;</type>
      <name>derived</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a136b3f1492abc048598b23aac81942d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WeightedLeastSquares &amp;</type>
      <name>derived</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>afe1e5a187ad7fe380b331839269c65d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResolutionScheme</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aa9b9a4143fbff4f5654731c92333ce9b</anchor>
      <arglist>(internal::SchemeAbilities abilities, double big=constant::big_number)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::ResolutionSchemeBase</name>
    <filename>a01583.html</filename>
    <base>tvm::internal::ObjWithId</base>
    <member kind="function">
      <type>double</type>
      <name>big_number</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a69ceec7e83fd0d65311b7dded6e38671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>big_number</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>ad90acf5e20b8b1c9759a6491b7b83ff6</anchor>
      <arglist>(double big)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ResolutionSchemeBase</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>aefb80f832f4441e510feb64dbcf56ffd</anchor>
      <arglist>(SchemeAbilities abilities, double big=constant::big_number)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SchemeAbilities</type>
      <name>abilities_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>adcf8dff7e4b436825a1502a60b616cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>big_number_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>ae80cba12e377a8574bbff19a005b94a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::internal::RHS</name>
    <filename>a01803.html</filename>
    <member kind="function">
      <type></type>
      <name>RHS</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a057a959f6439cae968f0b45a1fb59d6f</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RHS</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a2967e9355eed07d152608ee2ee71b142</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd</type>
      <name>toVector</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a9136abba7f04fa204feec7e590bf665f</anchor>
      <arglist>(Eigen::DenseIndex n) const</arglist>
    </member>
    <member kind="variable">
      <type>RHSType</type>
      <name>type_</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>aae64a2bdbfd69ec4dbec7d18755c818b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a78efc92c28c7276d73d64e8f65468823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Eigen::VectorXd</type>
      <name>v_</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a1bca6d304fa98feac4dcc4bdae33354f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::constraint::internal::RHSVectors</name>
    <filename>a00971.html</filename>
    <member kind="function">
      <type></type>
      <name>RHSVectors</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a0a4a3626e4969845d26137ecf00ceeb4</anchor>
      <arglist>(Type ct, RHS cr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a63516b436dd8a8e25c71e0d3cf08a463</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>l</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a4a7dfedce2b0af796effbd0a0002bc4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>l</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a5887986365d5d9cbf60940fa5f685faf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>u</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>adc2951c16457b43f892d294b13358223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>u</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a4a95acec8c4e95f9d1bba897e3217da6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>e</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a44fd2f2268827789216a5a351129e5b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>e</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a1806185352412636cf6b2dc2ebe90022</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>rhs</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a9fd6fe9d62d066f8db32f695f9c758be</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>rhs</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a7f01e69c870ed94d3fa89a0fb9d94d69</anchor>
      <arglist>(Type t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_l</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a36dedd4f966d9076b3454d2bcaad283b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_u</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a83cc16b697a43b562e9bf89b01ab59d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use_e</name>
      <anchorfile>a00971.html</anchorfile>
      <anchor>a0ed3b9422f6b8f6e3625c0956f5ea848</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::Robot</name>
    <filename>a01375.html</filename>
    <base>Node&lt; Robot &gt;</base>
    <member kind="function">
      <type></type>
      <name>Robot</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ad2bf2e0ca3c6e492c4df0e10ab94a342</anchor>
      <arglist>(Clock &amp;clock, const std::string &amp;name, rbd::MultiBodyGraph &amp;mbg, rbd::MultiBody mb, rbd::MultiBodyConfig mbc, const rbd::parsers::Limits &amp;limits={{},{},{},{}})</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ae626a4c93e130c8f728a88c9784b3ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mass</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>aac36ab193f2d533130dc33daa816d35b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariableVector &amp;</type>
      <name>q</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ab1e9a931383d7d9c6f3ab89800102c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariableVector &amp;</type>
      <name>q</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a4e8726a979baab49f6dcc6e1744f8406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VariablePtr &amp;</type>
      <name>qFreeFlyer</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a64691afca2a00f1e1afe26742803f7bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr &amp;</type>
      <name>qFreeFlyer</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>aebbd5abff07e8e7bf8b5f2ba924b06fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VariablePtr &amp;</type>
      <name>qJoints</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a5ed09fbb014009fd826527a430db37c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr &amp;</type>
      <name>qJoints</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>aced0dbf0215b5367f5c8ec0ce85fa694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VariablePtr &amp;</type>
      <name>tau</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a46d251c77a1382d17a10f13b364f3c02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr &amp;</type>
      <name>tau</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a8b65ccdf6d05c34cc24f405b6ed5b99f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ac372f0bcefd2263fd2bb2bf13a4559b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBody &amp;</type>
      <name>mb</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a00ac99ab0d7a0bdbf79b8e6d5b281a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>acfe90640af7ddc39c9f2cfd0ff5b1b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rbd::MultiBodyConfig &amp;</type>
      <name>mbc</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a44ed6ad1537057db552f8dd9f2a85ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a58cb743d5fde666eb98a8b2f7d7b781c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; sva::MotionVecd &gt; &amp;</type>
      <name>normalAccB</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a9c77f287a481ed47eee0fa85dd75abfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>lQBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a056dd0be4b10ef2a35760100a2ee7f7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>lQBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a09a42da48cebaa8e51794e3af6b9d2a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>uQBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a57e68ad7f29273d03f822123d31abfb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>uQBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a4e661897d3b93d559e0e5325442a2dfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>lVelBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a3c0015be7272306da0f69861e959acf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>lVelBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a1879757837b6f71adb2639f8525a4189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>uVelBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a05697d7bfbca4f0aa67a857bc6bcd764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>uVelBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ad464236a0b6acb8d8183caa86ab7eaf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>lTauBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ad8ff2cdee502fa8b34b14b94fc2f31e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>lTauBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a386b08dd3bf3d9fe319061b15f3794af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>uTauBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a7d0328f7cdacdbc5dbb66e05c0a922bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::VectorXd &amp;</type>
      <name>uTauBound</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a48d5f6c161d5e7db67c097494f8c54bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>H</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a482747ba5d6f2816f365950b9837df0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>C</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>a5bee0bc9884664793305f13974011d00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Vector3d &amp;</type>
      <name>com</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ac8cb56d567b017f10cf0ea9938e7375d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sva::PTransformd &amp;</type>
      <name>bodyTransform</name>
      <anchorfile>a01375.html</anchorfile>
      <anchor>ae737814e27817c0336446e3a5951c7c0</anchor>
      <arglist>(const std::string &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::SchemeAbilities</name>
    <filename>a01591.html</filename>
    <member kind="function">
      <type></type>
      <name>SchemeAbilities</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>ab61249256197b2b931e1972ed6b050f6</anchor>
      <arglist>(int numberOfLevels, const std::map&lt; int, LevelAbilities &gt; &amp;abilities, bool scalarization=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a697c0b2a93af995e3f6f43b9aeb15908</anchor>
      <arglist>(const ConstraintPtr &amp;c, const SolvingRequirementsPtr &amp;req, bool emitWarnings=true) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::abstract::SelectorMembers</name>
    <filename>a01059.html</filename>
    <templarg>add</templarg>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>dynamicallyEnabled_</name>
      <anchorfile>a01059.html</anchorfile>
      <anchor>afb9aaff5b2ec6d854da3c825e1896198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>a01059.html</anchorfile>
      <anchor>a0c9eb868c9839d51c75cc7206c94edcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::abstract::SelectorMembers&lt; false &gt;</name>
    <filename>a01063.html</filename>
  </compound>
  <compound kind="class">
    <name>SelectorMembers&lt;!is_output_selector&lt; Base &gt;()&gt;</name>
    <filename>a01059.html</filename>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>dynamicallyEnabled_</name>
      <anchorfile>a01059.html</anchorfile>
      <anchor>afb9aaff5b2ec6d854da3c825e1896198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>a01059.html</anchorfile>
      <anchor>a0c9eb868c9839d51c75cc7206c94edcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelectorMembers&lt;!is_output_selector&lt; tvm::internal::FirstOrderProvider &gt;()&gt;</name>
    <filename>a01059.html</filename>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>dynamicallyEnabled_</name>
      <anchorfile>a01059.html</anchorfile>
      <anchor>afb9aaff5b2ec6d854da3c825e1896198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>locked_</name>
      <anchorfile>a01059.html</anchorfile>
      <anchor>a0c9eb868c9839d51c75cc7206c94edcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::abstract::SingleSolvingRequirement</name>
    <filename>a01271.html</filename>
    <templarg>T</templarg>
    <templarg>Lightweight</templarg>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a2a061aa7a18a12dfb3b1adfba3fd4370</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a89e054cc4c4fe0d530e4c6f2ab7e15d2</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefault</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1f68f343f338d7379954b34af515f074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1ee8cde93fc0d43fc81bcdbc76dd651f</anchor>
      <arglist>(const T &amp;val, bool isDefault)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>abb02949df757b7a2d5a84b456072437b</anchor>
      <arglist>(const SingleSolvingRequirement&lt; T, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a3956323ea98086c619c2ca26dc1c036c</anchor>
      <arglist>(const SingleSolvingRequirement&lt; T, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a951d90158ed3b6ebe869fb024e8696cb</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>default_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>aa0e2367a4d7aa5d7f9bf67832a9ca067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>value_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a56d5f516e85a437941b0ac9584421966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleSolvingRequirement&lt; double, Lightweight &gt;</name>
    <filename>a01271.html</filename>
    <member kind="function">
      <type>const double &amp;</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a2a061aa7a18a12dfb3b1adfba3fd4370</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a89e054cc4c4fe0d530e4c6f2ab7e15d2</anchor>
      <arglist>(const double &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefault</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1f68f343f338d7379954b34af515f074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1ee8cde93fc0d43fc81bcdbc76dd651f</anchor>
      <arglist>(const double &amp;val, bool isDefault)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>abb02949df757b7a2d5a84b456072437b</anchor>
      <arglist>(const SingleSolvingRequirement&lt; double, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a3956323ea98086c619c2ca26dc1c036c</anchor>
      <arglist>(const SingleSolvingRequirement&lt; double, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a951d90158ed3b6ebe869fb024e8696cb</anchor>
      <arglist>(const double &amp;val)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>default_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>aa0e2367a4d7aa5d7f9bf67832a9ca067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>value_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a56d5f516e85a437941b0ac9584421966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleSolvingRequirement&lt; Eigen::VectorXd, Lightweight &gt;</name>
    <filename>a01271.html</filename>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a2a061aa7a18a12dfb3b1adfba3fd4370</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a89e054cc4c4fe0d530e4c6f2ab7e15d2</anchor>
      <arglist>(const Eigen::VectorXd &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefault</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1f68f343f338d7379954b34af515f074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1ee8cde93fc0d43fc81bcdbc76dd651f</anchor>
      <arglist>(const Eigen::VectorXd &amp;val, bool isDefault)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>abb02949df757b7a2d5a84b456072437b</anchor>
      <arglist>(const SingleSolvingRequirement&lt; Eigen::VectorXd, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a3956323ea98086c619c2ca26dc1c036c</anchor>
      <arglist>(const SingleSolvingRequirement&lt; Eigen::VectorXd, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a951d90158ed3b6ebe869fb024e8696cb</anchor>
      <arglist>(const Eigen::VectorXd &amp;val)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>default_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>aa0e2367a4d7aa5d7f9bf67832a9ca067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>value_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a56d5f516e85a437941b0ac9584421966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleSolvingRequirement&lt; int, Lightweight &gt;</name>
    <filename>a01271.html</filename>
    <member kind="function">
      <type>const int &amp;</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a2a061aa7a18a12dfb3b1adfba3fd4370</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a89e054cc4c4fe0d530e4c6f2ab7e15d2</anchor>
      <arglist>(const int &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefault</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1f68f343f338d7379954b34af515f074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1ee8cde93fc0d43fc81bcdbc76dd651f</anchor>
      <arglist>(const int &amp;val, bool isDefault)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>abb02949df757b7a2d5a84b456072437b</anchor>
      <arglist>(const SingleSolvingRequirement&lt; int, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a3956323ea98086c619c2ca26dc1c036c</anchor>
      <arglist>(const SingleSolvingRequirement&lt; int, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a951d90158ed3b6ebe869fb024e8696cb</anchor>
      <arglist>(const int &amp;val)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>default_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>aa0e2367a4d7aa5d7f9bf67832a9ca067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>value_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a56d5f516e85a437941b0ac9584421966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleSolvingRequirement&lt; ViolationEvaluationType, Lightweight &gt;</name>
    <filename>a01271.html</filename>
    <member kind="function">
      <type>const ViolationEvaluationType &amp;</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a2a061aa7a18a12dfb3b1adfba3fd4370</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a89e054cc4c4fe0d530e4c6f2ab7e15d2</anchor>
      <arglist>(const ViolationEvaluationType &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefault</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1f68f343f338d7379954b34af515f074</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a1ee8cde93fc0d43fc81bcdbc76dd651f</anchor>
      <arglist>(const ViolationEvaluationType &amp;val, bool isDefault)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SingleSolvingRequirement</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>abb02949df757b7a2d5a84b456072437b</anchor>
      <arglist>(const SingleSolvingRequirement&lt; ViolationEvaluationType, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a3956323ea98086c619c2ca26dc1c036c</anchor>
      <arglist>(const SingleSolvingRequirement&lt; ViolationEvaluationType, !Lightweight &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SingleSolvingRequirement &amp;</type>
      <name>operator=</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a951d90158ed3b6ebe869fb024e8696cb</anchor>
      <arglist>(const ViolationEvaluationType &amp;val)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>default_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>aa0e2367a4d7aa5d7f9bf67832a9ca067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViolationEvaluationType</type>
      <name>value_</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a56d5f516e85a437941b0ac9584421966</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::SolvingRequirements</name>
    <filename>a01287.html</filename>
    <base>SolvingRequirementsBase&lt; true &gt;</base>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::SolvingRequirementsBase</name>
    <filename>a01283.html</filename>
    <templarg>Lightweight</templarg>
    <member kind="function">
      <type></type>
      <name>SolvingRequirementsBase</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>abfe7d7f5a1b2112ef96501717d274440</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SolvingRequirementsBase&lt; false &gt;</name>
    <filename>a01283.html</filename>
    <member kind="function">
      <type></type>
      <name>SolvingRequirementsBase</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>abfe7d7f5a1b2112ef96501717d274440</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SolvingRequirementsBase&lt; true &gt;</name>
    <filename>a01283.html</filename>
    <member kind="function">
      <type></type>
      <name>SolvingRequirementsBase</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>abfe7d7f5a1b2112ef96501717d274440</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::SolvingRequirementsWithCallbacks</name>
    <filename>a01291.html</filename>
    <base>SolvingRequirementsBase&lt; false &gt;</base>
    <member kind="function">
      <type></type>
      <name>SolvingRequirementsWithCallbacks</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a0160fd441c53abad2531176a707b93d1</anchor>
      <arglist>(const SolvingRequirementsWithCallbacks &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>SolvingRequirementsWithCallbacks &amp;</type>
      <name>operator=</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>af253ea3a400f97f5b9507c6caf3af230</anchor>
      <arglist>(const SolvingRequirementsWithCallbacks &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolvingRequirementsWithCallbacks</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aaf9f06b060cdafc6d41e801cdf143e5c</anchor>
      <arglist>(const SolvingRequirements &amp;req)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::event::Source</name>
    <filename>a00991.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Source</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a3b5024e8bea7835c8ba6ac488a494695</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>regist</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>af30d2125a4a6bf1ffc3cafdf7d865b19</anchor>
      <arglist>(std::shared_ptr&lt; Listener &gt; user, Type evt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>a00991.html</anchorfile>
      <anchor>a18ebdae0bde7db6a3ad883a5d60ec843</anchor>
      <arglist>(Type evt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::SourceBase</name>
    <filename>a01543.html</filename>
    <templarg></templarg>
    <templarg>F</templarg>
    <member kind="typedef">
      <type>typename std::conditional&lt; F==CONSTANT, double, Eigen::Ref&lt; const MatrixType &gt; &gt;::type</type>
      <name>SourceType</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>abdba30070c33b048825cd51e6aee6a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SourceBase</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>a554b96ce4db16ccaf30195c866ea1dc2</anchor>
      <arglist>(const SourceType &amp;from)</arglist>
    </member>
    <member kind="function">
      <type>const SourceType &amp;</type>
      <name>from</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>a2629254e33031a6a56112e1208b96a31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>from</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>a967d6c3947961a3085876ea0463b7a04</anchor>
      <arglist>(const SourceType &amp;from)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::SourceBase&lt; MatrixType, ZERO &gt;</name>
    <filename>a01547.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>tvm::Space</name>
    <filename>a01667.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>afed52b615be4ddd3ef124f791460f7e0</anchor>
      <arglist></arglist>
      <enumvalue file="a01667.html" anchor="afed52b615be4ddd3ef124f791460f7e0a3e43207685247008d9e1ae53ecf8cab3">Euclidean</enumvalue>
      <enumvalue file="a01667.html" anchor="afed52b615be4ddd3ef124f791460f7e0a954c8ed8efbceb3a1b9495e4a1acf3a0">SO3</enumvalue>
      <enumvalue file="a01667.html" anchor="afed52b615be4ddd3ef124f791460f7e0af011f2d250cf1ccf9b7f39e9f2ff3c2b">SE3</enumvalue>
      <enumvalue file="a01667.html" anchor="afed52b615be4ddd3ef124f791460f7e0a6fcdc090caeade09d0efd6253932b6f5">Unspecified</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Space</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>ac4b192406e699cc657b0a34d5f236ba4</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Space</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>a9ff75186b5b439819ec201be5c5f4b39</anchor>
      <arglist>(int size, int representationSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Space</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>a99ad058c2c07a10b72a539e829fa4b50</anchor>
      <arglist>(int size, int representationSize, int tangentRepresentationSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Space</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>af455f0e3a88391cb32a97ccc67d4d12a</anchor>
      <arglist>(Type type, int size=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Variable &gt;</type>
      <name>createVariable</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>a9410ecc4cb207ec8e65edaf61990e84e</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>a52d03cec25b4951255300be1925049f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rSize</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>ac5889d55dbe021af7edcc4d728e9c35e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tSize</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>ad182eecc9fce96331b8038a9bc8a0626</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>ab9ac5699b5f3c5e65f85f4edd0125095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEuclidean</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>af45239f58ccd885d0a939084b125c979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>aee25e1bfd33fac77fd95b79bbfc761b6</anchor>
      <arglist>(const Space &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01667.html</anchorfile>
      <anchor>acddae3eb32a5bda913b0b9804e474e2b</anchor>
      <arglist>(const Space &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::Substitution</name>
    <filename>a01195.html</filename>
    <member kind="function">
      <type></type>
      <name>Substitution</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a55194c52b4053da3ce1e2ee6e5d78be8</anchor>
      <arglist>(LinearConstraintPtr cstr, VariablePtr x, int rank=constant::fullRank, const abstract::SubstitutionCalculator &amp;calc=internal::AutoCalculator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Substitution</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a8da60f444b20f358d9280a2027067757</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, VariablePtr x, int rank=constant::fullRank, const abstract::SubstitutionCalculator &amp;calc=internal::AutoCalculator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Substitution</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>af90e547fb92f2ad2619118d5b9211e33</anchor>
      <arglist>(LinearConstraintPtr cstr, std::vector&lt; VariablePtr &gt; &amp;x, int rank=constant::fullRank, const abstract::SubstitutionCalculator &amp;calc=internal::AutoCalculator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Substitution</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a4b7fae6c328d639e872226ea4f809c11</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank=constant::fullRank, const abstract::SubstitutionCalculator &amp;calc=internal::AutoCalculator())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a0f3eacd65b9c7b82698f96ee16de510b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>m</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a881f8ab3e4ee31f531957520187f0ee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; LinearConstraintPtr &gt; &amp;</type>
      <name>constraints</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>afb474e8d04c2e8031aa01edf5e0e74c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a352a4cddee84363876e25b090a8fe332</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimple</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>a207f2a8aaf6602a01ca212d0d9670162</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; abstract::SubstitutionCalculatorImpl &gt;</type>
      <name>calculator</name>
      <anchorfile>a01195.html</anchorfile>
      <anchor>af7b56ba247a30f5709faca2a380b50e0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::abstract::SubstitutionCalculator</name>
    <filename>a01155.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubstitutionCalculator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af186679977817b9c2bdc72d1128a0186</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; SubstitutionCalculatorImpl &gt;</type>
      <name>impl</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5dcdf7a18751233abb8bb85ff8be225f</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::unique_ptr&lt; SubstitutionCalculatorImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa1544ef161969cbd72c1cdb186046165</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::abstract::SubstitutionCalculatorImpl</name>
    <filename>a01159.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubstitutionCalculatorImpl</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a254a28c51c7721b8538dff607fc6c76f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a9b3f1027103b8e2dab510eeedaae6542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>premultiplyByASharpAndSTranspose</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a032b040825d5827e0bf23e614bde0b24</anchor>
      <arglist>(MatrixRef outA, MatrixRef outS, const MatrixConstRef &amp;in, bool minus) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postMultiplyByN</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>af61e705c79429e34d31304acf33ebd6d</anchor>
      <arglist>(MatrixRef out, const MatrixConstRef &amp;in, bool add=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postMultiplyByN</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a0a6ecc1f1bf8418fa3adc69c1ef88bae</anchor>
      <arglist>(MatrixRef out, const MatrixConstRef &amp;in, Range r, bool add=false) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>N</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a4650987880575ea323038e3a7de4bf9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>m</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>aac6e6321e067d84ce8c2960b254aefa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>n</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a89f78e6f92de7425d42a13fef25a1759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::DenseIndex</type>
      <name>r</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>aaff150bc0554f84b570a3f0cc1f7d07b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SubstitutionCalculatorImpl</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>add58af7008f1052793b4e47f3c8b07b9</anchor>
      <arglist>(const std::vector&lt; LinearConstraintPtr &gt; &amp;cstr, const std::vector&lt; VariablePtr &gt; &amp;x, int rank)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constant</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a8a21d77a7c86d327c60b8e85952e55f7</anchor>
      <arglist>(bool c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>constant</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ac4922e0eb5abfa1c74337ac87e8392da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>A</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a02060e824b93abc03d0f800592b9633b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isSimple</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a42a04b887506e1435e88f30ea1194a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>update_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a97f87d4f36604e55752c648ab1663069</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>premultiplyByASharpAndSTranspose_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ab08f8832118ffb4dbbe481ae2b35c6a0</anchor>
      <arglist>(MatrixRef outA, MatrixRef outS, const MatrixConstRef &amp;in, bool minus) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postMultiplyByN_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ae1f2154e019a2a63e610f9d855582ace</anchor>
      <arglist>(MatrixRef out, const MatrixConstRef &amp;in, bool add) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postMultiplyByN_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>acb2e5f0a604959e78c531cc910f49f3b</anchor>
      <arglist>(MatrixRef out, const MatrixConstRef &amp;in, Range r, bool add) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillA</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>aca77fe3987263fa96fc49628cbeca6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::MatrixXd</type>
      <name>N_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ac9bb9fd150fb555a9e56b4e197784dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; LinearConstraintPtr &gt;</type>
      <name>constraints_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a0739d1398ecafa28df5472d506c1b28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableVector</type>
      <name>variables_</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>af0ecd7a6897eed9a01c05265a274b96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SubstitutionCalculator</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>abcfe821e69133545a81b319678a50452</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::Substitutions</name>
    <filename>a01187.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>ab9f62bebef62a6ecfb7f831b32be68fb</anchor>
      <arglist>(const Substitution &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Substitution &gt; &amp;</type>
      <name>substitutions</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>ad02bc0e7015af0667337d2eca808e502</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uses</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a26b6e6f84c6158a13a224c408f14b936</anchor>
      <arglist>(LinearConstraintPtr c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>aaa68e21a8db2bda962014d0538981cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateSubstitutions</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a1a68ccb341ba660a11686a52ff3bf8e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateVariableValues</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>aca7c087fa2574d55fc0316bccb298be5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a89ff64d5e30e52178df9fcb1c7fc34e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; function::BasicLinearFunction &gt; &gt; &amp;</type>
      <name>variableSubstitutions</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a152e0a255259e3cb0d74e8a57030b703</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>additionalVariables</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>ac6aeb3867493231a19666ac12286cb63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; constraint::BasicLinearConstraint &gt; &gt; &amp;</type>
      <name>additionalConstraints</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a091bdd86f0ac4b0afe8c0a2c3160d6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>otherVariables</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>ae1d5d3b03510c23349768d720acdc493</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariableVector</type>
      <name>substitute</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>abce057acc7ae8f623343806ef23e9cf7</anchor>
      <arglist>(const VariablePtr &amp;x) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SubstitutionTest</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a4160bc50624e625eaf71df39627374ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::hint::internal::SubstitutionUnit</name>
    <filename>a01191.html</filename>
    <member kind="function">
      <type></type>
      <name>SubstitutionUnit</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>ae3b3f4e26825b2cd0aa2af959a75ba89</anchor>
      <arglist>(const std::vector&lt; Substitution &gt; &amp;substitutionPool, const std::vector&lt; std::vector&lt; size_t &gt;&gt; &amp;groups, const std::vector&lt; size_t &gt; order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a4f76bc4ad1e3503c4ba2f9a2b7c73446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a4a179db7e292f425bcd141e0b0014917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; function::BasicLinearFunction &gt; &gt; &amp;</type>
      <name>variableSubstitutions</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>ab6b653e57bbc0508f0ad9dc3b6aa80bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>additionalVariables</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>aabb61f691b559ea9674d20e990b924cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::shared_ptr&lt; constraint::BasicLinearConstraint &gt; &gt; &amp;</type>
      <name>additionalConstraints</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a614ad27d169c6292c930f0e61c7fb2aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>otherVariables</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>aba0b2517e42d54290995f3d49736d148</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::Task</name>
    <filename>a01671.html</filename>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a62319f0d77dd668d37986a84f28ffeb9</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const task_dynamics::abstract::TaskDynamics &amp;td)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a3c205c3debdc1bf7fffe4b71953c6d08</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const task_dynamics::abstract::TaskDynamics &amp;td, double rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a69fcbaeb6cef4b2a65717af4c0af7cd5</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const task_dynamics::abstract::TaskDynamics &amp;td, const Eigen::VectorXd &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a8020daba7b34a8e826f7e3e661c04e87</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const task_dynamics::abstract::TaskDynamics &amp;td, double l, double u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a910fe671a0e840f90d6c3b6e8d402c34</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const task_dynamics::abstract::TaskDynamics &amp;td, const Eigen::VectorXd &amp;l, const Eigen::VectorXd &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>ada7c25b8714773214ce2c405e80a7064</anchor>
      <arglist>(utils::ProtoTaskEQ proto, const task_dynamics::abstract::TaskDynamics &amp;td)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>ad2b8e26f3aa8f1e62cf31acf538010ae</anchor>
      <arglist>(utils::ProtoTaskLT proto, const task_dynamics::abstract::TaskDynamics &amp;td)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a38e938cb5f5d346cd0da5401a8214fe8</anchor>
      <arglist>(utils::ProtoTaskGT proto, const task_dynamics::abstract::TaskDynamics &amp;td)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Task</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>ab978abb00483e251f7c35d222e50e516</anchor>
      <arglist>(utils::ProtoTaskDS proto, const task_dynamics::abstract::TaskDynamics &amp;td)</arglist>
    </member>
    <member kind="function">
      <type>FunctionPtr</type>
      <name>function</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a88d092ffae84f63dcb65019a62b7c0c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constraint::Type</type>
      <name>type</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a95b2ba80c52242d5a8f0a7cc8495c794</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TaskDynamicsPtr</type>
      <name>taskDynamics</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>ac5bd7229d55aa88ae87cf3ddf6d8df0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TaskDynamicsPtr</type>
      <name>secondBoundTaskDynamics</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a22c2be49eecf48cc5c43f38fcc2c5e7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; TDImpl &gt;</type>
      <name>taskDynamics</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>af2837efa975d36ef1a15ef02ce5d95db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; typename T::Impl &gt;</type>
      <name>secondBoundTaskDynamics</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a237844af3893d372462ecef923f8c5c7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::abstract::TaskDynamics</name>
    <filename>a01675.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TaskDynamics</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>ad3ac366f863378eb52e6fe07d767eedb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; TaskDynamicsImpl &gt;</type>
      <name>impl</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a213c35ee9a1eaa3f5c47fd2a54d1e64e</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Order</type>
      <name>order</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>adde099a2989ba116db9c6a3ff41b895f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::unique_ptr&lt; TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a1e1626637ba2315c65b9bfacceefe783</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Order</type>
      <name>order_</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a0af2178117ec3fab102e808b863e9886</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::abstract::TaskDynamicsImpl</name>
    <filename>a01679.html</filename>
    <base>Node&lt; TaskDynamicsImpl &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TaskDynamicsImpl</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a239b19fc57d4196e7dd6b350a71aef31</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a31198ff29298e93e623c54de9ced297e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Order</type>
      <name>order</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>acf1f1b6e548f8b77f3fc77685dee2731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateValue</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>af4233ad13e8b0ea17839f969916f863d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkType</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a7373bcce22305dafea3672abcc14af70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskDynamicsImpl</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a161b836748fdd1a11f867aa5ec83d681</anchor>
      <arglist>(Order order, FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const function::abstract::Function &amp;</type>
      <name>function</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>ac0acf134613f1c97380003dd65afaa28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constraint::Type</type>
      <name>type</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a2dd77809a47648429659fab411062bc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Eigen::VectorXd &amp;</type>
      <name>rhs</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>ad938741b8a884fc193facda5bdda1fb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::VectorXd</type>
      <name>value_</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a3ad609fda5ed270f12bad2a3a3f64648</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::TaskWithRequirements</name>
    <filename>a00975.html</filename>
    <base>tvm::internal::ObjWithId</base>
    <member kind="function">
      <type></type>
      <name>TaskWithRequirements</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>a6b4e53041adaefe09739eba031aeaa2c</anchor>
      <arglist>(const Task &amp;task, requirements::SolvingRequirements req)</arglist>
    </member>
    <member kind="variable">
      <type>Task</type>
      <name>task</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>a2f59eefac6d47f39c7fce5070509614d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>requirements::SolvingRequirementsWithCallbacks</type>
      <name>requirements</name>
      <anchorfile>a00975.html</anchorfile>
      <anchor>a627a35e1b1fbc2dfde53cbcebaba28b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; tvm::utils::internal::NoConstant &gt;</name>
    <filename>a01791.html</filename>
  </compound>
  <compound kind="class">
    <name>tvm::exception::UnimplementedOutput</name>
    <filename>a01011.html</filename>
    <base>tvm::exception::FunctionException</base>
  </compound>
  <compound kind="class">
    <name>tvm::exception::UnusedOutput</name>
    <filename>a01003.html</filename>
    <base>tvm::exception::DataException</base>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::AbstractNode::Update</name>
    <filename>a01091.html</filename>
  </compound>
  <compound kind="struct">
    <name>tvm::graph::internal::Log::Update</name>
    <filename>a01123.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a3d16b7319980984e1457d250731a3ce1</anchor>
      <arglist>(const Update &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a3aa5eb8672d86e7ba2c951cccc15431e</anchor>
      <arglist>(const Update &amp;other) const</arglist>
    </member>
    <member kind="variable">
      <type>EnumValue</type>
      <name>id</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>aac7ef708b79142c627458ce79840afcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>ac1edefa4d7fc51c35243eb50d318331e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::uintptr_t</type>
      <name>function</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a2a9f180b62dc0a2f774a9a232bf772bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer</type>
      <name>owner</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a9538295d7f3d19392fbacb07629cb067</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::utils::UpdatelessFunction</name>
    <filename>a01815.html</filename>
    <member kind="function">
      <type></type>
      <name>UpdatelessFunction</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a3f84076a07f0d6c75d4efa6b2a75e0c5</anchor>
      <arglist>(FunctionPtr f)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a44f1b92210fd9ca27e1ff2f7f750d68b</anchor>
      <arglist>(Vals &amp;&amp;... vals) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>jacobian</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ac7e7f09ecab45d351b58e873eddb1dab</anchor>
      <arglist>(const Variable &amp;x, Vals &amp;&amp;... vals) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>velocity</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>af4c6de7ea42256202f079afce81b2ba1</anchor>
      <arglist>(Vals &amp;&amp;... vals) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>normalAcceleration</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a004656627bdf91004243a8d952cb866e</anchor>
      <arglist>(Vals &amp;&amp;... vals) const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::MatrixXd &amp;</type>
      <name>JDot</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a2a7d940785f1243ca6ddea93188224b6</anchor>
      <arglist>(const Variable &amp;x, Vals &amp;&amp;... vals) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::ControlProblem::Updater</name>
    <filename>a00983.html</filename>
    <member kind="function">
      <type></type>
      <name>Updater</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a719978f16fc52e7dc22dcd00f8d89eab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInput</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>af16fbfa4d0756bf0e83dc9e16faeec0d</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; source, Args... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInput</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>a2a44c0f1e12ac4db744f98329e88832a</anchor>
      <arglist>(T *source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refresh</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>aa9a374de078debc7ea4642522ed8e9ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a00983.html</anchorfile>
      <anchor>ae9fe82e2ce3846995fa6c56a61c245b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_assign_cache</name>
    <filename>a01451.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <templarg>F</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_assign_cache&lt; MatrixType, A, W, GENERAL, CONSTANT &gt;</name>
    <filename>a01463.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
    <templarg>W</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_assign_cache&lt; MatrixType, MAX, W, GENERAL, EXTERNAL &gt;</name>
    <filename>a01459.html</filename>
    <templarg></templarg>
    <templarg>W</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_assign_cache&lt; MatrixType, MIN, W, GENERAL, EXTERNAL &gt;</name>
    <filename>a01455.html</filename>
    <templarg></templarg>
    <templarg>W</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_product_cache</name>
    <filename>a01467.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
    <templarg>W</templarg>
    <templarg>M</templarg>
    <templarg>F</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_product_cache&lt; MatrixType, A, DIAGONAL, GENERAL, CONSTANT &gt;</name>
    <filename>a01475.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::use_product_cache&lt; MatrixType, A, DIAGONAL, GENERAL, EXTERNAL &gt;</name>
    <filename>a01471.html</filename>
    <templarg></templarg>
    <templarg>A</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::Variable</name>
    <filename>a01819.html</filename>
    <base>tvm::internal::ObjWithId</base>
    <member kind="function">
      <type></type>
      <name>Variable</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a58b844ffbc99f8676db998dc8ae60454</anchor>
      <arglist>(const Variable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Variable &amp;</type>
      <name>operator=</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a0f9364db79260eb954b71a57e20d6ce2</anchor>
      <arglist>(const Variable &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr</type>
      <name>duplicate</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>abf37ab554e3e0fb2a572167bb1172b7e</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>aa93593f8090b22789e65e9d75c96a56c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a4c7ab047ba8057c7c5564ae500080b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Space &amp;</type>
      <name>space</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a29f59329447fd1d5c817cbb913f7d433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEuclidean</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a9bceb0c13a4b1806460f43b3f3456480</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a5434c64743b4dffb484af270dca0e10a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ac1968c745417aac31937e82953399929</anchor>
      <arglist>(const VectorConstRef &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>derivativeNumber</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a2b1c9b0dae4d31528a76ab96634cdc32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDerivativeOf</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>acc0ec7bb22230c44d8552f8fcdc3758f</anchor>
      <arglist>(const Variable &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPrimitiveOf</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a5594fb4254d53edae596e801a97b616c</anchor>
      <arglist>(const Variable &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBasePrimitive</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a4f0344113c1dddc696ebcd63e5e0431f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr</type>
      <name>primitive</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a967aec1cb0f0579fffba55f63217e243</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr</type>
      <name>basePrimitive</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a32145d6eab57cab0abc6cf6e911a726f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>getMappingIn</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>adb7f9239f61416b9c1a57e9f806782b6</anchor>
      <arglist>(const VariableVector &amp;variables) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::CommaInitializer&lt; Eigen::VectorXd &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a91e011ff20c0bf9efa105314ab316095</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::CommaInitializer&lt; Eigen::VectorXd &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ae29edc764f2fcb6627b6d918aecd3b4c</anchor>
      <arglist>(const Eigen::DenseBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Space</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a2129e6c0ac73536a2ac4f681dae16947</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>VariableVector</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a5194610bec6d9569d17cd7696700e4c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend VariablePtr TVM_DLLAPI</type>
      <name>dot</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a3b297819c93f2c7b3030e54cd28307da</anchor>
      <arglist>(VariablePtr, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::VariableVector</name>
    <filename>a01827.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableVector</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a6980bd493701fe118048b5af1bedafdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableVector</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>aa92812a66c552dab0ffb15ac944cf595</anchor>
      <arglist>(VarPtr &amp;&amp;... variables)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a1f403482adfb7f415bb7fe943a3012cd</anchor>
      <arglist>(VariablePtr v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a33547e0957cb0ad94c85dbf84f1a0e1e</anchor>
      <arglist>(std::unique_ptr&lt; Variable &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>af010a65c30b6936aa7a6b3ed15763a13</anchor>
      <arglist>(const std::vector&lt; VariablePtr &gt; &amp;variables)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a5e805a082d29c3c65bc526193f336101</anchor>
      <arglist>(const VariableVector &amp;variables)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ad4ef94b8bffc61864f8766a58d229b74</anchor>
      <arglist>(const Variable &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalSize</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a322465ca225be0540dde0a2730afb8fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfVariables</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ac7641ac8683bb7d30cf945f8548bca58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariablePtr</type>
      <name>operator[]</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ac3e2b1b24d8aa8c58fc6bd7af2ca814a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; VariablePtr &gt; &amp;</type>
      <name>variables</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a1803f1e6f2cddd3d1a881bd669ef11be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::VectorXd &amp;</type>
      <name>value</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a7ae6099e8837dcc0887f86fc6edf709c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>aee7fe9b8f76f97b61371a26ab8961ba7</anchor>
      <arglist>(const VectorConstRef &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMapping</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a4058789ee7a87a71307c6ddda943c152</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; const Variable *, Range &gt;</type>
      <name>computeMappingMap</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>aaa28b9a71615d402e5a3b7c997e0c40b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a6fbeae08783fded2cf3b64225ba03219</anchor>
      <arglist>(const Variable &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexOf</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a9b17875d36db18cce4af68f5b97771ba</anchor>
      <arglist>(const Variable &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stamp</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a32c2b375a43814b0c29a61dcdb1ab8bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VariablePtr &gt;::const_iterator</type>
      <name>begin</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a145013abb88cba34304d4ee9b939f012</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; VariablePtr &gt;::const_iterator</type>
      <name>end</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a458e86fadb580dba74950d11f2923eb8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::task_dynamics::VelocityDamper</name>
    <filename>a01747.html</filename>
    <base>tvm::task_dynamics::abstract::TaskDynamics</base>
    <class kind="class">tvm::task_dynamics::VelocityDamper::AnisotropicConfig</class>
    <class kind="class">tvm::task_dynamics::VelocityDamper::Config</class>
    <class kind="class">tvm::task_dynamics::VelocityDamper::Impl</class>
    <member kind="function">
      <type></type>
      <name>VelocityDamper</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>ae15e7f1b8b9ce3374fa40dee84e83da9</anchor>
      <arglist>(const Config &amp;config, double big=constant::big_number)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityDamper</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>ad04070d2efacde00713659e190d6539e</anchor>
      <arglist>(const AnisotropicConfig &amp;config, double big=constant::big_number)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityDamper</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a04482c838c55d714c8177d617f00be4b</anchor>
      <arglist>(double dt, const Config &amp;config, double big=constant::big_number)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityDamper</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a00a13d5ce4c903788b60da51ab416565</anchor>
      <arglist>(double dt, const AnisotropicConfig &amp;config, double big=constant::big_number)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VelocityDamper</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a325110a772ec18ce66cc2d8a2db2b379</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a588e6cbd4fff5de6e5c021184b2fbb48</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Order</type>
      <name>order_</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a6cb34573a9cce06b9407331472c9b0ff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::unique_ptr&lt; abstract::TaskDynamicsImpl &gt;</type>
      <name>impl_</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>adfdd2313d0000fdedfa770d88cb8e9d0</anchor>
      <arglist>(FunctionPtr f, constraint::Type t, const Eigen::VectorXd &amp;rhs, Args &amp;&amp;... args) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tvm::robot::Contact::View</name>
    <filename>a01331.html</filename>
    <member kind="variable">
      <type>const Id &amp;</type>
      <name>id</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a8119341a92eeed9c64a4a72cb205a30b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FramePtr &amp;</type>
      <name>f</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a50ec6581b1b9c3f1875dcbd68b476990</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; sva::PTransformd &gt; &amp;</type>
      <name>points</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>af487c3e960642d7188115ce88cf39ba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::ViolationEvaluationBase</name>
    <filename>a01295.html</filename>
    <templarg>Lightweight</templarg>
    <base>SingleSolvingRequirement&lt; ViolationEvaluationType, Lightweight &gt;</base>
    <member kind="function">
      <type></type>
      <name>ViolationEvaluationBase</name>
      <anchorfile>a01295.html</anchorfile>
      <anchor>a881fdba50fe942d746eb6da157afad84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ViolationEvaluationBase</name>
      <anchorfile>a01295.html</anchorfile>
      <anchor>ab17d6b111554045ee2c3b3ec3aef9e83</anchor>
      <arglist>(ViolationEvaluationType t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::requirements::WeightBase</name>
    <filename>a01299.html</filename>
    <templarg>Lightweight</templarg>
    <base>SingleSolvingRequirement&lt; double, Lightweight &gt;</base>
    <member kind="function">
      <type></type>
      <name>WeightBase</name>
      <anchorfile>a01299.html</anchorfile>
      <anchor>a8aa27c79dc3b65e2ea16ed3a1a6990c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightBase</name>
      <anchorfile>a01299.html</anchorfile>
      <anchor>a92101548669c88c39680ae479cfa9759</anchor>
      <arglist>(double alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::WeightedLeastSquares</name>
    <filename>a01599.html</filename>
    <base>LinearResolutionScheme&lt; WeightedLeastSquares &gt;</base>
    <member kind="typedef">
      <type>Memory</type>
      <name>ComputationDataType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a032bd2f6f711f812ee060a82896377a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLeastSquares</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a41beb897e6977b937a451406d4c277f0</anchor>
      <arglist>(const SolverFactory &amp;solverFactory, WeightedLeastSquaresOptions schemeOptions={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLeastSquares</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a205528dc20af248bfe4a9ba9240461f4</anchor>
      <arglist>(const SolverOptions &amp;solverOptions, WeightedLeastSquaresOptions schemeOptions={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLeastSquares</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a49576bc7b7c161c147368409d9a2ce51</anchor>
      <arglist>(const T &amp;, WeightedLeastSquaresOptions={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLeastSquares</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>afb2556b1f9e36a5da4571bf1fc0f0790</anchor>
      <arglist>(const WeightedLeastSquares &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightedLeastSquares</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a2988361ee2c830e352af0b6414752b04</anchor>
      <arglist>(WeightedLeastSquares &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>WeightedLeastSquares &amp;</type>
      <name>operator=</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa58444701a312519ea0fd2e4a54da225</anchor>
      <arglist>(const WeightedLeastSquares &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>WeightedLeastSquares &amp;</type>
      <name>operator=</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aba0130c5c228e595dbdffd85b76189b9</anchor>
      <arglist>(WeightedLeastSquares &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ada00ec86fc26435a703fda3bab5c14d2</anchor>
      <arglist>(LinearizedControlProblem &amp;problem, internal::ProblemComputationData *data) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateComputationData_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0ef2221a41f9ec83f8034cecaedac989</anchor>
      <arglist>(LinearizedControlProblem &amp;problem, internal::ProblemComputationData *data) const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Memory &gt;</type>
      <name>createComputationData_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>af2d7a80be88b965a90ab0935ff8b2d5b</anchor>
      <arglist>(const LinearizedControlProblem &amp;problem) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WeightedLeastSquaresOptions</type>
      <name>options_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ac3da728a6159c2658e0b559bc13467a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; solver::abstract::LSSolverFactory &gt;</type>
      <name>solverFactory_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a785aed54ed1aef40a4a06adf25e93c3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::WeightedLeastSquaresOptions</name>
    <filename>a01595.html</filename>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::WeightMultBase</name>
    <filename>a01503.html</filename>
    <templarg>W</templarg>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::WeightMultBase&lt; DIAGONAL &gt;</name>
    <filename>a01519.html</filename>
    <member kind="typedef">
      <type>decltype(std::declval&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt; &gt;().asDiagonal() *std::declval&lt; T &gt;())</type>
      <name>ReturnType</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a66ab1fef180694583047fb6ec2a1e4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WeightMultBase</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a28a052651f644dc37d6e1fee5981892c</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType&lt; T &gt;</type>
      <name>applyWeightMult</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a28b2bfc2edfa94ffd7f8aec926d2c2a5</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>decltype(double() *std::declval&lt; Eigen::Ref&lt; const Eigen::VectorXd &gt;&gt;())</type>
      <name>applyWeightMult</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>aa3cec7fc02a24513e071d243c5402b7a</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::WeightMultBase&lt; MINUS &gt;</name>
    <filename>a01511.html</filename>
    <member kind="function">
      <type></type>
      <name>WeightMultBase</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>a8657bd4ce3719517c7fa58e7d1944cd4</anchor>
      <arglist>(NoArg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>applyWeightMult</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>a59fbf619dc2ec6e609c112a64c6654f6</anchor>
      <arglist>(const double &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>decltype(-std::declval&lt; Eigen::MatrixBase&lt; Derived &gt; &gt;())</type>
      <name>applyWeightMult</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>aaccc0edbfc171c08369f7631f3aeeb3f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>decltype((-std::declval&lt; Lhs &gt;()) *std::declval&lt; Rhs &gt;())</type>
      <name>applyWeightMult</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>ac2c85f3a9a89bfa84a259968874071e1</anchor>
      <arglist>(const Eigen::ProductBase&lt; Derived, Lhs, Rhs &gt; &amp;P)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>useArg</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>ac05711e0edddb973ae052849e6c71f69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::WeightMultBase&lt; NONE &gt;</name>
    <filename>a01507.html</filename>
    <member kind="function">
      <type></type>
      <name>WeightMultBase</name>
      <anchorfile>a01507.html</anchorfile>
      <anchor>a75693e1d7bc87996dcd8823a6db67f3b</anchor>
      <arglist>(NoArg)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>applyWeightMult</name>
      <anchorfile>a01507.html</anchorfile>
      <anchor>acfcce16979e89e3ea5b90ef2645cc113</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>useArg</name>
      <anchorfile>a01507.html</anchorfile>
      <anchor>ab536968036aab3572b9686d0ab33ab06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tvm::scheme::internal::WeightMultBase&lt; SCALAR &gt;</name>
    <filename>a01515.html</filename>
    <member kind="function">
      <type></type>
      <name>WeightMultBase</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a0b0f5905d36a95a6a076c7e3d6086a5e</anchor>
      <arglist>(const double &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>decltype(double() *std::declval&lt; T &gt;())</type>
      <name>applyWeightMult</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a48373eecd7cf81c95c6b20c4b4328a8b</anchor>
      <arglist>(const T &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>a00402.html</filename>
    <namespace>Eigen::internal</namespace>
  </compound>
  <compound kind="namespace">
    <name>Eigen::internal</name>
    <filename>a00403.html</filename>
    <class kind="struct">Eigen::internal::traits&lt; tvm::utils::internal::NoConstant &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>tvm</name>
    <filename>a00371.html</filename>
    <namespace>tvm::constant</namespace>
    <namespace>tvm::constraint</namespace>
    <namespace>tvm::event</namespace>
    <namespace>tvm::exception</namespace>
    <namespace>tvm::function</namespace>
    <namespace>tvm::geometry</namespace>
    <namespace>tvm::graph</namespace>
    <namespace>tvm::hint</namespace>
    <namespace>tvm::internal</namespace>
    <namespace>tvm::requirements</namespace>
    <namespace>tvm::robot</namespace>
    <namespace>tvm::scheme</namespace>
    <namespace>tvm::solver</namespace>
    <namespace>tvm::task_dynamics</namespace>
    <namespace>tvm::utils</namespace>
    <class kind="class">tvm::Clock</class>
    <class kind="class">tvm::ControlProblem</class>
    <class kind="class">tvm::LinearConstraintWithRequirements</class>
    <class kind="class">tvm::LinearizedControlProblem</class>
    <class kind="class">tvm::Range</class>
    <class kind="class">tvm::Robot</class>
    <class kind="class">tvm::Space</class>
    <class kind="class">tvm::Task</class>
    <class kind="class">tvm::TaskWithRequirements</class>
    <class kind="class">tvm::Variable</class>
    <class kind="class">tvm::VariableVector</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TaskWithRequirements &gt;</type>
      <name>TaskWithRequirementsPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a46e0b62fd9477cadab32a4e39d360a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
      <name>MatrixConstRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af4fdc88306faf6e863cff28f44459ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>adcb821eec4218eb93e3faf0d8a751171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
      <name>VectorConstRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a7afafb1e1034729b83e6d3676108f7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
      <name>VectorRef</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a5ba6fca76794c352cd250591dab8309e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ad6c7343a28855adb26af330abcba056a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Eigen::VectorXd &gt;</type>
      <name>VectorPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a9345c092d8ef7449a5149510415d978e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; constraint::abstract::Constraint &gt;</type>
      <name>ConstraintPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a6b21f7495f7ef45e0ef41efdbb08d150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; function::abstract::Function &gt;</type>
      <name>FunctionPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a42313833bbb66bf5318f67e0dca5936a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; function::abstract::LinearFunction &gt;</type>
      <name>LinearFunctionPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a043e85123594d7cb4514d783f25a6dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; constraint::abstract::LinearConstraint &gt;</type>
      <name>LinearConstraintPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a9684bcd58c05ed2e7f81eae1633c7082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Clock &gt;</type>
      <name>ClockPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a0476308bca1ade43f6571f7d36d65f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Range &gt;</type>
      <name>RangePtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a9d1e2ac6e0fb302696dd5ac857aea214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Robot &gt;</type>
      <name>RobotPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a003ca276319664eb1bd64c0b25b99509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; requirements::SolvingRequirementsWithCallbacks &gt;</type>
      <name>SolvingRequirementsPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>afbe973f3a51c3fe6b5557b8e4e51fc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; task_dynamics::abstract::TaskDynamicsImpl &gt;</type>
      <name>TaskDynamicsPtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a05be029537364f847283eb3bbf4fee7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Variable &gt;</type>
      <name>VariablePtr</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a024f10de786d6592dbd271d3df847835</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearExpr&lt; Derived &gt;</type>
      <name>operator*</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ad7cc76834903afa6ef272c4935ee2837</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearExpr&lt; tvm::utils::internal::MinusIdentityType &gt;</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>acd7ff9789bcf46ce107800db44a92281</anchor>
      <arglist>(const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::LinearExpr&lt; tvm::utils::internal::MultIdentityType &gt;</type>
      <name>operator*</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a8f87789a1545f7072d62b29577bcd884</anchor>
      <arglist>(double s, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>af1e2b4572cd9f6ec303e172db9f16499</anchor>
      <arglist>(const tvm::VariablePtr &amp;u, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ae4559794ded869fd19fcedccbf6a16a5</anchor>
      <arglist>(const AddType &amp;a, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a0e377f89ef6354c21a59dcd711178409</anchor>
      <arglist>(const tvm::VariablePtr &amp;v, const AddType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a6cb244525d8de41c8c92a4dbe755c7a0</anchor>
      <arglist>(const tvm::VariablePtr &amp;u, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ac07d466392acf028d8ac758a87250192</anchor>
      <arglist>(const SubType &amp;a, const tvm::VariablePtr &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>ad4cd68900b5ad86ffc5d47983bf1ed1f</anchor>
      <arglist>(const tvm::VariablePtr &amp;v, const SubType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>VariablePtr TVM_DLLAPI</type>
      <name>dot</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a87d6cb6ff8019ac998b40578d2a27438</anchor>
      <arglist>(VariablePtr var, int ndiff=1)</arglist>
    </member>
    <member kind="function">
      <type>VariableVector TVM_DLLAPI</type>
      <name>dot</name>
      <anchorfile>a00371.html</anchorfile>
      <anchor>a42c2dc1b096188c0810cc2c3fbe10e6c</anchor>
      <arglist>(const VariableVector &amp;vars, int ndiff=1)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::constant</name>
    <filename>a00380.html</filename>
    <namespace>tvm::constant::internal</namespace>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>big_number</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>aeb21de4788bbb96c1453de69db21a668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr double</type>
      <name>pi</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a5739e815f004bc19ad2b84be26a78824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int</type>
      <name>fullRank</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a0e46dc26c7ee9d3faf743cacf02265d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Vector3d</type>
      <name>gravity</name>
      <anchorfile>a00380.html</anchorfile>
      <anchor>a659f8ccf36072d74756182e42b1707d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::constant::internal</name>
    <filename>a00381.html</filename>
    <member kind="function">
      <type>constexpr T</type>
      <name>pow</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a4ac438333fb60e8bc76a956e33a3a9d1</anchor>
      <arglist>(T base, unsigned int exp, T result=1)</arglist>
    </member>
    <member kind="function">
      <type>constexpr double</type>
      <name>sqrtNewtonRaphson</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>aca8ba5d3eeccb1b947ea987123a875f0</anchor>
      <arglist>(double x, double curr, double prev=0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>sqrtGuess</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>ad36eb4bd10a887069a044cce4c4d2228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>sqrtOfMax</name>
      <anchorfile>a00381.html</anchorfile>
      <anchor>a1f5330f92255478145c2333d3571b135</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::constraint</name>
    <filename>a00372.html</filename>
    <namespace>tvm::constraint::abstract</namespace>
    <namespace>tvm::constraint::internal</namespace>
    <class kind="class">tvm::constraint::BasicLinearConstraint</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>ab6243a7da877a867f54ff7207959eb7c</anchor>
      <arglist></arglist>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca1625ef4fe09f68fa20d3ff6e02cd5c8e">GREATER_THAN</enumvalue>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca8d8dbd4894bf4197b12b8dc764133146">LOWER_THAN</enumvalue>
      <enumvalue file="a00372.html" anchor="ab6243a7da877a867f54ff7207959eb7ca5985013177a5f88f804ff2af491c65a5">DOUBLE_SIDED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RHS</name>
      <anchorfile>a00372.html</anchorfile>
      <anchor>adf340c6d4875e2e7502c8a6243ae0551</anchor>
      <arglist></arglist>
      <enumvalue file="a00372.html" anchor="adf340c6d4875e2e7502c8a6243ae0551a529e9e0beb5f85d1f132917c1a09860c">ZERO</enumvalue>
      <enumvalue file="a00372.html" anchor="adf340c6d4875e2e7502c8a6243ae0551a23381f2ccff0bd927c14dd312c5d4ce6">AS_GIVEN</enumvalue>
      <enumvalue file="a00372.html" anchor="adf340c6d4875e2e7502c8a6243ae0551ab4e725f1a00e995987cc42b9f076da65">OPPOSITE</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::constraint::abstract</name>
    <filename>a00373.html</filename>
    <class kind="class">tvm::constraint::abstract::Constraint</class>
    <class kind="class">tvm::constraint::abstract::LinearConstraint</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::constraint::internal</name>
    <filename>a00374.html</filename>
    <class kind="class">tvm::constraint::internal::LinearizedTaskConstraint</class>
    <class kind="class">tvm::constraint::internal::RHSVectors</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::event</name>
    <filename>a00382.html</filename>
    <class kind="class">tvm::event::Listener</class>
    <class kind="class">tvm::event::Source</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00382.html</anchorfile>
      <anchor>acdfefdd31f6d8d11f9e4813ac51638ab</anchor>
      <arglist></arglist>
      <enumvalue file="a00382.html" anchor="acdfefdd31f6d8d11f9e4813ac51638aba33eab728ee77b73e187b72e1ab05500c">CONTACT_NUMBER_CHANGED</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::exception</name>
    <filename>a00383.html</filename>
    <class kind="class">tvm::exception::DataException</class>
    <class kind="class">tvm::exception::DuplicateVariable</class>
    <class kind="class">tvm::exception::Exception</class>
    <class kind="class">tvm::exception::FunctionException</class>
    <class kind="class">tvm::exception::NonExistingVariable</class>
    <class kind="class">tvm::exception::NotImplemented</class>
    <class kind="class">tvm::exception::UnimplementedOutput</class>
    <class kind="class">tvm::exception::UnusedOutput</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::function</name>
    <filename>a00375.html</filename>
    <namespace>tvm::function::abstract</namespace>
    <class kind="class">tvm::function::BasicLinearFunction</class>
    <class kind="class">tvm::function::IdentityFunction</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::function::abstract</name>
    <filename>a00376.html</filename>
    <class kind="class">tvm::function::abstract::Function</class>
    <class kind="class">tvm::function::abstract::LinearFunction</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::geometry</name>
    <filename>a00384.html</filename>
    <class kind="class">tvm::geometry::Plane</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Plane &gt;</type>
      <name>PlanePtr</name>
      <anchorfile>a00384.html</anchorfile>
      <anchor>a200655f1c775385c4e120df8d8a412a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::graph</name>
    <filename>a00385.html</filename>
    <namespace>tvm::graph::abstract</namespace>
    <namespace>tvm::graph::internal</namespace>
    <class kind="class">tvm::graph::CallGraph</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::graph::abstract</name>
    <filename>a00386.html</filename>
    <class kind="class">tvm::graph::abstract::Node</class>
    <class kind="class">tvm::graph::abstract::Outputs</class>
    <class kind="class">tvm::graph::abstract::OutputSelector</class>
    <class kind="struct">tvm::graph::abstract::SelectorMembers</class>
    <class kind="struct">tvm::graph::abstract::SelectorMembers&lt; false &gt;</class>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_output</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a6b3bd5aff8d785eeafb26ab8a893b216</anchor>
      <arglist>(EnumT v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_output</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a1995fcaed2352884e8bbad90c296ba3c</anchor>
      <arglist>(EnumT v, Args ... args)</arglist>
    </member>
    <member kind="function">
      <type>std::true_type</type>
      <name>is_output_selector_impl</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a46f4088ba048638fb2c5c5885448e5e3</anchor>
      <arglist>(OutputSelector&lt; T, Base &gt; const volatile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>is_output_selector_impl</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a2cdeb4b0245c4c6615bd00957796638f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_output_selector</name>
      <anchorfile>a00386.html</anchorfile>
      <anchor>a2e8b6c4226d0ec33703ccac682cef0ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::graph::internal</name>
    <filename>a00387.html</filename>
    <class kind="class">tvm::graph::internal::AbstractNode</class>
    <class kind="class">tvm::graph::internal::DependencyGraph</class>
    <class kind="class">tvm::graph::internal::Inputs</class>
    <class kind="class">tvm::graph::internal::Log</class>
    <class kind="class">tvm::graph::internal::Logger</class>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_update</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a447a144be9f3728a7edd8decf10430d0</anchor>
      <arglist>(EnumT v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_valid_update</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a36eb922b44beb7381a9b159042a7e94b</anchor>
      <arglist>(EnumT v, Args ... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lexLess</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aad9e7110f7a2fd2790b9af19849fd846</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aec241ce2358d14a409f0e578430f068f</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lexLess</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>a8dec35c5717c5e0acf167b1b03617cd7</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>ae10ef3aa20955e32c33119274e9a4c96</anchor>
      <arglist>(const ObjType &amp;l, const ObjType &amp;r, MemberType ObjType::*member)</arglist>
    </member>
    <member kind="function">
      <type>std::uintptr_t</type>
      <name>getPointerValue</name>
      <anchorfile>a00387.html</anchorfile>
      <anchor>aa595f4e0beceebe4489e216d83a7c096</anchor>
      <arglist>(void(T::*ptfm)())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::hint</name>
    <filename>a00388.html</filename>
    <namespace>tvm::hint::abstract</namespace>
    <namespace>tvm::hint::internal</namespace>
    <class kind="class">tvm::hint::Substitution</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::hint::abstract</name>
    <filename>a00389.html</filename>
    <class kind="class">tvm::hint::abstract::SubstitutionCalculator</class>
    <class kind="class">tvm::hint::abstract::SubstitutionCalculatorImpl</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::hint::internal</name>
    <filename>a00390.html</filename>
    <class kind="class">tvm::hint::internal::AutoCalculator</class>
    <class kind="class">tvm::hint::internal::DiagonalCalculator</class>
    <class kind="class">tvm::hint::internal::GenericCalculator</class>
    <class kind="class">tvm::hint::internal::Substitutions</class>
    <class kind="class">tvm::hint::internal::SubstitutionUnit</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::internal</name>
    <filename>a00391.html</filename>
    <class kind="class">tvm::internal::always_false</class>
    <class kind="class">tvm::internal::always_true</class>
    <class kind="class">tvm::internal::CallbackManager</class>
    <class kind="class">tvm::internal::FirstOrderProvider</class>
    <class kind="class">tvm::internal::IdProvider</class>
    <class kind="struct">tvm::internal::is_base</class>
    <class kind="class">tvm::internal::KeepProperties</class>
    <class kind="class">tvm::internal::MatrixProperties</class>
    <class kind="class">tvm::internal::ObjectWithProperties</class>
    <class kind="class">tvm::internal::ObjWithId</class>
    <class kind="class">tvm::internal::PairElementToken</class>
    <class kind="class">tvm::internal::PairElementTokenHandle</class>
    <member kind="typedef">
      <type>ObjectWithProperties&lt; Eigen::MatrixXd &gt;</type>
      <name>MatrixWithProperties</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a1817451238184d41f13b5502c872ec94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectWithProperties&lt; Eigen::VectorXd &gt;</type>
      <name>VectorWithProperties</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ad994ea0e66746f6973730ef9151e2f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||(std::is_same_v&lt; T, Base &gt;||derives_from&lt; T, Base &gt;())), int &gt;</type>
      <name>enable_for_t</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a62e4f0cf6093d536532cbd17f1e80f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt;(...||derives_from&lt; T, Base &gt;()), int &gt;</type>
      <name>enable_for_templated_t</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a88bfde1b5ce2106ebd5f23b4a5cc2fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator-</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ada1f1cf36292359f682fd009bd31297e</anchor>
      <arglist>(const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator*</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>aaaa0e0a9c18d8979f5916a706a52b29a</anchor>
      <arglist>(double, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator+</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a7a0788f66237ee3122e00e292d7910ed</anchor>
      <arglist>(const MatrixProperties &amp;, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator-</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ad83c728d684bbef16f41e84f2b450bab</anchor>
      <arglist>(const MatrixProperties &amp;, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI MatrixProperties</type>
      <name>operator*</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>ac655e61c13545f2cbd20e62bc16b9a10</anchor>
      <arglist>(const MatrixProperties &amp;, const MatrixProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>derives_from</name>
      <anchorfile>a00391.html</anchorfile>
      <anchor>a098c8557722d22a773364eb08dcf816c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::requirements</name>
    <filename>a00377.html</filename>
    <namespace>tvm::requirements::abstract</namespace>
    <class kind="class">tvm::requirements::AnisotropicWeightBase</class>
    <class kind="class">tvm::requirements::PriorityLevelBase</class>
    <class kind="class">tvm::requirements::SolvingRequirements</class>
    <class kind="class">tvm::requirements::SolvingRequirementsBase</class>
    <class kind="class">tvm::requirements::SolvingRequirementsWithCallbacks</class>
    <class kind="class">tvm::requirements::ViolationEvaluationBase</class>
    <class kind="class">tvm::requirements::WeightBase</class>
    <member kind="typedef">
      <type>AnisotropicWeightBase&lt; true &gt;</type>
      <name>AnisotropicWeight</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a0bbe98ef109d5802048b074fc010ed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PriorityLevelBase&lt; true &gt;</type>
      <name>PriorityLevel</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>aa5d3c61ef15897a9eee0c742a80fbee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViolationEvaluationBase&lt; true &gt;</type>
      <name>ViolationEvaluation</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>a34fbea9cdc1068d953d49a7a2642b60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WeightBase&lt; true &gt;</type>
      <name>Weight</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>ad596b52ac03ded388e26964e3e995866</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ViolationEvaluationType</name>
      <anchorfile>a00377.html</anchorfile>
      <anchor>aa4adc5cf6ecbfb56b852b529f1e29198</anchor>
      <arglist></arglist>
      <enumvalue file="a00377.html" anchor="aa4adc5cf6ecbfb56b852b529f1e29198a9ec4c0afd450ceac7adb81c3bcfc9732">L1</enumvalue>
      <enumvalue file="a00377.html" anchor="aa4adc5cf6ecbfb56b852b529f1e29198a7e6aa2d53f6ee2b1a34b017fa403cb76">L2</enumvalue>
      <enumvalue file="a00377.html" anchor="aa4adc5cf6ecbfb56b852b529f1e29198a38b6015d873e96433844072ccea5c553">LINF</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::requirements::abstract</name>
    <filename>a00393.html</filename>
    <class kind="class">tvm::requirements::abstract::SingleSolvingRequirement</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::robot</name>
    <filename>a00394.html</filename>
    <namespace>tvm::robot::internal</namespace>
    <class kind="class">tvm::robot::CollisionFunction</class>
    <class kind="class">tvm::robot::CoMFunction</class>
    <class kind="class">tvm::robot::CoMInConvexFunction</class>
    <class kind="class">tvm::robot::Contact</class>
    <class kind="class">tvm::robot::ConvexHull</class>
    <class kind="class">tvm::robot::Frame</class>
    <class kind="class">tvm::robot::JointsSelector</class>
    <class kind="class">tvm::robot::OrientationFunction</class>
    <class kind="class">tvm::robot::PositionFunction</class>
    <class kind="class">tvm::robot::PostureFunction</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Contact &gt;</type>
      <name>ContactPtr</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a434d8b9dbb95341a554c0fc413dd00a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ConvexHull &gt;</type>
      <name>ConvexHullPtr</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>acf05591ffe61db52448b19482efa9a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Frame &gt;</type>
      <name>FramePtr</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>a281a5946e79d354cb9a72ac5fbd693a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ContactConstraintType</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>ae695c229a7d819c057992d913a3ad10f</anchor>
      <arglist></arglist>
      <enumvalue file="a00394.html" anchor="ae695c229a7d819c057992d913a3ad10fa3b926d163371fd620b09b63219b12f52">Acceleration</enumvalue>
      <enumvalue file="a00394.html" anchor="ae695c229a7d819c057992d913a3ad10fa88156d46910a2d733443c339a9231d12">Velocity</enumvalue>
      <enumvalue file="a00394.html" anchor="ae695c229a7d819c057992d913a3ad10fa52f5e0bc3859bc5f5e25130b6c7e8881">Position</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ContactType</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>aac706730af38b72ec80e95eb336cd043</anchor>
      <arglist></arglist>
      <enumvalue file="a00394.html" anchor="aac706730af38b72ec80e95eb336cd043ad2203cb1237cb6460cbad94564e39345">Regular</enumvalue>
      <enumvalue file="a00394.html" anchor="aac706730af38b72ec80e95eb336cd043a9eb6b78a99cdb6ffd3d40d18621d9f80">Force</enumvalue>
      <enumvalue file="a00394.html" anchor="aac706730af38b72ec80e95eb336cd043aadf9f772a73f364e4ce6c52b9fae740d">Geometric</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Robot &gt; TVM_DLLAPI</type>
      <name>fromURDF</name>
      <anchorfile>a00394.html</anchorfile>
      <anchor>aa0c50be7a7db4b673268d061999e284f</anchor>
      <arglist>(tvm::Clock &amp;clock, const std::string &amp;name, const std::string &amp;path, bool fixed, const std::vector&lt; std::string &gt; &amp;filteredLinks, const std::map&lt; std::string, std::vector&lt; double &gt;&gt; &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::robot::internal</name>
    <filename>a00395.html</filename>
    <class kind="class">tvm::robot::internal::DynamicFunction</class>
    <class kind="class">tvm::robot::internal::FrictionCone</class>
    <class kind="class">tvm::robot::internal::GeometricContactFunction</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::scheme</name>
    <filename>a00396.html</filename>
    <namespace>tvm::scheme::abstract</namespace>
    <namespace>tvm::scheme::internal</namespace>
    <class kind="class">tvm::scheme::WeightedLeastSquares</class>
    <class kind="class">tvm::scheme::WeightedLeastSquaresOptions</class>
    <member kind="typedef">
      <type>int</type>
      <name>identifier</name>
      <anchorfile>a00396.html</anchorfile>
      <anchor>a485e7c18a3dae699ac797fc8c381de7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::scheme::abstract</name>
    <filename>a00397.html</filename>
    <class kind="class">tvm::scheme::abstract::LinearResolutionScheme</class>
    <class kind="class">tvm::scheme::abstract::ResolutionScheme</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::scheme::internal</name>
    <filename>a00398.html</filename>
    <class kind="class">tvm::scheme::internal::ArgCount</class>
    <class kind="class">tvm::scheme::internal::ArgCount&lt; T &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; ADD &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; COPY &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; MAX &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; MIN &gt;</class>
    <class kind="class">tvm::scheme::internal::AssignBase&lt; SUB &gt;</class>
    <class kind="class">tvm::scheme::internal::Assignment</class>
    <class kind="class">tvm::scheme::internal::AssignmentTarget</class>
    <class kind="class">tvm::scheme::internal::CachedResult</class>
    <class kind="class">tvm::scheme::internal::CachedResult&lt; MatrixType, true &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, A, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, COPY, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, MAX, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignment&lt; MatrixType, MIN, W, M, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::CompiledAssignmentWrapper</class>
    <class kind="class">tvm::scheme::internal::hasNoArgCtor</class>
    <class kind="class">tvm::scheme::internal::LevelAbilities</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, CUSTOM &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, GENERAL &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, IDENTITY &gt;</class>
    <class kind="class">tvm::scheme::internal::MatrixMultBase&lt; MatrixType, INVERSE_DIAGONAL &gt;</class>
    <class kind="class">tvm::scheme::internal::NoArg</class>
    <class kind="class">tvm::scheme::internal::ParseArg</class>
    <class kind="class">tvm::scheme::internal::ParseArg_</class>
    <class kind="class">tvm::scheme::internal::ParseNoArg_</class>
    <class kind="class">tvm::scheme::internal::ProblemComputationData</class>
    <class kind="class">tvm::scheme::internal::ProblemDefinitionEvent</class>
    <class kind="class">tvm::scheme::internal::ResolutionSchemeBase</class>
    <class kind="class">tvm::scheme::internal::SchemeAbilities</class>
    <class kind="class">tvm::scheme::internal::SourceBase</class>
    <class kind="class">tvm::scheme::internal::SourceBase&lt; MatrixType, ZERO &gt;</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache&lt; MatrixType, A, W, GENERAL, CONSTANT &gt;</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache&lt; MatrixType, MAX, W, GENERAL, EXTERNAL &gt;</class>
    <class kind="class">tvm::scheme::internal::use_assign_cache&lt; MatrixType, MIN, W, GENERAL, EXTERNAL &gt;</class>
    <class kind="class">tvm::scheme::internal::use_product_cache</class>
    <class kind="class">tvm::scheme::internal::use_product_cache&lt; MatrixType, A, DIAGONAL, GENERAL, CONSTANT &gt;</class>
    <class kind="class">tvm::scheme::internal::use_product_cache&lt; MatrixType, A, DIAGONAL, GENERAL, EXTERNAL &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; DIAGONAL &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; MINUS &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; NONE &gt;</class>
    <class kind="class">tvm::scheme::internal::WeightMultBase&lt; SCALAR &gt;</class>
    <member kind="typedef">
      <type>typename std::conditional&lt; MatrixType::ColsAtCompileTime==1, std::true_type, std::false_type &gt;::type</type>
      <name>isVector</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a004afcb1d38a4be484e715ebb9936fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::conditional&lt; MatrixType::ColsAtCompileTime !=1, std::true_type, std::false_type &gt;::type</type>
      <name>isMatrix</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abb0a7c8fa6017cb9e8f2682c0d0dcd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TargetType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abe11da65d6ccf4412671e16317eb1f3b</anchor>
      <arglist></arglist>
      <enumvalue file="a00398.html" anchor="abe11da65d6ccf4412671e16317eb1f3ba32a843da6ea40ab3b17a3421ccdf671b">Linear</enumvalue>
      <enumvalue file="a00398.html" anchor="abe11da65d6ccf4412671e16317eb1f3ba8b2972385ed28d0e199ae2985d6fea4c">Quadratic</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AssignType</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578af0c73515adef86a0d1f825bfb86a4784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADD</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578a010df03f1145be89b73897c0d8b8f7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUB</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578acf1a14be3f8890df2e2701343b3af30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578abf1eccb4f3bd4c3867e067d7b3d62b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a6e11ce78bce8f4d8e54c5fb61aa23578a190a2f70edc18fc77838e54c617ce79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WeightMult</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a3ce4d03476f4b5a9339093a5e1413d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MINUS</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a8837683631cde0a3713dedea1ee833e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALAR</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a3f600fcc9178227d4221692248a607cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIAGONAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a2b54e954c3d23656d60f46fef6c8b728a54b75b1f94c035631788609cea47acf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MatrixMult</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDENTITY</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fda821c15bebc2a454f1197ef3677f7e437</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GENERAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fda8816dee447b86ccf9bec4d5111b38a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVERSE_DIAGONAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fdae656c7c4b3f1e7026cafcd5a8508f870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUSTOM</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>accdeba42434e6c326e35e438acca74fda406a9749aea3c711f544bc3bb79ea0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Source</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTERNAL</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3ad36302b9be93153939876dd13aeff767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZERO</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3a59651a5fd37a9eaf58a55149baf8c490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONSTANT</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a04d5b16c84893afd4865703cbe3f47a3ab46dfc1bff46ccf28be89dbab0426e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VectorConstRef</type>
      <name>retrieveSource</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a1e90aa78e3bdfb11980873071c6fe3c0</anchor>
      <arglist>(LinearConstraintPtr, const VectorConstRef &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>VectorConstRef</type>
      <name>retrieveSource</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a88f72a72c8272404526948380e2c17af</anchor>
      <arglist>(LinearConstraintPtr s, const Assignment::RHSFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>retrieveTarget</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>aba64b04d0e1aef8bb0bfdb124190f42c</anchor>
      <arglist>(AssignmentTarget &amp;, VectorRef v)</arglist>
    </member>
    <member kind="function">
      <type>VectorRef</type>
      <name>retrieveTarget</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a60108629f94e12f0436eca0f14c388f0</anchor>
      <arglist>(AssignmentTarget &amp;t, Assignment::VectorFunction v)</arglist>
    </member>
    <member kind="function">
      <type>std::nullptr_t</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>abd05314126989eab9b242bf92488a2bf</anchor>
      <arglist>(const VectorConstRef &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::nullptr_t</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a28a207530e99642d57ddca436cb8bb35</anchor>
      <arglist>(VectorRef)</arglist>
    </member>
    <member kind="function">
      <type>Assignment::RHSFunction</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ab00799dc5148058efb3be6fecbff5529</anchor>
      <arglist>(Assignment::RHSFunction f)</arglist>
    </member>
    <member kind="function">
      <type>Assignment::VectorFunction</type>
      <name>nullifyIfVecRef</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a5b3e9508d3b922edd410f209caa63fbd</anchor>
      <arglist>(Assignment::VectorFunction v)</arglist>
    </member>
    <member kind="function">
      <type>std::true_type</type>
      <name>hasNoArgCtorDummy</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>adbf2331335c97968e5c91d1f6627fe83</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>decltype(hasNoArgCtorDummy(T(NoArg())))</type>
      <name>hasNoArgCtor_</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>aac61c3166e4f708d65abab8457912950</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>hasNoArgCtor_</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ab64a27afc0b6a63467f786d3fb9147a0</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>ProblemComputationData *</type>
      <name>getComputationData</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a76cdca50f833f679b0c9c38f9d5aaf9f</anchor>
      <arglist>(Problem &amp;problem, const Scheme &amp;resolutionScheme)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>isBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a553d86328eb4c4d9e39d73b777004fa0</anchor>
      <arglist>(const ConstraintPtr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>isBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a0074f66a98a9b56746d3692c15c38076</anchor>
      <arglist>(const ConstraintPtr &amp;c, const hint::internal::Substitutions &amp;subs)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>isBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a5f5ff77617e1734ebeab2f9624e60494</anchor>
      <arglist>(const ConstraintPtr &amp;c, const std::vector&lt; VariablePtr &gt; &amp;x, const std::vector&lt; std::shared_ptr&lt; function::BasicLinearFunction &gt;&gt; &amp;xsub)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>canBeUsedAsBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>a16bd7d36099635cbe690239eb478f444</anchor>
      <arglist>(const ConstraintPtr &amp;c, const hint::internal::Substitutions &amp;subs, constraint::Type targetConvention)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>canBeUsedAsBound</name>
      <anchorfile>a00398.html</anchorfile>
      <anchor>ab88f192fa87a659f163f477ab3d3709f</anchor>
      <arglist>(const ConstraintPtr &amp;c, const std::vector&lt; VariablePtr &gt; &amp;x, const std::vector&lt; std::shared_ptr&lt; function::BasicLinearFunction &gt;&gt; &amp;xsub, constraint::Type targetConvention)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::solver</name>
    <filename>a00399.html</filename>
    <namespace>tvm::solver::abstract</namespace>
    <class kind="class">tvm::solver::DefaultLSSolverFactory</class>
    <class kind="class">tvm::solver::DefaultLSSolverOptions</class>
    <class kind="class">tvm::solver::LSSOLLeastSquareSolver</class>
    <class kind="class">tvm::solver::LSSOLLSSolverFactory</class>
    <class kind="class">tvm::solver::LSSOLLSSolverOptions</class>
    <class kind="class">tvm::solver::QLDLeastSquareSolver</class>
    <class kind="class">tvm::solver::QLDLSSolverFactory</class>
    <class kind="class">tvm::solver::QLDLSSolverOptions</class>
    <class kind="class">tvm::solver::QuadprogLeastSquareSolver</class>
    <class kind="class">tvm::solver::QuadprogLSSolverFactory</class>
    <class kind="class">tvm::solver::QuadprogLSSolverOptions</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::solver::abstract</name>
    <filename>a00400.html</filename>
    <class kind="class">tvm::solver::abstract::LeastSquareSolver</class>
    <class kind="class">tvm::solver::abstract::LSSolverFactory</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::task_dynamics</name>
    <filename>a00378.html</filename>
    <namespace>tvm::task_dynamics::abstract</namespace>
    <class kind="class">tvm::task_dynamics::Clamped</class>
    <class kind="class">tvm::task_dynamics::Constant</class>
    <class kind="class">tvm::task_dynamics::FeedForward</class>
    <class kind="class">tvm::task_dynamics::None</class>
    <class kind="class">tvm::task_dynamics::Proportional</class>
    <class kind="class">tvm::task_dynamics::ProportionalDerivative</class>
    <class kind="class">tvm::task_dynamics::Reference</class>
    <class kind="class">tvm::task_dynamics::ReferenceAcceleration</class>
    <class kind="class">tvm::task_dynamics::ReferenceVelocity</class>
    <class kind="class">tvm::task_dynamics::VelocityDamper</class>
    <member kind="typedef">
      <type>FeedForward&lt; ProportionalDerivative &gt;</type>
      <name>FeedForwardPD</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>aef391d4ea376d9ddb35b3bcace52d51e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FeedForward&lt; Proportional &gt;</type>
      <name>FeedForwardP</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>abefacce58ac7386489ddd237a5fb0ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Proportional</type>
      <name>P</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a48db1a4191bee9b4313893cbc71c60d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProportionalDerivative</type>
      <name>PD</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>abbc550226fefd54eb4205711373370ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Order</name>
      <anchorfile>a00378.html</anchorfile>
      <anchor>a2104706f158c0b024e10716d3c176cad</anchor>
      <arglist></arglist>
      <enumvalue file="a00378.html" anchor="a2104706f158c0b024e10716d3c176cadad7ed4ee1df437474d005188535f74875">Zero</enumvalue>
      <enumvalue file="a00378.html" anchor="a2104706f158c0b024e10716d3c176cada06c2cea18679d64399783748fa367bdd">One</enumvalue>
      <enumvalue file="a00378.html" anchor="a2104706f158c0b024e10716d3c176cadaaada29daee1d64ed0fe907043855cb7e">Two</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::task_dynamics::abstract</name>
    <filename>a00379.html</filename>
    <class kind="class">tvm::task_dynamics::abstract::TaskDynamics</class>
    <class kind="class">tvm::task_dynamics::abstract::TaskDynamicsImpl</class>
  </compound>
  <compound kind="namespace">
    <name>tvm::utils</name>
    <filename>a00392.html</filename>
    <namespace>tvm::utils::internal</namespace>
    <class kind="class">tvm::utils::AffineExpr</class>
    <class kind="class">tvm::utils::CheckOptions</class>
    <class kind="class">tvm::utils::LinearExpr</class>
    <class kind="class">tvm::utils::ProtoTaskCommon</class>
    <class kind="class">tvm::utils::ProtoTaskCommon&lt; constraint::Type::DOUBLE_SIDED, FunT &gt;</class>
    <class kind="class">tvm::utils::UpdatelessFunction</class>
    <member kind="typedef">
      <type>ProtoTaskCommon&lt; T, FunctionPtr &gt;</type>
      <name>ProtoTask</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2dfe19cb30968d93c81382f2b5463f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTaskCommon&lt; T, LinearFunctionPtr &gt;</type>
      <name>LinearProtoTask</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a509f413d9278f8193b7bafd5b026b0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::enable_if&lt; std::is_base_of&lt; tvm::function::abstract::Function, T &gt;::value, typename std::conditional&lt; std::is_base_of&lt; tvm::function::abstract::LinearFunction, T &gt;::value, IfLinearFunction, IfNotLinearFunction &gt;::type &gt;::type</type>
      <name>ProtoChoice</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a1c707dc549b7ec739bb11f88a0edcd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::EQUAL &gt;</type>
      <name>ProtoTaskEQ</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a446f70a3cebac171df63b889fbdfec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::EQUAL &gt;</type>
      <name>LinearProtoTaskEQ</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a67d50eddd53504a0b86fa2bfe7c6c36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskEQ, tvm::utils::LinearProtoTaskEQ &gt;</type>
      <name>ProtoTaskEQRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac9e42fbaa6410794e6fadcdd18d49ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::LOWER_THAN &gt;</type>
      <name>ProtoTaskLT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a37297a4563c741c267339e340d5fa5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::LOWER_THAN &gt;</type>
      <name>LinearProtoTaskLT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ad9cfc9fd2ff34269264b54eb97d96eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskLT, tvm::utils::LinearProtoTaskLT &gt;</type>
      <name>ProtoTaskLTRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a882353a88468a7018118653d9e592463</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::GREATER_THAN &gt;</type>
      <name>ProtoTaskGT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aafeba3b8e2ee8ea6967317533f102941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::GREATER_THAN &gt;</type>
      <name>LinearProtoTaskGT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ada1513adbbfbaf283d6495fad4728758</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskGT, tvm::utils::LinearProtoTaskGT &gt;</type>
      <name>ProtoTaskGTRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aee433b6f4c4593b7b997ecd5667281e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoTask&lt; constraint::Type::DOUBLE_SIDED &gt;</type>
      <name>ProtoTaskDS</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8bb2ad8c3268c4f7459045e8ab119c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LinearProtoTask&lt; constraint::Type::DOUBLE_SIDED &gt;</type>
      <name>LinearProtoTaskDS</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a835bafc1b1123b69bf974a9bb59d8a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProtoChoice&lt; T, tvm::utils::ProtoTaskDS, tvm::utils::LinearProtoTaskDS &gt;</type>
      <name>ProtoTaskDSRet</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a572f8731e1875065a8272c5732cbe217</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned int</type>
      <name>count_va_args</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7204755fdee75112fb07ca90a8e219d6</anchor>
      <arglist>(const char(&amp;s)[N], unsigned int i=0, unsigned int ret=0)</arglist>
    </member>
    <member kind="function">
      <type>AffineExpr&lt; CstDerived, Derived... &gt;</type>
      <name>make_AffineExpr</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5aaf37f87c2b6c95abbfec5abd1c5607</anchor>
      <arglist>(const CstDerived &amp;constant, const std::tuple&lt; LinearExpr&lt; Derived &gt;... &gt; &amp;linear)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>checkJacobian</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga8bb02aa8295218894c58053afefb1098</anchor>
      <arglist>(FunctionPtr f, CheckOptions opt=CheckOptions())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; graph::CallGraph &gt;</type>
      <name>generateUpdateGraph</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac77af07c5e6ceaf37a0274d54eff0f26</anchor>
      <arglist>(std::shared_ptr&lt; Object &gt; obj, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3cdde69915328393a888c9062f24d7cd</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>aa7dbf421bc45d00359a50b250ff0e9d5</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af7793f96378dc79eab2695c67494b143</anchor>
      <arglist>(const MultDerived &amp;m, const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, Derived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac264bd8dc4ebddfb87acafbe7e8f4bf3</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const Eigen::MatrixBase&lt; CstDerived &gt; &amp;cst)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, Derived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a9d8c5e4d1ad1590d9b306a58ae47ec2b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; CstDerived &gt; &amp;cst, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::NoConstant, LhsDerived, RhsDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a13c4782f9ba59e1f075de1618a925053</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; LhsDerived &gt; &amp;lhs, const tvm::utils::LinearExpr&lt; RhsDerived &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, LhsDerived..., RhsDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a083caf4687183af1d9a906e7466956f2</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, LhsDerived... &gt; &amp;lhs, const tvm::utils::LinearExpr&lt; RhsDerived &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; CstDerived, LhsDerived, RhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>af5e7802dfd7f099b812212d4ef6e3962</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; LhsDerived &gt; &amp;lhs, const tvm::utils::AffineExpr&lt; CstDerived, RhsDerived... &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::AddConstantsRetType&lt; CstDerived, RhsDerived &gt;, LhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>afc5fd31d42639a483c599c87db2cea46</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, LhsDerived... &gt; &amp;lhs, const Eigen::MatrixBase&lt; RhsDerived &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::AddConstantsRetType&lt; LhsDerived, CstDerived &gt;, RhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a83c605bf346d7252ee8de2d284685a15</anchor>
      <arglist>(const Eigen::MatrixBase&lt; LhsDerived &gt; &amp;lhs, const tvm::utils::AffineExpr&lt; CstDerived, RhsDerived... &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>tvm::utils::AffineExpr&lt; tvm::utils::internal::AddConstantsRetType&lt; LCstDerived, RCstDerived &gt;, LhsDerived..., RhsDerived... &gt;</type>
      <name>operator+</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a8e565c70b785d19ad676d319b1ae50b8</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; LCstDerived, LhsDerived... &gt; &amp;lhs, const tvm::utils::AffineExpr&lt; RCstDerived, RhsDerived... &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a41553ea968b600c4399caa109bca5fd9</anchor>
      <arglist>(const MultType &amp;m, const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2a3a0beff3febe8fdf989cbbc1dbd603</anchor>
      <arglist>(const tvm::utils::LinearExpr&lt; Derived &gt; &amp;lin, const SubType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ac0af960f7e734e957a808404a4755a8a</anchor>
      <arglist>(const tvm::utils::AffineExpr&lt; CstDerived, Derived... &gt; &amp;aff, const SubType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI void</type>
      <name>transform</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3de0bbbdb09bf2e7b1e540b416b0bffd</anchor>
      <arglist>(sch::S_Object &amp;obj, const sva::PTransformd &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI std::unique_ptr&lt; sch::S_Polyhedron &gt;</type>
      <name>Polyhedron</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a50917f119cc052920c809a2c08d6ee82</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>TVM_DLLAPI double</type>
      <name>distance</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a7eef10a1512d54024ca7243c99709f29</anchor>
      <arglist>(sch::CD_Pair &amp;pair, Eigen::Vector3d &amp;p1, Eigen::Vector3d &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>tvm::utils::internal</name>
    <filename>a00401.html</filename>
    <class kind="class">tvm::utils::internal::BufferedMatrix</class>
    <class kind="class">tvm::utils::internal::IdComparator</class>
    <class kind="class">tvm::utils::internal::NoConstant</class>
    <class kind="struct">tvm::utils::internal::RefSelector</class>
    <class kind="struct">tvm::utils::internal::RefSelector&lt; NoConstant &gt;</class>
    <class kind="class">tvm::utils::internal::RHS</class>
    <member kind="typedef">
      <type>decltype(Eigen::MatrixXd::Identity())</type>
      <name>IdentityType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a0365b200643e704353a458f177382135</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(2. *Eigen::MatrixXd::Identity())</type>
      <name>MultIdentityType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a972d81ac8de59a505156ca04e184f2ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(-Eigen::MatrixXd::Identity())</type>
      <name>MinusIdentityType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a3285e6576eeb8aea8ef9aad32633b961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename RefSelector&lt; Derived &gt;::type</type>
      <name>RefSelector_t</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>aa05965cff82275d2b7213670c1b63ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; std::remove_reference_t&lt; decltype(std::declval&lt; LhsType &gt;()+std::declval&lt; RhsType &gt;())&gt; &gt;</type>
      <name>AddConstantsRetType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a9405c2755b4621868748e6ef57646a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; KeyWithId, Value, IdComparator&lt; KeyWithId &gt;, Allocator &gt;</type>
      <name>map</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a1799eeadc084df3295499f98dad21b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RHSType</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>abc830f391523910ef34e4594c2f98f54</anchor>
      <arglist></arglist>
      <enumvalue file="a00401.html" anchor="abc830f391523910ef34e4594c2f98f54ad7ed4ee1df437474d005188535f74875">Zero</enumvalue>
      <enumvalue file="a00401.html" anchor="abc830f391523910ef34e4594c2f98f54ad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="a00401.html" anchor="abc830f391523910ef34e4594c2f98f54a57dea6f5039281b7fee517fc43bf3110">Vector</enumvalue>
    </member>
    <member kind="function">
      <type>const RhsType &amp;</type>
      <name>operator+</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a600bbbc181df0dc981d0addedb9dabfe</anchor>
      <arglist>(const NoConstant &amp;, const Eigen::MatrixBase&lt; RhsType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const LhsType &amp;</type>
      <name>operator+</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ab58b32650e0a7559e25ab8fea80d19f8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; LhsType &gt; &amp;lhs, const NoConstant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator+</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a2cd6fa0b151fe4e24739df15014437da</anchor>
      <arglist>(const NoConstant &amp;, const NoConstant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NoConstant</type>
      <name>operator*</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a5dc2d1c292597817e4239ec5a7fefc97</anchor>
      <arglist>(const MultType &amp;, const NoConstant &amp;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>tupleUnaryMinus</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a953b63ac3bf3b93a21e8fb0fe5ff0f11</anchor>
      <arglist>(const Tuple &amp;tuple, std::index_sequence&lt; Indices... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>tuplePremult</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a7a3de7863251546ec818c97434bc6007</anchor>
      <arglist>(const MultType &amp;m, const Tuple &amp;tuple, std::index_sequence&lt; Indices... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseSourcesAndOutputs</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a7c60a66c02c99b2d38d05c90e31c3b74</anchor>
      <arglist>(graph::CallGraph *g, std::shared_ptr&lt; graph::internal::Inputs &gt; user, std::shared_ptr&lt; Object &gt; obj, Output output, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseSourcesAndOutputs</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ab011b26e01ceb7daae3301e972b317e5</anchor>
      <arglist>(graph::CallGraph *g, std::shared_ptr&lt; graph::internal::Inputs &gt; user, std::shared_ptr&lt; Object1 &gt; obj1, std::shared_ptr&lt; Object2 &gt; obj2, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseSourcesAndOutputs</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>a1f7de31deb6c74c399f6492e5ca7d595</anchor>
      <arglist>(graph::CallGraph *g, std::shared_ptr&lt; graph::internal::Inputs &gt; user, std::shared_ptr&lt; Object &gt; obj)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>checkGroup</name>
    <title>CheckGroup</title>
    <filename>a00369.html</filename>
    <member kind="function">
      <type></type>
      <name>CheckOptions</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga9532f9c87cd5f5ab6d259b151babe59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckOptions</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga0b5cee38e2ebe9f032340dc902db2d3f</anchor>
      <arglist>(double s, double p, bool v)</arglist>
    </member>
    <member kind="function">
      <type>bool TVM_DLLAPI</type>
      <name>checkJacobian</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga8bb02aa8295218894c58053afefb1098</anchor>
      <arglist>(FunctionPtr f, CheckOptions opt=CheckOptions())</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>step</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>ga2bac40ffe8d7bc6158cc07fb6c8024c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>prec</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>gabde61e89043748a2665960d90f42a693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a00369.html</anchorfile>
      <anchor>gac9f0d3eb926695e51e82f2e61b71a1ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>functionWritingExample</name>
    <title>How to create new TVM functions.</title>
    <filename>a02344</filename>
    <docanchor file="a02344" title="Example file ">exampleFile</docanchor>
  </compound>
  <compound kind="page">
    <name>leastSquaresExample</name>
    <title>A least-squares problem example</title>
    <filename>a02345</filename>
  </compound>
  <compound kind="page">
    <name>problemWritingExample</name>
    <title>How to write a problem</title>
    <filename>a02346</filename>
  </compound>
  <compound kind="page">
    <name>taskDynamicsExample</name>
    <title>How to create a new task dynamics</title>
    <filename>a02347</filename>
  </compound>
  <compound kind="page">
    <name>concepts</name>
    <title>TVM concepts</title>
    <filename>a02348</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>The TVM library</title>
    <filename>index</filename>
  </compound>
</tagfile>
